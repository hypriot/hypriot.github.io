<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raspberry Pi on Docker Pirates ARMed with explosive stuff</title>
    <link>http://blog.hypriot.com/categories/raspberry-pi/</link>
    <description>Recent content in Raspberry Pi on Docker Pirates ARMed with explosive stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Jan 2016 16:00:00 +0200</lastBuildDate>
    <atom:link href="http://blog.hypriot.com/categories/raspberry-pi/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How xXx makes HypriotOS a lot more attractive</title>
      <link>http://blog.hypriot.com/post/how-xxx-makes-hypriotos-a-lot-more-attractive/</link>
      <pubDate>Mon, 18 Jan 2016 16:00:00 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/how-xxx-makes-hypriotos-a-lot-more-attractive/</guid>
      <description>&lt;p&gt;&lt;strong&gt;What does Vin Diesel and xXx have to do with HypriotOS? Well, the short version of it is: it is all about the xXx&lt;/strong&gt;.&lt;br /&gt;
But more on that later.&lt;/p&gt;

&lt;p&gt;It all began when Dieter aka &lt;a href=&#34;https://twitter.com/Quintus23M&#34;&gt;@Quintus23M&lt;/a&gt; started to experiment with the NVIDIA ShieldTV.&lt;/p&gt;

&lt;p&gt;The ShieldTV is a curious little thing. Sold as a media hub for your living room it does deliver one teraflop of processing power.
On top of that it is one of the first 64-bit ARM boards that can be bought for a reasonable price.
Regular readers of our blog know that it is not in Dieter&amp;rsquo;s nature to resist the Sirens voices of such an appealing beauty for long.
Last December he started the work to get Docker running on the ShieldTV and &lt;a href=&#34;http://blog.hypriot.com/post/getting-docker-running-on-a-highend-arm-gaming-console-for-fun-and-profit/&#34;&gt;described his journey&lt;/a&gt; on our blog.
The gist of it is that it was quite an involved process of creating his own custom Debian based operating system that supported building Go and Docker for ARM64.&lt;/p&gt;

&lt;p&gt;The work of Dieter on the ShieldTV inspired our team to revisit the way we were building our beloved HypriotOS for the Raspberry Pi.
Longing to publish the way we build it for quite some time we had been ashamed to actually do it because it was such a complicated mess.
Don&amp;rsquo;t get me wrong - it worked well enough and was completely automated with our CI system and even tested, but ultimately it was difficult to understand and change.&lt;/p&gt;

&lt;p&gt;So Dieter&amp;rsquo;s work got us thinking:
What if we could restructure the build process of HypriotOS in such a way that it would be built in distinct layers that would create distinct build artifacts on their own.
What if those artifacts could be tested and published on their own, too? Only to be assembled in a final step at the end to create a fully working SD card image.
What if those distinct steps were self-contained and easy to understand?&lt;/p&gt;

&lt;p&gt;Last week we had some time at our hands and we started working on a build process that would be the answer to all those questions.
It is certainly still a little rough around the edges and needs further tweaking but it produces a working SD card image for the Raspberry Pi.
We consider it beta quality and it is not yet completely on par with our stable HypriotOS Hector image, but it already runs very well.&lt;/p&gt;

&lt;p&gt;The main repository for building HypriotOS SD card image for the Raspberry Pi can be found at GitHub in the &lt;a href=&#34;https://github.com/hypriot/image-builder-rpi&#34;&gt;Image-Builder-Rpi Repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So what happens in this repository?&lt;/p&gt;

&lt;p&gt;Basically it just assembles prepared artifacts into a working SD card image which then can be &lt;a href=&#34;https://github.com/hypriot/flash&#34;&gt;easily flashed&lt;/a&gt; onto a SD card.&lt;/p&gt;

&lt;p&gt;The artifacts that are combined here are produced elsewhere each in their own GitHub repository:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hypriot/os-rootfs&#34;&gt;a basic filesystem that is based on Debian Jessie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hypriot/rpi-kernel&#34;&gt;a Raspberry Pi compatible Linux kernel and firmware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hypriot/image-builder-raw&#34;&gt;a Raspberry Pi image file that contains the necessary partitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://packagecloud.io/Hypriot/Schatzkiste&#34;&gt;a couple of Debian packages with software like Docker, Docker-Machine and Docker-Compose&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The basic idea is that all these artifacts can be build and tested with the help of Docker.
For instance if you look into the &lt;a href=&#34;https://github.com/hypriot/os-rootfs&#34;&gt;os-rootfs&lt;/a&gt; repository you will find a &lt;code&gt;Dockerfile&lt;/code&gt; in the root of the project that will allow you to create a build and test environment for the root filesystem.&lt;/p&gt;

&lt;p&gt;This makes two important things possible: Firstly it allows others to build the rootfs locally on their own computer and fix or extend the rootfs with ease.
And secondly the rootfs is build and tested on &lt;a href=&#34;https://travis-ci.org/hypriot/os-rootfs&#34;&gt;Travis CI&lt;/a&gt; everytime somebody creates - for instance - a pull request.
Combined these two points create a transparent development process with instant feedback.&lt;/p&gt;

&lt;p&gt;It turned out that this approach is generic and powerful enough to be applied - you probably already guessed it - to the NVIDIA ShieldTV, too.
By publishing the &lt;a href=&#34;https://github.com/hypriot/image-builder-nvidia-shieldtv&#34;&gt;Image-Builder-NVIDIA-ShieldTV&lt;/a&gt; repository we are making good on Dieter&amp;rsquo;s promise to publish the sources for Dieter&amp;rsquo;s journey with the ShieldTV.&lt;/p&gt;

&lt;p&gt;But hold on - that&amp;rsquo;s not all. To proof to ourselves that this process allows to easily port HypriotOS to different development boards we created &lt;a href=&#34;https://github.com/hypriot/image-builder-odroid-c1&#34;&gt;another Github repository&lt;/a&gt;.
It builds a SD card image for the very capable &lt;a href=&#34;http://www.hardkernel.com/main/products/prdt_info.php?g_code=G143703355573&#34;&gt;ODROID C1+&lt;/a&gt; development board.
Similar to the Raspberry Pi 2 the ODROID C1+ features a quad core ARMv7 CPU with 1 GB of memory. Distinct from the Raspberry Pi 2 it features a gigabit ethernet port.
A highlevel comparision of both devices can be found at &lt;a href=&#34;http://www.cnx-software.com/2015/02/02/raspberry-pi-2-odroid-c1-development-boards-comparison/&#34;&gt;CNX-Software&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With this third supported board for HypriotOS we proofed to ourselves that this new build process makes it not only feasible but actually quite easy to extend the support of HypriotOS to new development boards.&lt;/p&gt;

&lt;p&gt;Overall the relation of the different repositories now looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/hypriotos-xxx/hypriotos_buildpipeline.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;All these changes also redefined for us what HypriotOS is all about.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our old mission statement for HypriotOS was:&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;&amp;ldquo;HypriotOS is a minimal operating system for the Raspberry Pi 1 &amp;amp; 2 that provides an optimized environment for running Docker. It is very easy to install and use. HypriotOS prides itself for coming with very recent versions of the Linux kernel and all included software.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our new mission statement is:&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;&amp;ldquo;HypriotOS is a minimal Debian-based operating system for &lt;strong&gt;many popular IoT devices&lt;/strong&gt; that provides an optimized environment for running Docker. It is very easy to install and use. HypriotOS prides itself for coming with very recent versions of the Linux kernel and all included software.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is just a small change but it will have big implications.&lt;/p&gt;

&lt;p&gt;One of the biggest downsides of having an ever increasing amount of IoT devices to choose from is fragmentation. Each device comes with varying support for existing operating systems.
Take Linux for instance. Even if a vendor provides Linux support for a device from the start - it is often based on an outdated Linux kernel.
This in turn often enough means that you can only use old software on top of it. Docker with OverlayFS is such an example. It can only be used with a Linux kernel greater than 3.18.
And that&amp;rsquo;s not only a problem of the small vendors, it even happens with big vendors like NVIDIA. The NVIDIA ShieldTV is provided only with a 3.10 Linux kernel while the latest stable Linux kernel is 4.4.
Not to mention that the 3.10 kernel is &lt;a href=&#34;https://www.kernel.org/category/releases.html&#34;&gt;not supported any more by the kernel maintainers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With this background in mind a major goal of HypriotOS is to provide an operating system that behaves as similar as possible on &lt;strong&gt;different&lt;/strong&gt; IoT devices.
While I know that this might prove to be a difficult task - especially in regards to support for recent Linux kernels - I think it might prove to be a worthwhile effort that provides much value.&lt;/p&gt;

&lt;p&gt;Providing a beta version of HypriotOS that supports three different development boards is a first step into that direction.&lt;/p&gt;

&lt;p&gt;Being just able to flash HypriotOS on a SD card and get going in minutes is one of the basic promises of HypriotOS, so without further ado you can download it here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hypriot/image-builder-rpi/releases&#34;&gt;HypriotOS for the Raspberry Pi&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/hypriot/image-builder-nvidia-shieldtv/releases&#34;&gt;HypriotOS for the NVIDIA ShieldTV&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/hypriot/image-builder-odroid-c1/releases&#34;&gt;HypriotOS for the ODROID C1+&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hopefully you have a lot fun trying out what HypriotOS has to offer!&lt;br /&gt;
&lt;strong&gt;Note:&lt;/strong&gt; we changed the default username to &lt;code&gt;pirate&lt;/code&gt; (password &lt;code&gt;hypriot&lt;/code&gt;) and disabled the &lt;code&gt;root&lt;/code&gt; user for security reasons.&lt;/p&gt;

&lt;p&gt;And you might have guessed the connection between this post and xXx. Each x stands for one of our initially supported devices.
Hopefully HypriotOS develops the same momentum as Vin Diesel when he is hunting down his enemies. ;-)&lt;/p&gt;

&lt;p&gt;By adding support for many more boards we think HypriotOS gets a lot more attractive! What do you think?&lt;br /&gt;
And for which board would you want to see support next?&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.
You also might wanna discuss this article on &lt;a href=&#34;https://news.ycombinator.com/item?id=10374271&#34;&gt;HackerNews&lt;/a&gt; or vote it up if you find it interesting.&lt;/p&gt;

&lt;p&gt;Govinda aka &lt;a href=&#34;https://twitter.com/_beagile_&#34;&gt;@&lt;em&gt;beagile&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First Meetup at University of Bamberg summons local Docker community</title>
      <link>http://blog.hypriot.com/post/first_docker_meetup_university_bamberg/</link>
      <pubDate>Fri, 15 Jan 2016 21:47:24 +0100</pubDate>
      
      <guid>http://blog.hypriot.com/post/first_docker_meetup_university_bamberg/</guid>
      <description>&lt;p&gt;&lt;strong&gt;An introduction to Docker, hands-on tutorials, live demos and roughly 30 attendees.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the summary of the first Docker meetup that we organized in cooperation with University of Bamberg. As a supplement to this event yesterday, we share the pictures and the slides of the presentation.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;gallery clearfix&#34; itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;





&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/docker_meetup_university_bamberg_00.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1030x684&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/thumbnails/thumb_docker_meetup_university_bamberg_00.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Our self-made poster&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Our self-made poster
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Dieter Reuter&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/docker_meetup_university_bamberg_01.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1030x684&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/thumbnails/thumb_docker_meetup_university_bamberg_01.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Some introductory words by Marcel Großmann as representer of the University&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Some introductory words by Marcel Großmann as representer of the University
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Dieter Reuter&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/docker_meetup_university_bamberg_02.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1030x684&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/thumbnails/thumb_docker_meetup_university_bamberg_02.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;... and Mathias with introductory words for Hypriot.&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    ... and Mathias with introductory words for Hypriot.
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Docker Inc.&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/docker_meetup_university_bamberg_03.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1030x684&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/thumbnails/thumb_docker_meetup_university_bamberg_03.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Introduction to Docker: Knowing about the evolution of virtualization helps to understand Docker.&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Introduction to Docker: Knowing about the evolution of virtualization helps to understand Docker.
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Dieter Reuter&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/docker_meetup_university_bamberg_04.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1030x684&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/thumbnails/thumb_docker_meetup_university_bamberg_04.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Community is carefully listening.&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Community is carefully listening.
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Dieter Reuter&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/docker_meetup_university_bamberg_05.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1030x684&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/thumbnails/thumb_docker_meetup_university_bamberg_05.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;While everyone is playing with Docker the entire Hypriot team is around to help.&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    While everyone is playing with Docker the entire Hypriot team is around to help.
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Dieter Reuter&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/docker_meetup_university_bamberg_06.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1030x684&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/thumbnails/thumb_docker_meetup_university_bamberg_06.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Mathias announcing a live demo with Hypriot Cluster Lab presented by Andreas (in the middle).&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Mathias announcing a live demo with Hypriot Cluster Lab presented by Andreas (in the middle).
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Dieter Reuter&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/photoswipe.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/default-skin/default-skin.css&#34;&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe-ui-default.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/initphotoswipe.js&#34;&gt;&lt;/script&gt;



&lt;div class=&#34;pswp&#34; tabindex=&#34;-1&#34; role=&#34;dialog&#34; aria-hidden=&#34;true&#34;&gt;

&lt;div class=&#34;pswp__bg&#34;&gt;&lt;/div&gt;

&lt;div class=&#34;pswp__scroll-wrap&#34;&gt;
    
    &lt;div class=&#34;pswp__container&#34;&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    
    &lt;div class=&#34;pswp__ui pswp__ui--hidden&#34;&gt;
    &lt;div class=&#34;pswp__top-bar&#34;&gt;
      
      &lt;div class=&#34;pswp__counter&#34;&gt;&lt;/div&gt;
      &lt;button class=&#34;pswp__button pswp__button--close&#34; title=&#34;Close (Esc)&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--share&#34; title=&#34;Share&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--fs&#34; title=&#34;Toggle fullscreen&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--zoom&#34; title=&#34;Zoom in/out&#34;&gt;&lt;/button&gt;
      
      
      &lt;div class=&#34;pswp__preloader&#34;&gt;
        &lt;div class=&#34;pswp__preloader__icn&#34;&gt;
          &lt;div class=&#34;pswp__preloader__cut&#34;&gt;
            &lt;div class=&#34;pswp__preloader__donut&#34;&gt;&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;pswp__share-modal pswp__share-modal--hidden pswp__single-tap&#34;&gt;
      &lt;div class=&#34;pswp__share-tooltip&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--left&#34; title=&#34;Previous (arrow left)&#34;&gt;
    &lt;/button&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--right&#34; title=&#34;Next (arrow right)&#34;&gt;
    &lt;/button&gt;
    &lt;div class=&#34;pswp__caption&#34;&gt;
      &lt;div class=&#34;pswp__caption__center&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;style&gt;
    .gallery {  }
    .gallery img { width: 100%; height: auto; }
    .gallery figure { display: block; float: left; margin: 0 5px 5px 0; width: 200px; }
    .gallery figcaption { display: none; }
    .gallery div.title { font-weight: bold; }
    span[itemprop=&#34;copyrightHolder&#34;] { color : #888; float: right; }
    span[itemprop=&#34;copyrightHolder&#34;]:before { content: &#34;Foto: &#34;; }
    img[itemprop=&#34;thumbnail&#34;]{ width: 200px; }
&lt;/style&gt;


&lt;script&gt;initPhotoSwipeFromDOM(&#39;.gallery&#39;);&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;And here the slides of the presentation:&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/79aLKAZjsSsL5i&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Thanks to all guests for coming, hacking, and the good discussions. Special thanks to Prof. Krieger and Marcel Großmann for the awesome support from University.
&lt;br /&gt;&lt;br /&gt;
The next Docker Meetup probably will take place on February the 25th. Save the date! Details will follow soon, stay tuned!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/MathiasRenner&#34;&gt;@MathiasRenner&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to compile Go on any ARM device</title>
      <link>http://blog.hypriot.com/post/how-to-compile-go-on-arm/</link>
      <pubDate>Thu, 31 Dec 2015 18:47:24 +0100</pubDate>
      
      <guid>http://blog.hypriot.com/post/how-to-compile-go-on-arm/</guid>
      <description>

&lt;p&gt;As for today, up to the latest Go version 1.5.2 there is no official binary release
of the Go runtime available for ARM devices. Maybe you can install it as
a package from your operating system, but these packages are almost outdated.&lt;/p&gt;

&lt;p&gt;For this reason, anyone who wants to use GOLANG (or Go for short) on an ARM device has to compile
it by himself. This is a cumbersome and time consuming task, which sometimes leads
to bad results.&lt;/p&gt;

&lt;p&gt;To cover these issues, we&amp;rsquo;ll explain in this short and basic tutorial how to compile
and test the Go compiler runtime by yourself. We&amp;rsquo;d like to cover all the details you&amp;rsquo;ll
need from the ground up. And with having this basic understanding then it&amp;rsquo;s easier
for everybody to build and use the Go compiler in a consistent and reproducible way.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s get started with building your own Go environment on ARM&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;let-s-go-on-arm:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;Let&amp;rsquo;s Go on ARM&lt;/h3&gt;

&lt;p&gt;As a member of the Hypriot team I&amp;rsquo;ll show you all the necessary steps on a
Raspberry Pi 2 board. Together we&amp;rsquo;ll first install the operating system with
flashing a SD card with HypriotOS and then installing all the build tools we&amp;rsquo;ll
need to bootstrap a complete Go development environment.&lt;/p&gt;

&lt;p&gt;These steps are quite similar for almost every other Linux distro, so I&amp;rsquo;m assuming you&amp;rsquo;ll
need just a short time to adjust the build steps for any Ubuntu, Debian, ArchLinux
or other Linux OS on your ARM device of choice.&lt;/p&gt;

&lt;h3 id=&#34;bootstrap-the-building-system:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;Bootstrap the building system&lt;/h3&gt;

&lt;p&gt;We need the following parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a Raspberry Pi 2 Model B&lt;/li&gt;
&lt;li&gt;a SD card with 4Gbyte or larger&lt;/li&gt;
&lt;li&gt;a power adapter or an USB cable to power the Raspberry Pi&lt;/li&gt;
&lt;li&gt;an ethernet cable to connect the Raspberry Pi to the internet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As soon as you have setup the hardware, we can start to install the OS and login
to our fresh and clean build system.&lt;/p&gt;

&lt;h4 id=&#34;a-flash-a-new-sd-card-with-hypriotos-0-6-1:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;a) Flash a new SD card with HypriotOS 0.6.1&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;m using a Mac to flash the SD card, so maybe you have to look for specific
instructions for your OS in one of our other posts.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget http://downloads.hypriot.com/hypriot-rpi-20151115-132854.img.zip
$ tar -xvf hypriot-rpi-20151115-132854.img.zip
$ flash --hostname golang-nutshell hypriot-rpi-20151115-132854.img
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;b-boot-the-raspberry-pi-2-with-hypriotos:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;b) Boot the Raspberry Pi 2 with HypriotOS&lt;/h4&gt;

&lt;p&gt;Just insert the SD card into your Raspberry Pi 2, connect the Ethernet cable
between the Raspi and your Internet router/switch and power on the Raspi.&lt;/p&gt;

&lt;p&gt;Within one or two minutes the Raspi is booted and has already configured the SD card
for the first time to it&amp;rsquo;s full size. We defined the specific hostname &lt;code&gt;golang-nutshell&lt;/code&gt;
for the Raspi, so we can lookup the device on our network.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ping -c 3 golang-nutshell.local

PING golang-nutshell.local (192.168.2.116): 56 data bytes
64 bytes from 192.168.2.116: icmp_seq=0 ttl=64 time=5.337 ms
64 bytes from 192.168.2.116: icmp_seq=1 ttl=64 time=6.142 ms
64 bytes from 192.168.2.116: icmp_seq=2 ttl=64 time=6.781 ms

--- golang-nutshell.local ping statistics ---
3 packets transmitted, 3 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 5.337/6.087/6.781/0.591 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;c-prepare-ssh-for-login:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;c) Prepare SSH for login&lt;/h4&gt;

&lt;p&gt;In case you used the same hostname or IP address before, you should clean your
SSH cache with the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-keygen -R golang-nutshell.local
$ ssh-keygen -R 192.168.2.116
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, login to your Raspi with the standard username=&lt;code&gt;pi&lt;/code&gt; and password=&lt;code&gt;raspberry&lt;/code&gt;,
or you can optionally just setup SSH with your SSH credentials.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-copy-id pi@golang-nutshell.local
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;d-login-to-your-raspberry-pi:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;d) Login to your Raspberry Pi&lt;/h4&gt;

&lt;p&gt;Once the Raspi and SSH access is configured, we can login and start working on
our task to compile Go from the source code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh pi@golang-nutshell.local
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;e-install-all-the-required-build-dependencies:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;e) Install all the required build dependencies&lt;/h4&gt;

&lt;p&gt;In order to build Go 1.5 we need first a running Go 1.4 compiler on our system.
So, we&amp;rsquo;ll start our journey with building the Go 1.4 compiler first.&lt;/p&gt;

&lt;p&gt;Next we have to consider that Go 1.4.x has to be built with a &lt;code&gt;gcc&lt;/code&gt; compiler,
because the Go 1.4 compiler is written in C code.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s install all the necessary build dependencies. Some of these packages are
already pre-installed with HypriotOS, but I&amp;rsquo;d like to list all of them here so you
can easily replay this tutorial on a different Linux distro as well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get install -y curl gcc git-core
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;download-go-1-4-3-source-tarball-and-compile-it:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;Download Go 1.4.3 source tarball and compile it&lt;/h3&gt;

&lt;p&gt;The GOLANG team provides all the Go sources for all the different versions as
easy to download and install tarballs. But it&amp;rsquo;s not clearly documented how to compile
and package it the right way to get a package for a binary release later on.&lt;/p&gt;

&lt;p&gt;Ok, so let&amp;rsquo;s explain these steps in detail and you&amp;rsquo;ll get to know all the important
parts. After all it&amp;rsquo;s just easy to make some mistakes and so we&amp;rsquo;ll try to break
the steps down for easy understanding.&lt;/p&gt;

&lt;h4 id=&#34;a-download-the-go-1-4-3-source-code:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;a) Download the Go 1.4.3 source code&lt;/h4&gt;

&lt;p&gt;Maybe some of you will be asking, why I&amp;rsquo;m extracting the Go source code into the
directory &lt;code&gt;/usr/local/go&lt;/code&gt; and running the gcc compiler as a &lt;code&gt;root&lt;/code&gt; user.
I&amp;rsquo;m coming back later on to the reasons behind, but for now you should know it&amp;rsquo;s just
important for creating the binary package.&lt;/p&gt;

&lt;p&gt;You can see, I&amp;rsquo;m downloading the source tarball and extract it right away in a
single step, but if you like you can break this into two steps as well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo rm -fr /usr/local/go
$ curl -sSL https://storage.googleapis.com/golang/go1.4.3.src.tar.gz | sudo tar -xz -C /usr/local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively using two steps:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo rm -fr /usr/local/go
$ curl -O https://storage.googleapis.com/golang/go1.4.3.src.tar.gz
$ sudo tar -xzf go1.4.3.src.tar.gz -C /usr/local
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;b-compile-go-1-4-3-without-running-the-tests:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;b) Compile Go 1.4.3 without running the tests&lt;/h4&gt;

&lt;p&gt;We compile Go now from within this installation directory and please we warned
it will take some time. On a Raspberry Pi 2 with it&amp;rsquo;s four ARMv7 cores it&amp;rsquo;s quite fast
enough, but on a slower machine it can take hours!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /usr/local/go/src
$ time sudo ./make.bash

# Building C bootstrap tool.
cmd/dist
...
---
Installed Go for linux/arm in /usr/local/go
Installed commands in /usr/local/go/bin

real	10m41.755s
user	12m8.140s
sys	0m46.860s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As soon as we can read the message &lt;code&gt;Installed Go for linux/arm in /usr/local/go&lt;/code&gt;
we know the build was successful and we can use the Go compiler right away.&lt;/p&gt;

&lt;h4 id=&#34;c-test-running-the-go-1-4-3-locally:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;c) Test running the Go 1.4.3 locally&lt;/h4&gt;

&lt;p&gt;According to the fact that we used the standard installation path in &lt;code&gt;/usr/local/go&lt;/code&gt;,
we are now able to use Go 1.4.3 directly on our Raspi. The only thing we need is
to define the PATH variable in order that all the Go tools and programs can be used
from the command line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export PATH=/usr/local/go/bin:$PATH
$ go version

go version go1.4.3 linux/arm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, we do have successfully compiled Go 1.4.3 on our Raspberry Pi and can
use it now right away. This process lasts some time and we don&amp;rsquo;t like to repeat
this much often, right? And on the other side, did you recognized that we didn&amp;rsquo;t
run any tests at all?&lt;/p&gt;

&lt;p&gt;Running the Go tests at compile time is quite easy, just run &lt;code&gt;./all.bash&lt;/code&gt; instead
of &lt;code&gt;./make.bash&lt;/code&gt;. But this will take way much longer and typically the tests will
fail on a Raspberry Pi 2 and maybe on other similar devices too. In this case it&amp;rsquo;s
better to compile Go an run the tests on a reliable machine like the
&lt;a href=&#34;https://www.scaleway.com&#34;&gt;Scaleway&lt;/a&gt; cloud servers.&lt;/p&gt;

&lt;h3 id=&#34;package-go-1-4-3-as-a-binary-tarball:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;Package Go 1.4.3 as a binary tarball&lt;/h3&gt;

&lt;p&gt;Maybe some of you already know, that the GOLANG team is providing Go binary releases
for the most common operating systems. But unfortunately not for ARM.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s create our own Go binary tarball in the exact same way like the originals,
because then it&amp;rsquo;s easier for us using the exact same ways and scripts when
we&amp;rsquo;d like to install it on our new ARM machines as well.&lt;/p&gt;

&lt;h4 id=&#34;a-analyse-the-original-go-binary-tarball:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;a) Analyse the original Go binary tarball&lt;/h4&gt;

&lt;p&gt;We can find the official GOLANG binary releases on their download page.
So let&amp;rsquo;s just google for &amp;ldquo;golang download&amp;rdquo; and we&amp;rsquo;ll get to their website
&lt;a href=&#34;https://golang.org/dl/&#34;&gt;Downloads - The Go Programming Language&lt;/a&gt; and select
Go 1.4.3 for a Linux on Intel 64-bit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -O https://storage.googleapis.com/golang/go1.4.3.linux-amd64.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s analyze the structure of this tarball in more detail.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar -vtf go1.4.3.linux-amd64.tar.gz | head -10
drwxr-xr-x 0/0               0 2015-09-23 06:43 go/
-rw-r--r-- 0/0           17575 2015-09-23 06:37 go/AUTHORS
-rw-r--r-- 0/0           24564 2015-09-23 06:37 go/CONTRIBUTORS
-rw-r--r-- 0/0            1479 2015-09-23 06:37 go/LICENSE
-rw-r--r-- 0/0            1303 2015-09-23 06:37 go/PATENTS
-rw-r--r-- 0/0            1112 2015-09-23 06:37 go/README
-rw-r--r-- 0/0               7 2015-09-23 06:38 go/VERSION
drwxr-xr-x 0/0               0 2015-09-23 06:37 go/api/
-rw-r--r-- 0/0             524 2015-09-23 06:37 go/api/README
-rw-r--r-- 0/0           19302 2015-09-23 06:37 go/api/except.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tarball has some special settings we should really keep care about it.
First of all, the user and group id&amp;rsquo;s &lt;code&gt;0/0&lt;/code&gt; are all numeric and showing this
is a &lt;code&gt;root/root&lt;/code&gt; user.
Next to notice is that the directory name is always starting with &lt;code&gt;go/&lt;/code&gt; and
without any leading slash &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These are all just small details, but we have to
make sure, we create our own tarball the same way - otherwise it will work on some
machines and on some we&amp;rsquo;ll get some wired issues, because we don&amp;rsquo;t know which
command a different user will use to install the binary tarball on his machine.&lt;/p&gt;

&lt;h4 id=&#34;b-create-our-own-go-binary-tarball:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;b) Create our own Go binary tarball&lt;/h4&gt;

&lt;p&gt;With this details in mind we can create our own binary release tarball easily.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar -czf ~/go1.4.3.linux-armv7.tar.gz -C /usr/local go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or alternatively, if your &lt;code&gt;tar&lt;/code&gt; command does not support the &lt;code&gt;-C&lt;/code&gt; flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /usr/local
$ tar -czf ~/go1.4.3.linux-armv7.tar.gz go
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;c-prove-our-own-go-binary-tarball:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;c) Prove our own Go binary tarball&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ tar -vtf go1.4.3.linux-armv7.tar.gz | head -10
drwxr-xr-x root/root         0 2015-12-31 14:06 go/
drwxr-xr-x root/root         0 2015-12-31 14:16 go/bin/
-rwxr-xr-x root/root   7659728 2015-12-31 14:16 go/bin/go
-rwxr-xr-x root/root   2899312 2015-12-31 14:16 go/bin/gofmt
-rw-r--r-- root/root      1303 2015-09-23 06:37 go/PATENTS
-rw-r--r-- root/root      1479 2015-09-23 06:37 go/LICENSE
drwxr-xr-x root/root         0 2015-09-23 06:38 go/test/
-rw-r--r-- root/root       722 2015-09-23 06:37 go/test/sinit_run.go
-rw-r--r-- root/root      2280 2015-09-23 06:37 go/test/nil.go
-rw-r--r-- root/root       716 2015-09-23 06:37 go/test/typeswitch3.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, not exactly the same as the original. The user and group id&amp;rsquo;s are not in numerical form, but all the other details seems to be correct. We just have to include the &lt;code&gt;--numeric-owner&lt;/code&gt; flag and we&amp;rsquo;ll get a perfect result.&lt;/p&gt;

&lt;h4 id=&#34;d-recommended-way-to-package-the-go-binary-tarball:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;d) Recommended way to package the Go binary tarball&lt;/h4&gt;

&lt;p&gt;With all the details proved well, we do have now a way how we should package the
Go pre-compiled binary tarball. As long as your ARM Linux system supports the &lt;code&gt;tar&lt;/code&gt;
command with all the necessary flags, we can use this single command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar --numeric-owner -czf ~/go1.4.3.linux-armv7.tar.gz -C /usr/local go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It can happen that your &lt;code&gt;tar&lt;/code&gt; version doesn&amp;rsquo;t support the &lt;code&gt;--numeric-owner&lt;/code&gt; flag,
so just leave this out. When your &lt;code&gt;tar&lt;/code&gt; doesn&amp;rsquo;t support the &lt;code&gt;-z&lt;/code&gt; compresssion flag,
it can be done in two steps as well. And if &lt;code&gt;-C&lt;/code&gt; flag isn&amp;rsquo;t supported, we can
work around this too.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /usr/local
$ tar --numeric-owner -cf ~/go1.4.3.linux-armv7.tar go
$ gzip ~/go1.4.3.linux-armv7.tar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, here is our almost perfect own-built pre-compiled Go tarball, which
we could install within just seconds on any of our ARM devices.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar -vtf go1.4.3.linux-armv7.tar.gz | head -10
drwxr-xr-x 0/0               0 2015-12-31 14:06 go/
drwxr-xr-x 0/0               0 2015-12-31 14:16 go/bin/
-rwxr-xr-x 0/0         7659728 2015-12-31 14:16 go/bin/go
-rwxr-xr-x 0/0         2899312 2015-12-31 14:16 go/bin/gofmt
-rw-r--r-- 0/0            1303 2015-09-23 06:37 go/PATENTS
-rw-r--r-- 0/0            1479 2015-09-23 06:37 go/LICENSE
drwxr-xr-x 0/0               0 2015-09-23 06:38 go/test/
-rw-r--r-- 0/0             722 2015-09-23 06:37 go/test/sinit_run.go
-rw-r--r-- 0/0            2280 2015-09-23 06:37 go/test/nil.go
-rw-r--r-- 0/0             716 2015-09-23 06:37 go/test/typeswitch3.go
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;install-and-test-the-go-1-4-3-binary-tarball:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;Install and test the Go 1.4.3 binary tarball&lt;/h3&gt;

&lt;p&gt;Honestly, this was a long and dirty road, just to get a Go 1.4.3 compiler so that
we can start developing our Go code and compiling our real world tasks on an
ARM device. But with all these details we know now exactly how to create and package
a Go binary release as a pre-compiled tarball.&lt;/p&gt;

&lt;p&gt;And finally, let&amp;rsquo;s see how easy we do have it now, when we have a Go binary release
for our ARM device available. It&amp;rsquo;s really that damn simple to install Go and just using it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo rm -fr /usr/local/go
$ sudo tar -xzf go1.4.3.linux-armv7.tar.gz -C /usr/local
$ export PATH=/usr/local/go/bin:$PATH
$ go version

go version go1.4.3 linux/arm
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;compiling-testing-and-packaging-go-1-5-2:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;Compiling, testing and packaging Go 1.5.2&lt;/h3&gt;

&lt;p&gt;With all our previous detailed work this part is now a really easy task.&lt;/p&gt;

&lt;p&gt;As the first step, before we&amp;rsquo;re able to compile Go 1.5.2 on our ARM board, we have
to install a Go 1.4.3 compiler. Luckily we have already a pre-compiled Go 1.4.3
which we can use here. But we should install it in a different location, which is
the recommended way according to the GOLANG team.&lt;/p&gt;

&lt;p&gt;Install the Go 1.4.3 binary release from our own tarball:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rm -fr $HOME/go1.4
$ mkdir -p $HOME/go1.4
$ tar -xzf go1.4.3.linux-armv7.tar.gz -C $HOME/go1.4 --strip-components=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can download the Go 1.5.2 source tarball and bootstrap/compile it with Go 1.4.3:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo rm -fr /usr/local/go
$ curl -sSL https://storage.googleapis.com/golang/go1.5.2.src.tar.gz | sudo tar -xz -C /usr/local

$ cd /usr/local/go/src
$ time sudo GOROOT_BOOTSTRAP=/home/pi/go1.4 ./make.bash

##### Building Go bootstrap tool.
...
---
Installed Go for linux/arm in /usr/local/go
Installed commands in /usr/local/go/bin

real	11m14.203s
user	26m29.730s
sys	1m18.470s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s package Go 1.5.2 as a binary tarball, using our recommended way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar --numeric-owner -czf ~/go1.5.2.linux-armv7.tar.gz -C /usr/local go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prove the Go 1.5.2 binary package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar -vtf go1.5.2.linux-armv7.tar.gz | head -10
drwxr-xr-x 0/0               0 2015-12-31 17:08 go/
drwxr-xr-x 0/0               0 2015-12-31 17:18 go/bin/
-rwxr-xr-x 0/0         9004984 2015-12-31 17:18 go/bin/go
-rwxr-xr-x 0/0         3163768 2015-12-31 17:17 go/bin/gofmt
-rw-r--r-- 0/0            1519 2015-12-03 01:52 go/README.md
-rw-r--r-- 0/0            1303 2015-12-03 01:52 go/PATENTS
-rw-r--r-- 0/0            1479 2015-12-03 01:52 go/LICENSE
drwxr-xr-x 0/0               0 2015-12-03 01:53 go/test/
-rw-r--r-- 0/0             595 2015-12-03 01:53 go/test/sinit_run.go
-rw-r--r-- 0/0            2280 2015-12-03 01:53 go/test/nil.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install and test the Go 1.5.2 binary tarball&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo rm -fr /usr/local/go
$ sudo tar -xzf go1.5.2.linux-armv7.tar.gz -C /usr/local
$ export PATH=/usr/local/go/bin:$PATH
$ go version

go version go1.5.2 linux/arm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wow, this time it was pretty easy and completed with a few commands only.
But we didn&amp;rsquo;t run any tests at all. And honestly, as a developer I just like
to install and use the Go compiler - I don&amp;rsquo;t like to compile it by myself,
so I recommend using a Go binary release would be the best way!&lt;/p&gt;

&lt;h3 id=&#34;key-takeaways:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;Key takeaways&lt;/h3&gt;

&lt;p&gt;As you can clearly see, it&amp;rsquo;s really the easiest and preferred way to install a
Go binary release instead of compiling the Go compiler every time from source.
Especially for some slow ARM devices it can take hours and will sometimes lead
to some confusing problems too.&lt;/p&gt;

&lt;p&gt;When you prefer to use a completely tested Go binary release it&amp;rsquo;s even more desired
to use pre-compiled and successfully tested Go versions for ARMv6, ARMv7 and
even later for the 64-bit ARM devices as well.&lt;/p&gt;

&lt;p&gt;The really great news here is, that  the GOLANG team has acknowleged to build
and deliver the future Go releases from version 1.6 on with pre-compiled tarballs - at least
for ARMv6. The difference between ARMv6 and ARMv7 are absolutely marginal for Go,
because the generated machine code doesn&amp;rsquo;t use any advanced instructions from the
ARMv7 instruction set at all and ARMv7 just uses a few more registers - that&amp;rsquo;s all.&lt;/p&gt;

&lt;p&gt;And in the meantime, we&amp;rsquo;ve already done all the hard work for you and created the
Go binary releases for 1.4.3, 1.5.1 and 1.5.2. Everything is open source and
available on our GitHub repo at &lt;a href=&#34;https://github.com/hypriot/golang-armbuilds&#34;&gt;https://github.com/hypriot/golang-armbuilds&lt;/a&gt;. From
here you can easily install a Go binary release within a few minutes with the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo rm -fr /usr/local/go
$ curl -sSL https://github.com/hypriot/golang-armbuilds/releases/download/v1.5.2/go1.5.2.linux-armv7.tar.gz | sudo tar -xz -C /usr/local
$ export PATH=/usr/local/go/bin:$PATH
$ go version

go version go1.5.2 linux/arm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is already a work in progress and we&amp;rsquo;re happy to get comments and pull-request
to improve the build task even more.&lt;/p&gt;

&lt;h3 id=&#34;feedback-please:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;Feedback please!&lt;/h3&gt;

&lt;p&gt;Please send us your feedback on our &lt;a href=&#34;https://gitter.im/hypriot/talk&#34;&gt;Gitter channel&lt;/a&gt; or tweet your thoughts and ideas on this tutorial at &lt;a href=&#34;https://twitter.com/HypriotTweets&#34;&gt;@HypriotTweets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dieter &lt;a href=&#34;https://twitter.com/Quintus23M&#34;&gt;@Quintus23M&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing Hypriot Cluster Lab: Docker clustering as easy as it gets</title>
      <link>http://blog.hypriot.com/post/introducing-hypriot-cluster-lab-docker-clustering-as-easy-as-it-gets/</link>
      <pubDate>Tue, 08 Dec 2015 15:30:00 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/introducing-hypriot-cluster-lab-docker-clustering-as-easy-as-it-gets/</guid>
      <description>

&lt;p&gt;Today we wanna share something with you that we have been working on for the last couple of weeks. And we are pretty exited about it, too.
It is based on our beloved &lt;a href=&#34;http://blog.hypriot.com/post/get-your-all-in-one-docker-playground-now-hypriotos-reloaded/&#34;&gt;HypriotOS&lt;/a&gt; and makes it dead simple to build Docker clusters.&lt;/p&gt;

&lt;p&gt;Until now it was not exactly easy to get started with Docker clustering.
You would have needed specific knowledge and lots of time to manually configure the cluster and its individual nodes.&lt;/p&gt;

&lt;p&gt;Well, that&amp;rsquo;s now a thing of the past.&lt;/p&gt;

&lt;p&gt;May we introduce to you the newest member of the Hypriot family: &lt;strong&gt;The Hypriot Cluster Lab!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/cluster-lab-release-v01/cluster_lab.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;With the &lt;strong&gt;Hypriot Cluster Lab&lt;/strong&gt; it is just a matter of minutes to set up your own personal Docker cluster.
All you need is a couple of Raspberry Pi&amp;rsquo;s - 3, 5, 30 or even 100 - it is up to you - and our Hypriot Cluster Lab SD card image.&lt;/p&gt;

&lt;p&gt;We designed the Cluster Lab to be completely self-configuring, so there is nothing to configure or to set up.
Basically you just need to download our Cluster Lab SD card image and flash it onto a number of SD cards.
Then ensure that all your Pi&amp;rsquo;s have network connectivity, insert the SD cards and switch on power.
Everything else is taken care of automatically by our Cluster Lab.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker Clustering as easy as it gets!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we started out to develop the Cluster Lab we wanted to be able to create complex Raspberry Pi based clusters with an arbitrary number of nodes.
We wanted to directly jump to deploying all kind of interesting services on top of the cluster instead of being concerned with setting up the cluster itself.&lt;/p&gt;

&lt;p&gt;And well - we managed to pull this off by combining a number of great technologies.
For instance &lt;strong&gt;Avahi&lt;/strong&gt; for announcing/managing who is a master and who is a slave node in the cluster. &lt;strong&gt;VLAN&lt;/strong&gt; for isolating the cluster network from other existing networks.
&lt;strong&gt;DHCP&lt;/strong&gt; for automatically assigning IP addresses to slave nodes in the cluster network. &lt;strong&gt;Consul&lt;/strong&gt; as a service registry and key-value-store.
And of course a number of other Docker related technologies that we already provide in HypriotOS: &lt;strong&gt;Docker Engine&lt;/strong&gt;, &lt;strong&gt;Swarm&lt;/strong&gt; and &lt;strong&gt;Compose&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;These technologies work together seamlessly and form what we call the Hypriot Cluster Lab. On top of it we are now able to easily deploy all kind of cluster services.
We have a number of ideas where this can come in handy in the future! Think Kubernetes for instance or Redis cluster.&lt;/p&gt;

&lt;p&gt;The Cluster Lab is still a bit rough around the edges and is more technology preview than production ready software, but we think it demonstrates the basic use case very well and shows the potential.
So for the coming weeks we want to gather feedback and make it more polished and resilient.
After that our main goal is to make it possible that all kind of cluster scenarios can be deployed on top of the Cluster Lab with just one command.
We want to make this possible by providing a kind of plugin-mechanism so that the community can help us in enabling many more interesting cluster use cases.&lt;/p&gt;

&lt;p&gt;The main reason that makes us really excited about the Cluster Lab, is that we think that there is great potential in using it as an educational tool in schools, universities or in commercial trainings.
It can be used to teach about Linux, Networking, Clustering, Microservices and so much more!&lt;/p&gt;

&lt;p&gt;And with the latest member of the Raspberry Pi family - the &lt;a href=&#34;http://swag.raspberrypi.org/collections/pi-zero/products/pi-zero&#34;&gt;Pi Zero&lt;/a&gt; - it got really cheap to have your own cluster. For about 50 bucks you are able to have a two to three node physical cluster.
And believe us - having physical nodes and being able to pull the network or power to simulate different cluster scenarios makes all the difference.
Working with &lt;strong&gt;real hardware&lt;/strong&gt; compared to a virtual environment (e.g. Vagrant) &lt;strong&gt;has a certain raw and primal feel about it&lt;/strong&gt; that we really like. :)&lt;/p&gt;

&lt;p&gt;So enough talking - let&amp;rsquo;s get our hands dirty - shall we?&lt;/p&gt;

&lt;h3 id=&#34;prerequisites-or-what-you-gonna-need-to-follow-along:8280d5ff2f6dfae78180ad5a72400c1a&#34;&gt;Prerequisites or what you gonna need to follow along&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;at least two &lt;strong&gt;Raspberry Pi&amp;rsquo;s&lt;/strong&gt;: Model 1 or 2 - both will do&lt;/li&gt;
&lt;li&gt;for each Raspberry Pi a &lt;strong&gt;power supply&lt;/strong&gt;, a &lt;strong&gt;MicroSD card&lt;/strong&gt; and a &lt;strong&gt;network cable&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;network switch&lt;/strong&gt; that is somehow connected to the Internet and a DHCP server; both is usually provided by your typical off-the-shelf home router&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, the switch should not filter IEEE 802.1Q VLAN flags out of network packets. Usually this feature is provided even by cheap switches. If you wanna be safe, go through a small test to figure this out. The test is &lt;a href=&#34;https://github.com/hypriot/cluster-lab/blob/master/README.md#troubleshooting&#34;&gt;listed here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;download-flash-boot-enjoy:8280d5ff2f6dfae78180ad5a72400c1a&#34;&gt;Download. Flash. Boot. Enjoy!&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;Download&lt;/strong&gt; the &lt;a href=&#34;https://downloads.hypriot.com/hypriot-rpi-20151128-152209-docker-swarm-cluster.img.zip&#34;&gt;Hypriot Cluster Lab SD card image&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Flash the image to your SD cards your way or use &lt;a href=&#34;https://github.com/hypriot/flash&#34;&gt;our funky flash script&lt;/a&gt; which makes flashing the SD cards so much easier.&lt;/p&gt;

&lt;p&gt;Another advantage of our flash script is that it also allows you to give your cluster nodes unique hostnames:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ flash --hostname cl-master http://downloads.hypriot.com/hypriot-rpi-20151128-152209-docker-swarm-cluster.img.zip
$ flash --hostname cl-node-1 http://downloads.hypriot.com/hypriot-rpi-20151128-152209-docker-swarm-cluster.img.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Put the freshly flashed SD cards in each node&amp;rsquo;s SD card slot.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Power on &lt;strong&gt;only one&lt;/strong&gt; node. This node will automatically become the master node of the cluster. It might take up to two minutes until the master node is fully functional.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; Find out the IP address of your master node. One way to do this is via &lt;a href=&#34;https://nmap.org/&#34;&gt;nmap&lt;/a&gt; and is described &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-and-linux-on-the-raspberry-pi/#ensure-everything-works:8814904f208dcaade82991443c7514e0&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt; Use the IP (from step 5) or the hostname (from step 2) to point your browser to &lt;code&gt;http://{IP or hostname of the master node}:8500&lt;/code&gt;. In our case &lt;code&gt;http://cl-master:8500&lt;/code&gt; opens the Consul web interface and our cluster master node is displayed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/cluster-lab-release-v01/consul_cl_master.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.&lt;/strong&gt; Power on all the remaining cluster nodes only if step 5 was successful. After about 2 minutes you should see the rest of them being listed in the Consul web interface, too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/cluster-lab-release-v01/consul_cl_master_and_nodes.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The last step makes the cluster fully operational and we are now able to work with the cluster in earnest.&lt;/p&gt;

&lt;h3 id=&#34;babysteps-with-our-cluster-lab:8280d5ff2f6dfae78180ad5a72400c1a&#34;&gt;Babysteps with our Cluster Lab&lt;/h3&gt;

&lt;p&gt;Congratulations, you got your Hypriot Cluster Lab up and running! That was easy, wasn&amp;rsquo;t it?&lt;/p&gt;

&lt;p&gt;The Cluster Lab is using &lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;Docker Swarm&lt;/a&gt; for managing Docker containers on the nodes that make up the cluster.
Docker Swarm will distribute containers based on different distribution &lt;a href=&#34;https://docs.docker.com/swarm/scheduler/strategy/&#34;&gt;strategies&lt;/a&gt; to individual nodes.
Per default Docker Swarm uses the &lt;em&gt;spread&lt;/em&gt; strategy to evenly distribute container on cluster nodes.&lt;/p&gt;

&lt;p&gt;Working with Docker Swarm is easy. To start we first need to log into our cluster master:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh root@cl-master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There we can use the Docker Client to connect to the Swarm Manager instance. We do that by providing the &amp;lsquo;-H&amp;rsquo; flag to the &lt;code&gt;docker&lt;/code&gt; command.
This enables the Docker client to use the Docker Remote API for accessing the Swarm Manager.&lt;/p&gt;

&lt;p&gt;To display some basic info about the Swarm Cluster run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker -H cl-master:2378 info
Containers: 7
Images: 6
Role: primary
Strategy: spread
Filters: health, port, dependency, affinity, constraint
Nodes: 3
 cl-master: 192.168.200.1:2375
  └ Containers: 3
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.8 MiB
  └ Labels: executiondriver=native-0.2, kernelversion=4.1.12-hypriotos-v7+, operatingsystem=Raspbian GNU/Linux 8 (jessie), storagedriver=overlay
 cl-node-1: 192.168.200.115:2375
  └ Containers: 2
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.8 MiB
  └ Labels: executiondriver=native-0.2, kernelversion=4.1.12-hypriotos-v7+, operatingsystem=Raspbian GNU/Linux 8 (jessie), storagedriver=overlay
 cl-node-2: 192.168.200.113:2375
  └ Containers: 2
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.8 MiB
  └ Labels: executiondriver=native-0.2, kernelversion=4.1.12-hypriotos-v7+, operatingsystem=Raspbian GNU/Linux 8 (jessie), storagedriver=overlay
CPUs: 12
Total Memory: 2.84
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of the hostname &lt;code&gt;cl-master&lt;/code&gt; one can also use the IP address that is always fixed for the cluster master node: 192.168.200.1.&lt;/p&gt;

&lt;p&gt;Ok - it seems our Swarm cluster is truly up and running.&lt;/p&gt;

&lt;p&gt;Time to get a little bit more daring.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s spin up a web interface for managing our nodes called &lt;a href=&#34;https://github.com/crosbymichael/dockerui&#34;&gt;DockerUI&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker -H cl-master:2378 run -d -p 9000:9000 --env=&amp;quot;constraint:node==cl-master&amp;quot; --name dockerui hypriot/rpi-dockerui -e http://192.168.200.1:2378
51f2eb09ab48540eb4a052bbe07644487c3a0b29ca44a6217ea6aebf17b3df0c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most interesting part here is the env parameter &lt;code&gt;--env=&amp;quot;constraint:node==cl-master&amp;quot;&lt;/code&gt; which tells the Swarm Manager that we want to start our new container on the &lt;strong&gt;cl-master&lt;/strong&gt; node.
Without that the new container would be started by Docker Swarm on one of the nodes according to the &lt;em&gt;spread&lt;/em&gt; strategy.
By using the &amp;lsquo;constraint:node&amp;rsquo; label we are able to control on which node a container gets started.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s open the DockerUI with the following URL: &lt;code&gt;http://cl-master:9000&lt;/code&gt;.
If everything did work you should now see an overview of your running containers similar to this one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/cluster-lab-release-v01/dockerui.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Back to the command line we can see the same result by using the &lt;code&gt;docker ps&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker -H cl-master:2378 ps
CONTAINER ID        IMAGE                                                              COMMAND                  CREATED             STATUS              PORTS                          NAMES
51f2eb09ab48        hypriot/rpi-dockerui                                               &amp;quot;./dockerui -e http:/&amp;quot;   12 minutes ago      Up 12 minutes       192.168.200.1:9000-&amp;gt;9000/tcp   cl-master/dockerui
fca75c6b759a        hypriot/rpi-consul                                                 &amp;quot;/consul agent -serve&amp;quot;   About an hour ago   Up About an hour                                   cl-node-2/bin_consul_1
4bfa58ed2a07        hypriot/rpi-swarm                                                  &amp;quot;/swarm join --advert&amp;quot;   About an hour ago   Up About an hour    2375/tcp                       cl-node-2/bin_swarm_1
ec61f8f5d766        hypriot/rpi-consul                                                 &amp;quot;/consul agent -serve&amp;quot;   About an hour ago   Up About an hour                                   cl-node-1/bin_consul_1
75c7cb003639        0104b3a10aad7e9a3d38ca4dce652c73d195b87171675c7dbc114ae85a444831   &amp;quot;/swarm join --advert&amp;quot;   About an hour ago   Up About an hour    2375/tcp                       cl-node-1/bin_swarm_1
df027cd23e69        hypriot/rpi-swarm                                                  &amp;quot;/swarm manage consul&amp;quot;   2 hours ago         Up 2 hours          192.168.200.1:2378-&amp;gt;2375/tcp   cl-master/bin_swarmmanage_1
f6b11e9e4f07        hypriot/rpi-consul                                                 &amp;quot;/consul agent -serve&amp;quot;   2 hours ago         Up 2 hours                                         cl-master/bin_consul_1
8658010a4433        hypriot/rpi-swarm                                                  &amp;quot;/swarm join --advert&amp;quot;   2 hours ago         Up 2 hours          2375/tcp                       cl-master/bin_swarm_1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By now you should have gotten the hang of it and come to expect that you can use many of the Docker command line commands with Swarm, too.
And you are right - you just need to remember to use the &lt;code&gt;-H&lt;/code&gt; flag as part of the Docker command.&lt;/p&gt;

&lt;h3 id=&#34;getting-to-the-grown-up-stuff:8280d5ff2f6dfae78180ad5a72400c1a&#34;&gt;Getting to the grown-up stuff&lt;/h3&gt;

&lt;p&gt;After we did our first babysteps successfully it is now time for some serious grown-up stuff.
Certainly Docker multi-host networking can be considered serious stuff - don&amp;rsquo;t you think?&lt;/p&gt;

&lt;p&gt;First let&amp;rsquo;s see if we already have any networks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker -H cl-master:2378 network ls
NETWORK ID          NAME                DRIVER
d88253054dd4        cl-node-1/none      null
e78f9fc77a31        cl-node-2/bridge    bridge
12d2cb0e387d        cl-node-2/none      null
020bdb74ea43        cl-node-1/host      host
b39702828ebf        cl-node-1/bridge    bridge
c24764cf7077        cl-master/host      host
480319fbca22        cl-node-2/host      host
e5d7f7a69313        cl-master/bridge    bridge
7153745ef548        cl-master/none      null
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are the networks that are already present by default.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s add our own overlay network:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker -H cl-master:2378 network create -d overlay my-net
54583b74b0c5b678678db18b99a1148049640e3c4e6ac6f5cdfa0938b1399f3a
HypriotOS: root@cl-master in ~
$ docker -H cl-master:2378 network ls
NETWORK ID          NAME                DRIVER
7153745ef548        cl-master/none      null
c24764cf7077        cl-master/host      host
54583b74b0c5        my-net              overlay
480319fbca22        cl-node-2/host      host
e5d7f7a69313        cl-master/bridge    bridge
b39702828ebf        cl-node-1/bridge    bridge
d88253054dd4        cl-node-1/none      null
e78f9fc77a31        cl-node-2/bridge    bridge
12d2cb0e387d        cl-node-2/none      null
020bdb74ea43        cl-node-1/host      host
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see we now have successfully created our first Docker multi-node overlay network.
This overlay network is really useful. Any container started in this network can talk to any other container in the network by default.&lt;/p&gt;

&lt;p&gt;In order to see how this works we are going to start two containers on different cluster nodes that will talk to each other.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker -H cl-master:2378 run -itd --name=webserver --net=my-net --env=&amp;quot;constraint:node==cl-node-1&amp;quot; hypriot/rpi-nano-httpd
378ddbe05781360f57f869f9aec7ad4c2cd703047cb5da11a9a7f395501bc533
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listing the running containers in our cluster we now have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker -H cl-master:2378 ps
CONTAINER ID        IMAGE                                                              COMMAND                  CREATED             STATUS              PORTS                          NAMES
378ddbe05781        hypriot/rpi-nano-httpd                                             &amp;quot;/httpd 80&amp;quot;              26 seconds ago      Up 23 seconds       80/tcp                         cl-node-1/webserver
51f2eb09ab48        hypriot/rpi-dockerui                                               &amp;quot;./dockerui -e http:/&amp;quot;   41 minutes ago      Up 40 minutes       192.168.200.1:9000-&amp;gt;9000/tcp   cl-master/dockerui
fca75c6b759a        hypriot/rpi-consul                                                 &amp;quot;/consul agent -serve&amp;quot;   About an hour ago   Up About an hour                                   cl-node-2/bin_consul_1
4bfa58ed2a07        hypriot/rpi-swarm                                                  &amp;quot;/swarm join --advert&amp;quot;   About an hour ago   Up About an hour    2375/tcp                       cl-node-2/bin_swarm_1
ec61f8f5d766        hypriot/rpi-consul                                                 &amp;quot;/consul agent -serve&amp;quot;   About an hour ago   Up About an hour                                   cl-node-1/bin_consul_1
75c7cb003639        0104b3a10aad7e9a3d38ca4dce652c73d195b87171675c7dbc114ae85a444831   &amp;quot;/swarm join --advert&amp;quot;   2 hours ago         Up 2 hours          2375/tcp                       cl-node-1/bin_swarm_1
df027cd23e69        hypriot/rpi-swarm                                                  &amp;quot;/swarm manage consul&amp;quot;   3 hours ago         Up 3 hours          192.168.200.1:2378-&amp;gt;2375/tcp   cl-master/bin_swarmmanage_1
f6b11e9e4f07        hypriot/rpi-consul                                                 &amp;quot;/consul agent -serve&amp;quot;   3 hours ago         Up 3 hours                                         cl-master/bin_consul_1
8658010a4433        hypriot/rpi-swarm                                                  &amp;quot;/swarm join --advert&amp;quot;   3 hours ago         Up 3 hours          2375/tcp                       cl-master/bin_swarm_1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Everything so far looks good. So let&amp;rsquo;s get the final piece working by starting a web client that talks to our webserver.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker -H cl-master:2378 run -it --rm --net=my-net --env=&amp;quot;contraint:node==cl-node-2&amp;quot; hypriot/armhf-busybox wget -O- http://webserver/index.html
Connecting to webserver (10.0.0.2:80)
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Pi armed with Docker by Hypriot&amp;lt;/title&amp;gt;
  &amp;lt;body style=&amp;quot;width: 100%; background-color: black;&amp;quot;&amp;gt;
    &amp;lt;div id=&amp;quot;main&amp;quot; style=&amp;quot;margin: 100px auto 0 auto; width: 800px;&amp;quot;&amp;gt;
      &amp;lt;img src=&amp;quot;pi_armed_with_docker.jpg&amp;quot; alt=&amp;quot;pi armed with docker&amp;quot; style=&amp;quot;width: 800px&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
-                    100% |*******************************|   304   0:00:00 ETA
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see we have been able to spin up a busybox container on another node.
We used it to fetch the index.html page with the &lt;code&gt;wget&lt;/code&gt; command from our webserver container.&lt;/p&gt;

&lt;p&gt;The simplicity of this illustrates how powerful Docker networking has become.
Creating this kind of a setup with - for example &lt;a href=&#34;http://openvswitch.org/&#34;&gt;OpenVSwitch&lt;/a&gt; - was way more complicated in the past.&lt;/p&gt;

&lt;p&gt;It is possible to create far more complex scenarios with our Cluster Lab, but hopefully we were able to demonstrate a bit of the potential it has.
We will write more about those in some future blog posts.&lt;/p&gt;

&lt;p&gt;Until then we hope that it was fun to follow along and that we could infect you a little bit with our passion for Docker clustering.&lt;/p&gt;

&lt;p&gt;You can find the source code of the Hypriot Cluster Lab at &lt;a href=&#34;https://github.com/hypriot/cluster-lab&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, use the comments below to give us feedback, discuss this post on &lt;a href=&#34;https://news.ycombinator.com/item?id=10696752&#34;&gt;HackerNews&lt;/a&gt; and share this post on Twitter, Google or Facebook.&lt;/p&gt;

&lt;p&gt;Andreas &amp;amp; Mathias&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Just in time for DockerCon EU: a shipload of new Docker ARM goodies</title>
      <link>http://blog.hypriot.com/post/just-in-time-for-DockerCon-EU-a-shipload-of-new-Docker-ARM-goodies/</link>
      <pubDate>Sun, 15 Nov 2015 21:40:00 +0100</pubDate>
      
      <guid>http://blog.hypriot.com/post/just-in-time-for-DockerCon-EU-a-shipload-of-new-Docker-ARM-goodies/</guid>
      <description>

&lt;p&gt;Hard on the heels of Docker announcing &lt;a href=&#34;https://blog.docker.com/2015/11/docker-1-9-production-ready-swarm-multi-host-networking/&#34;&gt;major changes with Docker 1.9&lt;/a&gt; we are making the newest Docker goodies available on HypriotOS.
We are really happy that we were able to finish our new release called &amp;ldquo;Hector&amp;rdquo; just in time for DockerCon EU.&lt;/p&gt;

&lt;p&gt;If you like a personal demo of what&amp;rsquo;s in store for &amp;ldquo;Hector&amp;rdquo; just ping @Quintus23M on Twitter and meet him in person at DockerCon EU.
Dieter and Andreas brought their treasure chest filled with Raspberry Pi&amp;rsquo;s to Barcelona and are eager to show off a bit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/hector-release/testing.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;And if you are not lucky enough to attend DockerCon you might as well read on.&lt;/p&gt;

&lt;p&gt;To name just a few of the highlights, there is now &lt;a href=&#34;http://blog.docker.com/2015/11/docker-multi-host-networking-ga/&#34;&gt;multi-host networking&lt;/a&gt;, extensively improved volume management and a production-ready &lt;a href=&#34;http://blog.docker.com/2015/11/swarm-1-0/&#34;&gt;Swarm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HypriotOS - the ultimate Docker playground for your Raspberry Pi 1 &amp;amp; 2&lt;/strong&gt; has you covered once again: all the cool &amp;amp; latest Docker tools in one convenient package.&lt;/p&gt;

&lt;p&gt;Compared with HypriotOS &amp;ldquo;Will&amp;rdquo; we updated&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;Linux Kernel&lt;/strong&gt; from 4.1.8 to &lt;strong&gt;4.1.12&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;Docker Engine&lt;/strong&gt; from 1.8.2 to &lt;strong&gt;1.9.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Compose&lt;/strong&gt; from 1.4.2 to &lt;strong&gt;1.5.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Swarm&lt;/strong&gt; from 0.4.0 to &lt;strong&gt;1.0.0&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides that we enabled some missing cgroup kernel settings for better Docker support.
We also added a default &lt;code&gt;/boot/config.txt&lt;/code&gt;, which for instance allows for a better out-of-the-box HDMI display experience (&lt;code&gt;hdmi_force_hotplug=1&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;There is no easier way to get started with Docker on ARM.
Just give it a try: Download our &lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20151115-132854.img.zip&#34;&gt;latest image&lt;/a&gt; and get started in less than 5 minutes.&lt;/p&gt;

&lt;h3 id=&#34;detailed-features-of-hypriotos-hector:02d83c62817c8a33766342f7f05756e9&#34;&gt;Detailed Features of HypriotOS &amp;ldquo;Hector&amp;rdquo;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;a modern operating system based on &lt;strong&gt;Raspbian Jessie&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;a recent Raspberry Pi firmware and Device Tree to &lt;strong&gt;support a huge range of hardware add-ons&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;a kernel optimized for Docker-awesomeness: &lt;strong&gt;Kernel 4.1.12 with support for OverlayFS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Raspberry Pi 1 &amp;amp; 2&lt;/strong&gt; with the same SD card image&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Engine 1.9.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Compose 1.5.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Machine 0.4.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Swarm 1.0.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;network hotplugging&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;out-of-the-box support for &lt;strong&gt;WiFi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Avahi&lt;/strong&gt; (aka mDNS aka Apple Bonjour)&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Open vSwitch&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;our own package repository to easily update individual components&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;download-get-it-while-it-is-still-hot:02d83c62817c8a33766342f7f05756e9&#34;&gt;Download: Get it while it is still hot&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20151115-132854.img.zip&#34;&gt;hypriot-rpi-20151115-132854.img.zip&lt;/a&gt; (~ 438 MB)
&lt;a href=&#34;hypriot-rpi-20151115-132854.img.zip.sha256&#34;&gt;SHA256 checksum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started-Guide&lt;/a&gt; on how to get this SD card image running on your Raspberry Pi.&lt;/p&gt;

&lt;p&gt;As always, use the comments below to give us feedback and share this post on Twitter, Google+ or Facebook.&lt;/p&gt;

&lt;p&gt;Your Hypriot-Team -
Stefan, Dieter, Mathias, Andreas, Govinda&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A touch of magic: Controlling Kitematic &amp; Docker with a touch display on the Raspberry Pi</title>
      <link>http://blog.hypriot.com/post/a-touch-of-magic-controlling-kitematic-with-a-touch-display-on-the-raspberry-pi/</link>
      <pubDate>Mon, 12 Oct 2015 00:15:00 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/a-touch-of-magic-controlling-kitematic-with-a-touch-display-on-the-raspberry-pi/</guid>
      <description>&lt;p&gt;We have recently released our &lt;a href=&#34;http://blog.hypriot.com/post/get-your-all-in-one-docker-playground-now-hypriotos-reloaded/&#34;&gt;new SD card image&lt;/a&gt; called &lt;strong&gt;Will&lt;/strong&gt;.
It is the ultimate Docker playground with Docker Engine, Docker Compose, Docker Swarm and Docker Machine preinstalled.
This image now also supports the new 7&amp;rdquo; Raspberry Pi Touch Display out-of-the-box. So we thought, wouldn&amp;rsquo;t it be cool to have Kitematic running directly on your Raspberry Pi? And yes, we did it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/teaser.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;While polishing and testing &lt;strong&gt;Will&lt;/strong&gt; the idea came up that it would be awesome to be able to use Kitematic on the new great &lt;a href=&#34;https://www.raspberrypi.org/blog/the-eagerly-awaited-raspberry-pi-display/&#34;&gt;7&amp;rdquo; touch display of the Raspberry Pi foundation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We started using the &lt;a href=&#34;https://github.com/zedtux/kitematic/tree/linux-support&#34;&gt;Linux support branch&lt;/a&gt; of Kitematic (&lt;a href=&#34;https://github.com/kitematic/kitematic/pull/696&#34;&gt;PR #696&lt;/a&gt;) and tried to compile it.
After some fiddling we got the first build working. Still in the team we were not satisfied with installing Kitematic directly on the host - we wanted a better way.
This was the time for the next crazy idea. We thought, let us write a &lt;code&gt;Dockerfile&lt;/code&gt; to build Kitematic and run it within a Docker container.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;gallery clearfix&#34; itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Kitematic running on the Raspberry Pi&lt;/div&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/docker-toolbox.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_docker-toolbox.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Unboxing the Docker Toolbox&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Unboxing the Docker Toolbox
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/display-back.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_display-back.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;The RPi 2 is attached to 7 inch Raspberry Pi Display&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    The RPi 2 is attached to 7 inch Raspberry Pi Display
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/connect-to-docker-hub.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_connect-to-docker-hub.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Connect to the Docker Hub&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Connect to the Docker Hub
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/kitematic.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_kitematic.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;List of Docker Images&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    List of Docker Images
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/create.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_create.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Download and create a Docker Container&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Download and create a Docker Container
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/web-preview.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_web-preview.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;A running a container with web preview&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    A running a container with web preview
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbs-up.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_thumbs-up.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Thumbs up! All is running well&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Thumbs up! All is running well
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/photoswipe.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/default-skin/default-skin.css&#34;&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe-ui-default.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/initphotoswipe.js&#34;&gt;&lt;/script&gt;



&lt;div class=&#34;pswp&#34; tabindex=&#34;-1&#34; role=&#34;dialog&#34; aria-hidden=&#34;true&#34;&gt;

&lt;div class=&#34;pswp__bg&#34;&gt;&lt;/div&gt;

&lt;div class=&#34;pswp__scroll-wrap&#34;&gt;
    
    &lt;div class=&#34;pswp__container&#34;&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    
    &lt;div class=&#34;pswp__ui pswp__ui--hidden&#34;&gt;
    &lt;div class=&#34;pswp__top-bar&#34;&gt;
      
      &lt;div class=&#34;pswp__counter&#34;&gt;&lt;/div&gt;
      &lt;button class=&#34;pswp__button pswp__button--close&#34; title=&#34;Close (Esc)&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--share&#34; title=&#34;Share&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--fs&#34; title=&#34;Toggle fullscreen&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--zoom&#34; title=&#34;Zoom in/out&#34;&gt;&lt;/button&gt;
      
      
      &lt;div class=&#34;pswp__preloader&#34;&gt;
        &lt;div class=&#34;pswp__preloader__icn&#34;&gt;
          &lt;div class=&#34;pswp__preloader__cut&#34;&gt;
            &lt;div class=&#34;pswp__preloader__donut&#34;&gt;&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;pswp__share-modal pswp__share-modal--hidden pswp__single-tap&#34;&gt;
      &lt;div class=&#34;pswp__share-tooltip&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--left&#34; title=&#34;Previous (arrow left)&#34;&gt;
    &lt;/button&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--right&#34; title=&#34;Next (arrow right)&#34;&gt;
    &lt;/button&gt;
    &lt;div class=&#34;pswp__caption&#34;&gt;
      &lt;div class=&#34;pswp__caption__center&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;style&gt;
    .gallery {  }
    .gallery img { width: 100%; height: auto; }
    .gallery figure { display: block; float: left; margin: 0 5px 5px 0; width: 200px; }
    .gallery figcaption { display: none; }
    .gallery div.title { font-weight: bold; }
    span[itemprop=&#34;copyrightHolder&#34;] { color : #888; float: right; }
    span[itemprop=&#34;copyrightHolder&#34;]:before { content: &#34;Foto: &#34;; }
    img[itemprop=&#34;thumbnail&#34;]{ width: 200px; }
&lt;/style&gt;


&lt;script&gt;initPhotoSwipeFromDOM(&#39;.gallery&#39;);&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;You can find the &lt;code&gt;Dockerfile&lt;/code&gt; in a new GitHub repo at &lt;a href=&#34;https://github.com/hypriot/rpi-kitematic&#34;&gt;hypriot/rpi-kitematic&lt;/a&gt;. If you like you can follow along and try it out with your own display.&lt;/p&gt;

&lt;p&gt;We made a small video to demonstrate how Kitematic looks and feels controlling your containers with a touch display:&lt;/p&gt;

&lt;div class=&#34;video-container&#34;&gt;&lt;iframe src=&#34;https://www.youtube.com/embed/HVyQeCqE_4A&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;As you can see this is still a work-in-progress. But we believe we can make it available soon in an easy and convenient way to be used by everyone.&lt;/p&gt;

&lt;p&gt;If you are one of the lucky owners of the new Raspberry 7&amp;rdquo; touch screen display, you may wanna try out the following steps to run it on your own Pi as well.&lt;/p&gt;

&lt;p&gt;First log in to your Raspberry Pi and install X11. We have created a small helper script that installs everything you need.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -sSL https://github.com/hypriot/x11-on-HypriotOS/raw/master/install-x11-basics.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you have to enable the X11 server to listen on a TCP socket (port 6000). Just insert the line &lt;code&gt;xserver-allow-tcp=true&lt;/code&gt; in the file &lt;code&gt;/etc/lightdm/lightdm.conf&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;xserver-allow-tcp=true&amp;quot; &amp;gt;&amp;gt; /etc/lightdm/lightdm.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next you have to enable X11 server to accept external TCP access from inside of a Docker container.
This is a network connection coming from another TCP/IP address because the container is running in it&amp;rsquo;s own network name space.&lt;/p&gt;

&lt;p&gt;If you want to automate this step, you can add a start script so the TCP connections are allowed after the next reboot.
If you want to do it manually, just skip this step.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;xhost +&amp;quot; &amp;gt; /etc/X11/Xsession.d/36x11-xhost-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To fix the orientation of the 7&amp;rdquo; touch display we have to add &lt;code&gt;lcd_rotate=2&lt;/code&gt; into the &lt;code&gt;/boot/config.txt&lt;/code&gt;. If you just use an HDMI monitor you should skip this step.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;lcd_rotate=2&amp;quot; &amp;gt;&amp;gt; /boot/config.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now reboot your Pi to start the X11 server on your 7&amp;rdquo; touch display or HDMI monitor.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you haven&amp;rsquo;t enabled the TCP connection yet, run the following command to enable it now.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DISPLAY=:0.0 xhost +
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it works you see a message like &lt;code&gt;access control disabled, clients can connect from any host&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you have to build the Kitematic container.
We haven&amp;rsquo;t uploaded it to the Docker Hub yet as it is still a work-in-progress.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/hypriot/rpi-kitematic
cd rpi-kitematic
docker build -t hypriot/rpi-kitematic .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it&amp;rsquo;s time to run the Kitematic container with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --privileged -v /var/run/docker.sock:/var/run/docker.sock -e DISPLAY=172.17.42.1:0.0 hypriot/rpi-kitematic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The container runs Kitematic in development mode. Because of this the first start-up may take some minutes until the user interface finally shows up.
But once it is started, it feels pretty smooth to use.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this demonstration. We currently think of how to best deploy Kitematic for the Pi - whether we should run it in a container or natively on the host.
But running a GUI application in a Docker container was something we wanted to try out anyhow. :)&lt;/p&gt;

&lt;p&gt;What do you think would be the best approach? How should we provide Kitematic on a Raspberry Pi without putting to much bloat into our SD card image by default?&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.
You also might wanna discuss this article on &lt;a href=&#34;https://news.ycombinator.com/item?id=10374271&#34;&gt;HackerNews&lt;/a&gt; or vote it up if you find it interesting.&lt;/p&gt;

&lt;p&gt;Stefan&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get your all-in-one Docker playground now: HypriotOS reloaded!</title>
      <link>http://blog.hypriot.com/post/get-your-all-in-one-docker-playground-now-hypriotos-reloaded/</link>
      <pubDate>Wed, 07 Oct 2015 17:30:00 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/get-your-all-in-one-docker-playground-now-hypriotos-reloaded/</guid>
      <description>

&lt;p&gt;We are happy to announce that after months of hard work we are now releasing a new major version of HypriotOS called &lt;a href=&#34;https://en.wikipedia.org/wiki/Will_Turner&#34;&gt;&amp;ldquo;Will&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Highlights are the upgrade from Raspberry Wheezy to Jessie, the upgrade of the included Raspberry Pi firmware, support for Device Tree and the addition of the most recent versions of Docker Compose, Docker Swarm and Docker Machine to the image.&lt;/p&gt;

&lt;p&gt;It is - more than ever - &lt;strong&gt;the ultimate Docker playground for the Raspberry Pi 1 &amp;amp; 2&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/jessie-release/one-to-rule-them-all_blog.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;We have been coming a long way since we started in February 2015. Then Docker was not easily available for ARM-based devices.
By following long - often outdated - tutorials, only technically well-versed people had a chance to eventually get Docker running on ARM.
It also didn&amp;rsquo;t help that Docker wasn&amp;rsquo;t offically supported on ARM and 32-bit systems.&lt;/p&gt;

&lt;p&gt;As avid Docker users and owners of various ARM devices our mission from the beginning was to make Docker a first-class citizen in the ARM world.
The most popular ARM device that is easily available at reasonable costs is the &lt;a href=&#34;https://www.raspberrypi.org/help/what-is-a-raspberry-pi/&#34;&gt;Raspberry Pi&lt;/a&gt;. More than 5 millions devices have been sold until now.
Thus it was an obvious choice for us to start our mission on the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;The standard way to provide software for the Raspberry Pi is by using a SD card that includes the operating system with all necessary user software.
So our first step was to provide a SD card image that included an operating system that was optimized for the use of Docker.
And that was exactly what we did when we published the &lt;a href=&#34;http://blog.hypriot.com/post/kick-ass-raspberry-pi-2-having-a-forbidden-love-affair-with-docker-1-dot-4-1/&#34;&gt;first version&lt;/a&gt; of our Get-Docker-Up-And-Running-On-Your-Pi-In-No-Time SD card image.
It allowed even novice users to get a working Docker environment running in minutes.&lt;/p&gt;

&lt;p&gt;Besides the ease of use there was another important &amp;ldquo;feature&amp;rdquo; for us when we started publishing our SD card image.
We wanted to provide our users with new Docker versions as soon as they were available.
And that&amp;rsquo;s exactly what we did: Sometimes within minutes after a new Docker version was released you would find it on our website ready to be downloaded.&lt;/p&gt;

&lt;p&gt;Following this approach we did not only update the Docker Engine on a regular basis, but also the included Linux kernel and various other components that made the work with our image easier or more interesting.
The positive feedback we got, spurred us on to tackle a new challenge at the end of July: upgrading the foundation of our SD card image from Raspbian Wheezy to Jessie.
Since August we had three preview releases and we now have not only upgraded HypriotOS from Raspbian Wheezy to &lt;a href=&#34;http://arstechnica.com/information-technology/2015/05/debian-8-linuxs-most-reliable-distro-makes-its-biggest-change-since-1993/&#34;&gt;Jessie&lt;/a&gt;, but we also have upgraded the Linux kernel from 3.18.11 to 4.1.8.
And that&amp;rsquo;s not all: the most exciting addition is that we now support most of the Docker tools besides the Docker Engine.
This includes the most recent versions of &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt;, &lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;Docker Swarm&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/machine/&#34;&gt;Docker Machine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We believe this makes our SD card image one of the easiest and straightforward ways to get started with Docker and its ecosystem!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We also improved the way how upgrades can be done. In the past, upgrading basically meant to reflash your SD card with the newest version of HypriotOS.
To allow upgrading of individual components, without reflashing the SD card, we now have set up our own package repository.
&lt;code&gt;apt&lt;/code&gt; in our new image is configured to use it by default - thus an upgrade is just an &lt;code&gt;apt-get update &amp;amp;&amp;amp; apt-get install docker-compose&lt;/code&gt; away.&lt;/p&gt;

&lt;p&gt;We also massively improved the out-of-the-box support for different hardware extensions that are available for the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;To achieve that we upgraded to the lastest Raspberry Pi firmware and added support for &lt;a href=&#34;http://www.devicetree.org/&#34;&gt;Device Tree&lt;/a&gt;.
With the help of Device Tree many hardware devices like displays and Pi Hats should just work&amp;trade; now.
One great example is &lt;a href=&#34;https://www.raspberrypi.org/blog/the-eagerly-awaited-raspberry-pi-display/&#34;&gt;The official 7&amp;rdquo; touch display of the Raspberry Pi foundation&lt;/a&gt;.
Just attach it to your Pi and you can use it right away.
Besides adding Device Tree we also added support for more WiFi-Dongles from Ralink, Realtec and Atheros.
We hope that all these measures contribute to a much smoother out-of-the-box hardware experience for our users.&lt;/p&gt;

&lt;p&gt;All in all we think that this release is a major step forward and we hope, you enjoy it as much as we do!
Rest assured that we still have some more major improvements in our release pipeline which we will announce soon.&lt;/p&gt;

&lt;h3 id=&#34;detailed-features-of-hypriotos-will:0ebc29021394a433fb8d656202bccf5e&#34;&gt;Detailed Features of HypriotOS &amp;ldquo;Will&amp;rdquo;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;a modern operating system based on &lt;strong&gt;Raspbian Jessie&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;a recent Raspberry Pi firmware and Device Tree to &lt;strong&gt;support a huge range of hardware add-ons&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;a kernel optimized for Docker-awesomeness: &lt;strong&gt;Kernel 4.1.8 with support for OverlayFS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Pi 1 &amp;amp; 2&lt;/strong&gt; with the same SD card image&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Engine 1.8.2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Compose 1.4.2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Machine 0.4.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Swarm 0.4.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;network hotplugging&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;out-of-the-box support for &lt;strong&gt;WiFi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Avahi&lt;/strong&gt; (aka mDNS aka Apple Bonjour)&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Open vSwitch&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;our own package repository to easily update individual components&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;download-get-it-while-it-is-still-hot:0ebc29021394a433fb8d656202bccf5e&#34;&gt;Download: Get it while it is still hot&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20151004-132414.img.zip&#34;&gt;hypriot-rpi-20151004-132414.img.zip&lt;/a&gt; (~ 438 MB)
&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20151004-132414.img.zip.sha256&#34;&gt;SHA256 checksum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started-Guide&lt;/a&gt; on how to get this SD card image running on our Pi.&lt;/p&gt;

&lt;p&gt;As always, use the comments below to give us feedback and share this post on Twitter or Facebook.
You also might wanna discuss this release on &lt;a href=&#34;https://news.ycombinator.com/item?id=10351792&#34;&gt;HackerNews&lt;/a&gt; or vote it up if you find it interesting.&lt;/p&gt;

&lt;p&gt;Your Hypriot-Team -
Stefan, Dieter, Mathias, Andreas, Govinda&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RC2: Jessie with upgraded Firmware, Linux Kernel and Docker-Engine</title>
      <link>http://blog.hypriot.com/post/rc2-jessie-with-brand-new-kernel-and-docker-and-display-support/</link>
      <pubDate>Mon, 28 Sep 2015 21:00:00 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/rc2-jessie-with-brand-new-kernel-and-docker-and-display-support/</guid>
      <description>

&lt;p&gt;Here comes &lt;strong&gt;Release Candiate 2&lt;/strong&gt; of our brand new &lt;em&gt;Get-Docker-Running-in-under-5-Minutes Hypriot SD card image&lt;/em&gt;.
It is the ultimate Docker playground for the Raspberry Pi 1 &amp;amp; 2.&lt;/p&gt;

&lt;p&gt;This image builds on the &lt;a href=&#34;http://blog.hypriot.com/post/rc1-jessie-with-brand-new-kernel-and-docker/&#34;&gt;RC1 we released roughly two weeks ago&lt;/a&gt; and fixes a couple of issues that were reported by our community.&lt;/p&gt;

&lt;p&gt;We also upgraded the included firmware as well as the Linux-Kernel- and the Docker-Version.&lt;/p&gt;

&lt;p&gt;We finally managed to add out-of-the-box support for &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker-Compose&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;Docker-Swarm&lt;/a&gt; in our image.
Docker-Compose helps you manage a group of containers that make up your application. And if working on one server/device is not enough for you you might wanna look into Docker-Swarm as it allows you to manage a cluster of Docker-Engines on multiple servers/devices.&lt;/p&gt;

&lt;p&gt;Another noteably thing that we now support is the &lt;a href=&#34;https://www.raspberrypi.org/blog/the-eagerly-awaited-raspberry-pi-display/&#34;&gt;official 7&amp;rdquo; display of the Raspberry PI foundation&lt;/a&gt;.
Just attach it to your PI and you should be able to use Docker together with the awesomeness of a beautiful GUI at once.
That&amp;rsquo;s exactly what one of our users did last week by using &lt;a href=&#34;https://medium.com/@icebob/jessie-on-raspberry-pi-2-with-docker-and-chromium-c43b8d80e7e1&#34;&gt;a beautiful Node.js-App on HypriotOS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Albeit he still had to add support for the 7&amp;rdquo; display manually on his own.&lt;br /&gt;
As of today this is not necessary anymore as we upgraded the included Raspberry PI Firmware to a more recent version that supports a number of new displays.&lt;/p&gt;

&lt;p&gt;And last but not least we updated Docker from version &lt;strong&gt;1.8.1&lt;/strong&gt; to &lt;strong&gt;1.8.2&lt;/strong&gt; and the included Linux Kernel from &lt;strong&gt;4.1.6&lt;/strong&gt; to &lt;strong&gt;4.1.8&lt;/strong&gt;..&lt;/p&gt;

&lt;p&gt;So here comes an overview of all the things that are part of our new Hypriot SD card image&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;battle-tested-docker-jessie-with-some-sugar:ccfb3997a8de6874549db7c1add28f11&#34;&gt;Battle-Tested Docker-Jessie with some sugar&lt;/h3&gt;

&lt;p&gt;On top of &lt;a href=&#34;http://arstechnica.com/information-technology/2015/05/debian-8-linuxs-most-reliable-distro-makes-its-biggest-change-since-1993/&#34;&gt;Jessie&lt;/a&gt; we added all the battle-tested ingredients of our previous &lt;em&gt;Get-Docker-Running-in-under-5-Minutes Hypriot SD card image&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a kernel optimised for Docker-awesomeness: &lt;strong&gt;Kernel 4.1.8 with support for OverlayFS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;the most recent &lt;strong&gt;Docker 1.8.2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Pi 1 &amp;amp; 2&lt;/strong&gt; with the same image&lt;/li&gt;
&lt;li&gt;Docker-Compose &lt;strong&gt;1.4.2&lt;/strong&gt; included&lt;/li&gt;
&lt;li&gt;Docker-Swarm &lt;strong&gt;0.4.0&lt;/strong&gt; included&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;network hotplugging&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for a couple of Raspberry PI displays&lt;/li&gt;
&lt;li&gt;out of the box support for &lt;strong&gt;Wifi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Avahi&lt;/strong&gt; (aka Apple Bonjour)&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Open vSwitch&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During the next two weeks we want to improve the SD card image and gather more feedback to make it a great out-of-the-box experience for our users.&lt;/p&gt;

&lt;h3 id=&#34;get-it-while-it-is-still-hot:ccfb3997a8de6874549db7c1add28f11&#34;&gt;Get it while it is still hot&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150928-174643.img.zip&#34;&gt;hypriot-rpi-20150928-174643.img.zip&lt;/a&gt; (~ 438 MB)
&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150928-174643.img.zip.sha256&#34;&gt;SHA256 checksum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started-Guide&lt;/a&gt; on how to get this SD card image running on our Pi.&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share this post on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Govinda, Stefan &amp;amp; Dieter&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RC1: Jessie with brand new Linux Kernel and Docker</title>
      <link>http://blog.hypriot.com/post/rc1-jessie-with-brand-new-kernel-and-docker/</link>
      <pubDate>Thu, 10 Sep 2015 21:30:00 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/rc1-jessie-with-brand-new-kernel-and-docker/</guid>
      <description>

&lt;p&gt;Here comes &lt;strong&gt;Release Candiate 1&lt;/strong&gt; of our brand new &lt;em&gt;Get-Docker-Running-in-under-5-Minutes Hypriot SD card image&lt;/em&gt;.
It is the ultimate Docker playground for the Raspberry Pi 1 &amp;amp; 2.&lt;/p&gt;

&lt;p&gt;This image builds on the &lt;a href=&#34;http://blog.hypriot.com/post/moving-docker-from-wheezy-to-jessie/&#34;&gt;Beta Version we published six weeks ago&lt;/a&gt; and fixes a couple of issues that were reported by our community.
The positiv feedback we got spurred us on to make this release even better.&lt;/p&gt;

&lt;p&gt;And by the way - keep this kind of positiv feedback coming - it really makes a difference and pushes us to be the best we can&amp;hellip; :)&lt;/p&gt;

&lt;p&gt;So we updated Docker from &lt;strong&gt;1.7.1&lt;/strong&gt; to &lt;strong&gt;1.8.1&lt;/strong&gt;.
We also had the impression that our current version of the Linux Kernel - &lt;strong&gt;3.18.11&lt;/strong&gt; - did need some kind of a refresher - so we added the &lt;strong&gt;4.1.6&lt;/strong&gt; version it.&lt;/p&gt;

&lt;p&gt;So here again the list of features that make this release really awesome.&lt;/p&gt;

&lt;h3 id=&#34;battle-tested-docker-jessie-with-some-sugar:0cbf622673eabe9849be13a37f374c36&#34;&gt;Battle-Tested Docker-Jessie with some sugar&lt;/h3&gt;

&lt;p&gt;On top of &lt;a href=&#34;http://arstechnica.com/information-technology/2015/05/debian-8-linuxs-most-reliable-distro-makes-its-biggest-change-since-1993/&#34;&gt;Jessie&lt;/a&gt; we added all the battle-tested ingredients of our previous &lt;em&gt;Get-Docker-Running-in-under-5-Minutes Hypriot SD card image&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a kernel optimised for Docker-awesomeness: &lt;strong&gt;Kernel 4.1.6 with support for OverlayFS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;the most recent &lt;strong&gt;Docker 1.8.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Pi 1 &amp;amp; 2&lt;/strong&gt; with the same image&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;network hotplugging&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;out of the box support for &lt;strong&gt;Wifi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Avahi&lt;/strong&gt; (aka Apple Bonjour)&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Open vSwitch&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During the next two weeks we want to improve the SD card image and gather more feedback to make it a great out-of-the-box experience for our users.&lt;/p&gt;

&lt;h3 id=&#34;get-it-while-it-is-still-hot:0cbf622673eabe9849be13a37f374c36&#34;&gt;Get it while it is still hot&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150909-070022.img.zip&#34;&gt;hypriot-rpi-20150909-070022.img.zip&lt;/a&gt; (~ 398 MB)
&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150909-070022.img.zip.sha256&#34;&gt;SHA256 checksum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started-Guide&lt;/a&gt; on how to get this SD card image running on our Pi.&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share this post on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Govinda &amp;amp; Stefan&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Moving Docker from Wheezy to Jessie</title>
      <link>http://blog.hypriot.com/post/moving-docker-from-wheezy-to-jessie/</link>
      <pubDate>Mon, 27 Jul 2015 20:37:38 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/moving-docker-from-wheezy-to-jessie/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;What’s even better then Wheezy? Yes, your right - that’s Jessie.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And that’s not only because we very much like what crazy stuff &lt;em&gt;&lt;a href=&#34;https://blog.jessfraz.com/&#34;&gt;Jessie&lt;/a&gt;&lt;/em&gt; is doing with Docker.
No, it’s because &lt;em&gt;Jessie&lt;/em&gt; is &lt;a href=&#34;http://arstechnica.com/information-technology/2015/05/debian-8-linuxs-most-reliable-distro-makes-its-biggest-change-since-1993/&#34;&gt;the next version of the Debian operating system&lt;/a&gt; that forms the foundation of our SD card image.&lt;/p&gt;

&lt;p&gt;Jessie updates all the included software to much more recent versions. And most notably it switches the old sys-v-init startup system to systemd.&lt;/p&gt;

&lt;h3 id=&#34;battle-tested-docker-jessie-with-some-sugar:4fe06647c823b8256063c23fed15f529&#34;&gt;Battle-Tested Docker-Jessie with some sugar&lt;/h3&gt;

&lt;p&gt;On top of that we added all the battle-tested ingredients of our previous Get-Docker-Running-in-under-5-Minutes SD card image:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a kernel optimised for Docker-awesomeness: &lt;strong&gt;Kernel 3.18.11 with support for OverlayFS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;the most recent &lt;strong&gt;Docker 1.7.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Pi 1 &amp;amp; 2&lt;/strong&gt; with the same image&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;network hotplugging&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;out of the box support for &lt;strong&gt;Wifi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Avahi&lt;/strong&gt; (aka Apple Bonjour)&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Open vSwitch&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We consider this new version of our SD card image still as &lt;strong&gt;beta quality&lt;/strong&gt;.
During the next two weeks we want to improve it step by step and gather feedback to make it a great out-of-the-box experience for our users.&lt;/p&gt;

&lt;h3 id=&#34;get-it-while-it-is-still-hot:4fe06647c823b8256063c23fed15f529&#34;&gt;Get it while it is still hot&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150727-151455.img.zip&#34;&gt;hypriot-rpi-20150727-151455.img.zip&lt;/a&gt; (~ 424 MB)&lt;br /&gt;
&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150727-151455.img.zip.sha256&#34;&gt;SHA256 checksum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started-Guide&lt;/a&gt; on how to get this SD card image running on our Pi.&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Govinda&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let Docker Swarm all over your Raspberry Pi Cluster</title>
      <link>http://blog.hypriot.com/post/let-docker-swarm-all-over-your-raspberry-pi-cluster/</link>
      <pubDate>Fri, 03 Jul 2015 00:30:45 +0100</pubDate>
      
      <guid>http://blog.hypriot.com/post/let-docker-swarm-all-over-your-raspberry-pi-cluster/</guid>
      <description>

&lt;p&gt;In this blog post we show you how easy it is to install Swarm on your Raspberry Pi and how to set up a Raspberry Pi Swarm cluster with the help of Docker Machine.&lt;/p&gt;

&lt;p&gt;We have built a little &amp;ldquo;Pi Tower&amp;rdquo; with three Raspberry Pi 2 model B and combined them into a Docker Swarm cluster.&lt;/p&gt;

&lt;p&gt;As you can see in the pictures below we have mounted the three Raspberry Pi&amp;rsquo;s on top of a 5-port D-Link GBit switch. All four devices get their power from an Anker 4-port USB charger.
This makes a very solid but portable &amp;ldquo;Pi Tower&amp;rdquo; with only one power plug and one external network connector.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;gallery clearfix&#34; itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Pi Tower&lt;/div&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/docker-swarm/d-link_mounting_holes.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/docker-swarm/thumbnails/thumb_d-link_mounting_holes.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;The Making of Pi Tower&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    The Making of Pi Tower
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/docker-swarm/d-link_rpi2_cluster.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/docker-swarm/thumbnails/thumb_d-link_rpi2_cluster.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Pi Tower with D-Link Switch&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Pi Tower with D-Link Switch
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/docker-swarm/d-link_rpi2_cluster02.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/docker-swarm/thumbnails/thumb_d-link_rpi2_cluster02.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Pi Tower with D-Link Switch&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Pi Tower with D-Link Switch
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/docker-swarm/d-link_rpi2_cluster_lights.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/docker-swarm/thumbnails/thumb_d-link_rpi2_cluster_lights.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Pi Tower at night&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Pi Tower at night
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/photoswipe.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/default-skin/default-skin.css&#34;&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe-ui-default.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/initphotoswipe.js&#34;&gt;&lt;/script&gt;



&lt;div class=&#34;pswp&#34; tabindex=&#34;-1&#34; role=&#34;dialog&#34; aria-hidden=&#34;true&#34;&gt;

&lt;div class=&#34;pswp__bg&#34;&gt;&lt;/div&gt;

&lt;div class=&#34;pswp__scroll-wrap&#34;&gt;
    
    &lt;div class=&#34;pswp__container&#34;&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    
    &lt;div class=&#34;pswp__ui pswp__ui--hidden&#34;&gt;
    &lt;div class=&#34;pswp__top-bar&#34;&gt;
      
      &lt;div class=&#34;pswp__counter&#34;&gt;&lt;/div&gt;
      &lt;button class=&#34;pswp__button pswp__button--close&#34; title=&#34;Close (Esc)&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--share&#34; title=&#34;Share&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--fs&#34; title=&#34;Toggle fullscreen&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--zoom&#34; title=&#34;Zoom in/out&#34;&gt;&lt;/button&gt;
      
      
      &lt;div class=&#34;pswp__preloader&#34;&gt;
        &lt;div class=&#34;pswp__preloader__icn&#34;&gt;
          &lt;div class=&#34;pswp__preloader__cut&#34;&gt;
            &lt;div class=&#34;pswp__preloader__donut&#34;&gt;&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;pswp__share-modal pswp__share-modal--hidden pswp__single-tap&#34;&gt;
      &lt;div class=&#34;pswp__share-tooltip&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--left&#34; title=&#34;Previous (arrow left)&#34;&gt;
    &lt;/button&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--right&#34; title=&#34;Next (arrow right)&#34;&gt;
    &lt;/button&gt;
    &lt;div class=&#34;pswp__caption&#34;&gt;
      &lt;div class=&#34;pswp__caption__center&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;style&gt;
    .gallery {  }
    .gallery img { width: 100%; height: auto; }
    .gallery figure { display: block; float: left; margin: 0 5px 5px 0; width: 200px; }
    .gallery figcaption { display: none; }
    .gallery div.title { font-weight: bold; }
    span[itemprop=&#34;copyrightHolder&#34;] { color : #888; float: right; }
    span[itemprop=&#34;copyrightHolder&#34;]:before { content: &#34;Foto: &#34;; }
    img[itemprop=&#34;thumbnail&#34;]{ width: 200px; }
&lt;/style&gt;


&lt;script&gt;initPhotoSwipeFromDOM(&#39;.gallery&#39;);&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;For your convenience we have prepared a &lt;a href=&#34;http://www.amazon.de/gp/registry/wishlist/BCGEW9W3V8GM/ref=cm_wl_rlist_go_o&#34;&gt;small shopping list&lt;/a&gt; of all the components we used at Amazon.&lt;/p&gt;

&lt;h2 id=&#34;pre-requisites:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Pre-requisites&lt;/h2&gt;

&lt;p&gt;For this tutorial we will run all steps from a Mac. To do this we need three tools.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A flash tool to write the SD card images for all the Raspberry Pi&amp;rsquo;s.&lt;/li&gt;
&lt;li&gt;The Docker client, which is only a &lt;code&gt;brew install docker&lt;/code&gt; away.&lt;/li&gt;
&lt;li&gt;The Docker Machine binary with the hypriot driver&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;flash-all-sd-cards:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Flash all SD cards&lt;/h2&gt;

&lt;p&gt;First we want to install the SD cards with Docker preinstalled.
On a Mac or Linux machine we can use our little &lt;a href=&#34;https://github.com/hypriot/flash&#34;&gt;flash command line tool&lt;/a&gt; to prepare the three SD cards with these simple commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ flash --hostname pi1 http://downloads.hypriot.com/hypriot-rpi-20150416-201537.img.zip
$ flash --hostname pi2 http://downloads.hypriot.com/hypriot-rpi-20150416-201537.img.zip
$ flash --hostname pi3 http://downloads.hypriot.com/hypriot-rpi-20150416-201537.img.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now insert the SD cards into all Raspberry Pi&amp;rsquo;s and boot them. They will come up with different host names after a while.&lt;/p&gt;

&lt;h2 id=&#34;retrieve-ip-addresses:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Retrieve IP addresses&lt;/h2&gt;

&lt;p&gt;Our SD card image also starts the avahi-daemon to announce the hostname through mDNS, so each Pi is reachable with &lt;code&gt;pi1.local&lt;/code&gt;, &lt;code&gt;pi2.local&lt;/code&gt; and &lt;code&gt;pi3.local&lt;/code&gt;.
Docker Machine cannot resolve these hostnames at the moment, so we have to retrieve the IP addresses for the Raspberry Pi&amp;rsquo;s manually.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ping -c 1 pi1.local
$ ping -c 1 pi2.local
$ ping -c 1 pi3.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this example we assume that the three IP adresses are &lt;code&gt;192.168.1.101&lt;/code&gt;, &lt;code&gt;102&lt;/code&gt; and &lt;code&gt;103&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;insert-ssh-public-key:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Insert SSH public key&lt;/h2&gt;

&lt;p&gt;Docker Machine connects to each Raspberry Pi through SSH. You have to insert your public SSH key to avoid entering the password of the &lt;code&gt;root&lt;/code&gt; user.
To insert the SSH public key into a remote machine there is a tool called &lt;code&gt;ssh-copy-id&lt;/code&gt;. You might have to install it first.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ssh-copy-id root@192.168.1.101
$ ssh-copy-id root@192.168.1.102
$ ssh-copy-id root@192.168.1.103
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For each of the above commands you have to enter the password &lt;code&gt;hypriot&lt;/code&gt; for the user &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-docker-machines:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Create Docker Machines&lt;/h2&gt;

&lt;p&gt;For the next step we use our Docker Machine driver to connect to the Raspberry Pi Hypriot devices.
Our hypriot driver is not yet integrated into the official Docker Machine binary.
So we have to download the &lt;code&gt;docker-machine&lt;/code&gt; binary with our hypriot machine driver.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -o docker-machine http://downloads.hypriot.com/docker-machine_0.4.0-dev_darwin-amd64
$ chmod +x ./docker-machine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download the binary into the current directory and make it executable. You may move it
into another directory in your PATH to use it from other directories.&lt;/p&gt;

&lt;h3 id=&#34;create-swarm-token:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Create Swarm Token&lt;/h3&gt;

&lt;p&gt;A Docker Swarm cluster uses a unique Cluster ID which allows the individual swarm agents to find each other.
We need such a Cluster ID to build our Docker Swarm.&lt;/p&gt;

&lt;p&gt;This can be done in your shell with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export TOKEN=$(for i in $(seq 1 32); do echo -n $(echo &amp;quot;obase=16; $(($RANDOM % 16))&amp;quot; | bc); done; echo)
$ echo $TOKEN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this example we use&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export TOKEN=babb1eb00bdecadedec0debabb1eb00b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you already have a Docker swarm container up and running, you also can create a new Cluster ID
with &lt;code&gt;docker run --rm hypriot/rpi-swarm create&lt;/code&gt;.
We simply used the shell commands above to skip this chicken or egg problem.&lt;/p&gt;

&lt;h3 id=&#34;create-the-swarm-master:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Create the Swarm Master&lt;/h3&gt;

&lt;p&gt;Now we create the Docker Swarm Master on the first Raspberry Pi with our generated Cluster ID&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./docker-machine create -d hypriot --swarm --swarm-master --swarm-discovery token://$TOKEN --hypriot-ip-address 192.168.1.101 pi1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command connects to the Raspberry Pi &amp;ldquo;pi1&amp;rdquo;, secures the Docker daemon with TLS and pulls the Docker image &lt;code&gt;hypriot/rpi-swarm:latest&lt;/code&gt; from the Docker Hub.
It starts both the Swarm Master as well as a Swarm Agent in a container.&lt;/p&gt;

&lt;p&gt;To check if everything works we can connect to the newly started Swarm Master by using the following command.
It retrieves all environment variables needed for the Docker client to communicate with the Swarm.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ eval $(./docker-machine env --swarm pi1)
$ docker info
Containers: 2
Strategy: spread
Filters: affinity, health, constraint, port, dependency
Nodes: 1
 pi1: 192.168.1.202:2376
  └ Containers: 2
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.3 MiB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have successfully set up a lonely Swarm Manager. Let&amp;rsquo;s start some more Raspberry Pi&amp;rsquo;s to prevent the Swarm Manager from feeling lonely.&lt;/p&gt;

&lt;h3 id=&#34;create-the-swarm-agents:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Create the Swarm agents&lt;/h3&gt;

&lt;p&gt;For the rest of the Raspberry Pi&amp;rsquo;s we also create Docker Machine connections with the same Cluster ID.
This time we run docker-machine without the &lt;code&gt;--swarm-master&lt;/code&gt; option to just spin up a Swarm Agent container in each Pi.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./docker-machine create -d hypriot --swarm --swarm-discovery token://$TOKEN --hypriot-ip-address 192.168.1.102 pi2
$ ./docker-machine create -d hypriot --swarm --swarm-discovery token://$TOKEN --hypriot-ip-address 192.168.1.103 pi3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s check what the swarm looks like now&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker info
Containers: 4
Strategy: spread
Filters: affinity, health, constraint, port, dependency
Nodes: 3
 pi1: 192.168.1.101:2376
  └ Containers: 2
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.3 MiB
 pi2: 192.168.1.102:2376
  └ Containers: 1
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.3 MiB
 pi3: 192.168.1.103:2376
  └ Containers: 1
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.3 MiB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also can list all containers in the whole swarm as usual with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker ps
CONTAINER ID        IMAGE                      COMMAND                CREATED             STATUS              PORTS                                    NAMES
5effaa7de4a3        hypriot/rpi-swarm:latest   &amp;quot;/swarm join --addr    2 minutes ago       Up About a minute   2375/tcp                                 pi3/swarm-agent
6b73003b7246        hypriot/rpi-swarm:latest   &amp;quot;/swarm join --addr    4 minutes ago       Up 3 minutes        2375/tcp                                 pi2/swarm-agent
5e00fbf7b9f6        hypriot/rpi-swarm:latest   &amp;quot;/swarm join --addr    7 minutes ago       Up 7 minutes        2375/tcp                                 pi1/swarm-agent
02c905ec25a0        hypriot/rpi-swarm:latest   &amp;quot;/swarm manage --tls   7 minutes ago       Up 7 minutes        2375/tcp, 192.168.1.101:3376-&amp;gt;3376/tcp   pi1/swarm-agent-master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After setting up the Docker Swarm you now can use the normal Docker commands through port 3376.
Have a look at the &lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;official Docker Swarm documentation&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;Just remember to set up the environment correctly to communicate with the Swarm Master before using the Docker client by&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ eval $(docker-machine env --swarm pi1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then you can remotely manage your Raspberry Pi Swarm from your Mac. See - this was not really difficult, was it?&lt;/p&gt;

&lt;p&gt;We hope you enjoyed this little tour of Docker Swarm!&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Stefan&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Static Website Generation on Steriods with Docker</title>
      <link>http://blog.hypriot.com/post/static-website-generation-on-steriods-with-docker/</link>
      <pubDate>Tue, 30 Jun 2015 09:03:12 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/static-website-generation-on-steriods-with-docker/</guid>
      <description>

&lt;p&gt;Within the blogging community static site generators have been an exceptional hot topic in the last couple of years (at least before Docker appeared).
There are even &lt;a href=&#34;https://www.staticgen.com/&#34;&gt;whole projects&lt;/a&gt; dedicated to giving an overview of the most popular static site generators.&lt;/p&gt;

&lt;p&gt;One of the first static site generators that got really popular was &lt;a href=&#34;https://github.com/jekyll/jekyll/commits/master&#34;&gt;Jekyll&lt;/a&gt;, which was conceived by &lt;a href=&#34;http://tom.preston-werner.com/&#34;&gt;Tom Preston-Werner&lt;/a&gt; of Github fame.
Typically static site generators transform input (e.g. text in a lightweight markup language such as Markdown or reStructuredText) to static HTML with the help of templates and filters.&lt;/p&gt;

&lt;p&gt;There are several advantages to this approach - to name just a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;as the input is text it can easily be managed in a version control system like Git&lt;/li&gt;
&lt;li&gt;as the output is just static HTML it can easily deployed with a cheap webhoster or even for free with a service like &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;static HTML is much faster than dynamic HTML&lt;/li&gt;
&lt;li&gt;there is neither a server-side web-framework nor a database necessary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While Jekyll is still the most popular static site generator there are some new contenders, which are gaining traction very fast.&lt;/p&gt;

&lt;p&gt;Out of these static site generators &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; is our favorite. Hugo is written in &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt; and is focused on speed and performance.
We are using Hugo to generate this very blog&amp;hellip; :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/hugo/hugo-logo.png&#34; alt=&#34;hugo-logo&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;What we like most is that Hugo is basically just one binary. That makes it really easy to use Hugo in a Docker container.
And - surprise - that is exactly what we did. You can find the prepared image on the &lt;a href=&#34;https://registry.hub.docker.com/u/hypriot/rpi-hugo/&#34;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-hugo:208d73d31f997ec1e4befc58fff83e1c&#34;&gt;Setting up Hugo&lt;/h2&gt;

&lt;p&gt;To get started with Hugo you need a Raspberry Pi with a running Docker engine.
The best way to get there is with our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting Started Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After logging into your Rasberry Pi via SSH do a&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker pull hypriot/rpi-hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, create a directory for your awesome new blogging project at a location of your choice.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir awesome-blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change into the new directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd awesome-blog
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-a-new-site:208d73d31f997ec1e4befc58fff83e1c&#34;&gt;Create a new site&lt;/h2&gt;

&lt;p&gt;First create a new site by&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -v `pwd`:/www hypriot/rpi-hugo new site .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Afterwards you will find a basic directory layout which was created by Hugo.
Next we need to download some nifty themes for our new site.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone --recursive --depth 1 https://github.com/spf13/hugoThemes themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you execute &lt;code&gt;ls&lt;/code&gt; you should see a folder structure similar to the one in the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/hugo/hugo-files-after-new-site.png&#34; alt=&#34;hugo-files-after-new-site&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;create-a-new-article:208d73d31f997ec1e4befc58fff83e1c&#34;&gt;Create a new article&lt;/h2&gt;

&lt;p&gt;To create a new article run the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -v `pwd`:/www hypriot/rpi-hugo new post/viral-hit.md
echo &#39;# Hello World from Hypriot!&#39; &amp;gt;&amp;gt; content/post/viral-hit.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create and start a new container based on the &amp;lsquo;hypriot/rpi-hugo&amp;rsquo; image.
It will also mount the current directory into the container at &lt;code&gt;/www&lt;/code&gt; and run &lt;code&gt;hugo new post/viral-hit.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hugo new&lt;/code&gt; creates a new markdown document in the subfolder &lt;code&gt;post&lt;/code&gt;. With the &lt;code&gt;echo&lt;/code&gt; command we add a Hello-World message to our blog post.
You can further edit this document with the editor of your choice.&lt;/p&gt;

&lt;h2 id=&#34;live-preview:208d73d31f997ec1e4befc58fff83e1c&#34;&gt;Live preview&lt;/h2&gt;

&lt;p&gt;To see a live preview of your new awesome blog run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 1313:1313 -v `pwd`:/www hypriot/rpi-hugo server --bind=0.0.0.0 -w -D --theme=hyde
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now open your browser and go to &lt;code&gt;http://&amp;lt;ip of your pi&amp;gt;:1313&lt;/code&gt; to preview your new blog.
Whenever you change any of your documents, Hugo will regenerate the HTML and reload the resulting webpage in your browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/hugo/preview.png&#34; alt=&#34;preview&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;build-the-final-html-pages:208d73d31f997ec1e4befc58fff83e1c&#34;&gt;Build the final HTML pages&lt;/h2&gt;

&lt;p&gt;To get the final HTML pages for publication you just need to run Hugo without any options.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -v `pwd`:/www hypriot/rpi-hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Afterwards you can find the generated static HTML pages in a folder called &lt;code&gt;public&lt;/code&gt; in your project folder.
Now you can just open &lt;code&gt;public/index.html&lt;/code&gt; with a browser or upload the contents of the &lt;code&gt;public&lt;/code&gt; folder to a webhoster of your preference.&lt;/p&gt;

&lt;p&gt;You can learn more about Hugo and how to use it on it&amp;rsquo;s &lt;a href=&#34;http://gohugo.io/overview/introduction/&#34;&gt;documentation website&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;how-we-use-hugo:208d73d31f997ec1e4befc58fff83e1c&#34;&gt;How we use Hugo&lt;/h2&gt;

&lt;p&gt;Right at the beginning when we started blogging about Docker on ARM we were faced with several challenges.
We failed to address these challenges with our first blogging platform - Posthaven - and soon switched to Hugo.
We wrote about this false start with Posthaven in &lt;a href=&#34;http://blog.hypriot.com/post/moved-from-posthaven-to-hugo/&#34;&gt;We moved our blog from Posthaven to Hugo after only three posts. Why?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But we did not tell you everything in that blog post. We held some bits back&amp;hellip; :)&lt;br /&gt;
Hugo in Docker really starts to make a lot of sense when it is used together with some other tools in a &lt;strong&gt;team publishing workflow&lt;/strong&gt;.
Our publishing workflow is based on Git, Github, Drone, Hugo and GitHub Pages.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://drone.io/&#34;&gt;Drone&lt;/a&gt; is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;Continuous Integration&lt;/a&gt; server written in Go (surprise!) that runs exceptionally well in a Docker container.
Drone can be used to &amp;ldquo;listen&amp;rdquo; for changes in a Git-Repository - in this case the sources of our Hugo blog project. Drone can then be configured to generate the static HTML of your blog in another Hugo container and publish it to Github Pages.
But describing this setup in detail is for another day.&lt;/p&gt;

&lt;p&gt;Two days ago we introduced Gogs, today Hugo - next will be a blog post about Drone.
After that we will have all the ingredients together to describe how to integrate everything for an &lt;strong&gt;ultimate Docker and Raspberry Pi based blogging platform&lt;/strong&gt;.
What else would you wanna use for instant Blogger-(ähm Docker-) Bliss?&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Govinda &amp;amp; Andreas&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Run your own GitHub-like service with the help of Docker</title>
      <link>http://blog.hypriot.com/post/run-your-own-github-like-service-with-docker/</link>
      <pubDate>Sat, 27 Jun 2015 22:19:55 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/run-your-own-github-like-service-with-docker/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; and &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; have taken the world by storm.
No serious developer today can afford not to &lt;a href=&#34;https://www.atlassian.com/git/tutorials/&#34;&gt;know how to work with Git&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But what if you do not want to have your code in the cloud? What if you want to host your code repositories yourself?&lt;/p&gt;

&lt;p&gt;For most of us this meant to go with &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;Gitlab&lt;/a&gt;. The biggest downside in the past was that Gitlab had so many different parts that the installation could be very tedious.
With the &lt;a href=&#34;https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md&#34;&gt;Omnibus Gitlab Installer&lt;/a&gt; the installation did get a lot easier but this does not change the fact that Gitlab is compromised of so many different parts.&lt;/p&gt;

&lt;p&gt;Why does this matter?&lt;/p&gt;

&lt;p&gt;It really starts to matter when you want to put your apps/services into something like Docker.
Putting all parts of Gitlab (Postgres, Ruby, Ruby on Rails, Redis, Git, etc.) into one container is certainly not the Docker way of doing things, but puttings these parts into different containers makes it really complicated and involved to set up, too.&lt;/p&gt;

&lt;p&gt;Fortunately we did find another solution for your Git needs - one that really works well with Docker.
It is called &lt;a href=&#34;http://gogs.io/&#34;&gt;Gogs&lt;/a&gt; and is written in Go and has no additional dependencies with the exception of a SSH server.
Gogs is such a lightweight solution that it only needs about 5 MB of RAM and very few CPU resources while running.
This makes it a perfect candidate for a home-grown GitHub alternative that can easily run on a - you guessed it - Raspberry Pi.&lt;/p&gt;

&lt;p&gt;In this post, we show you how to set up &lt;em&gt;Gogs&lt;/em&gt; in just a couple of minutes. Thanks to Docker it will be fast and easy.&lt;/p&gt;

&lt;p&gt;To follow along you gonna need a Raspberry Pi with Docker.
In case you do not have Docker running on your Raspberry Pi our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started guide&lt;/a&gt; will cover everything you need to know to get up and running in a snap.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gogs.qiniudn.com/gogs_demo.gif&#34; alt=&#34;Gogs Screenshots&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;If you wanna dive more deeply into &lt;em&gt;Gogs&lt;/em&gt; there is a &lt;a href=&#34;http://gogs.io/docs/intro/&#34;&gt;official &lt;em&gt;Gogs&lt;/em&gt; documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;how-to-set-up-gogs:dc7018a7890c20895bf31528a8ab5dea&#34;&gt;How to set up Gogs&lt;/h2&gt;

&lt;p&gt;First, log into your Raspberry Pi via SSH.
Please refer to our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started guide&lt;/a&gt; if you are not sure about how to do this.&lt;/p&gt;

&lt;p&gt;After logging in successfully pull and run &lt;em&gt;Gogs&lt;/em&gt; by executing the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d --name my-go-git-server --publish 8022:22 --publish 3000:3000 --volume `pwd`/gogs-data/:/data hypriot/rpi-gogs-raspbian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s see what each of these options means&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;ndash;name&lt;/strong&gt; gives the Docker container a name&lt;br /&gt;
  &lt;strong&gt;&amp;ndash;publish&lt;/strong&gt; (first) instructs Docker to open port &lt;code&gt;8022&lt;/code&gt;. We will use this port to access Gogs via git/ssh.&lt;br /&gt;
  &lt;strong&gt;&amp;ndash;publish&lt;/strong&gt; (second) defines &lt;code&gt;3000&lt;/code&gt; as the port at which you will be able to access the web interface of &lt;em&gt;Gogs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When the &lt;em&gt;Gogs&lt;/em&gt; container is running you can point your browser to the IP address of your Pi. Make sure you use the port you defined in the &lt;code&gt;docker run&lt;/code&gt; command.
In our example we have to type the following address into the browser:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://172.16.254.149:3000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a result you should see the setup page of &lt;em&gt;Gogs&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/frist-run-gogs.png&#34; alt=&#34;hypriot-ssh-prompt-after-login&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;In this setup page we need to adapt the default settings to the settings we defined in the &lt;code&gt;docker run&lt;/code&gt; command we executed previously. Thus, please change the input fields according to this table:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Input field&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Domain&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Replace &lt;code&gt;localhost&lt;/code&gt; with the IP address of your Raspberry Pi&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Application URL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;In the predefined string, replace only &lt;code&gt;localhost&lt;/code&gt; with the IP address of your Raspberry Pi, such that you have e.g. &lt;code&gt;http://172.16.254.149:3000/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Username&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set an your username&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Password&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set an your password with at least 8 characters&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E-mail&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set your email adress&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;After you filled all required fields, it should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/frist-run-gogs_user-input-combined.png&#34; alt=&#34;frist-run-gogs_user-input-combined.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;To finish the setup, click on &lt;strong&gt;install&lt;/strong&gt; at the bottom of the page. Afterwards you will be forwarded to the login page of &lt;em&gt;Gogs&lt;/em&gt;.
Please login with the credentials you just specified.&lt;/p&gt;

&lt;p&gt;After logging in you should see the start page of the &lt;em&gt;Gogs&lt;/em&gt; service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nice, you successfully installed Gogs!&lt;/strong&gt; Now let&amp;rsquo;s start using it! Please continue with the next section to learn &lt;em&gt;how&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;how-to-create-a-git-repository-in-gogs:dc7018a7890c20895bf31528a8ab5dea&#34;&gt;How to create a Git repository in &lt;em&gt;Gogs&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Before we will be able to &lt;code&gt;git push&lt;/code&gt;, we need to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a Git repository in &lt;em&gt;Gogs&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;configure your public SSH key in &lt;em&gt;Gogs&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;clone the Git repository in &lt;em&gt;Gogs&lt;/em&gt; to your local workstation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s start by creating a new repository. Click on the &lt;strong&gt;green button&lt;/strong&gt; in the top right corner of the page and choose &lt;strong&gt;New Repository&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/start-with-green-button_with-marker.png&#34; alt=&#34;start-with-green-button&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;You should see a setup page for your new repository. Please fill out the two text input fields.&lt;/p&gt;

&lt;p&gt;At the bottom of the page you will find a checkbox. We recommend to enable this checkbox since it automatically will initialize this repository with a &lt;em&gt;README.md&lt;/em&gt;.
The following screenshot shows an example of how the setup page might look like after you provided all the necessary information.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/new-repo.png&#34; alt=&#34;new-repo&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Finish the setup by clicking on &lt;strong&gt;Create Repository&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Before you can actually use the new repository, you need to add your SSH key. Click on The &lt;strong&gt;settings button&lt;/strong&gt; in the top right corner of the page. Then, go to &lt;strong&gt;SSH Keys&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Add Key&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/add-private-key2_with-markers.png&#34; alt=&#34;add-private-key2&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Paste your public SSH key into this field and set an arbitrary &lt;em&gt;Key Name&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t know where to find your SSH key, execute the following command in your terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat ~/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see in the following screenshot, you should see your SSH key as result.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/ssh-key-export.png&#34; alt=&#34;ssh-key-export.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Finally, back in the &lt;em&gt;Gogs&lt;/em&gt; website, click the green button &lt;strong&gt;Add Key&lt;/strong&gt; to add your public SSH key. Afterwards you should see a message confirming that the key has been added successfully.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At this point, &lt;em&gt;Gogs&lt;/em&gt; should be set up properly to receive your first commit!&lt;/strong&gt; As a last step, we will &lt;code&gt;git clone&lt;/code&gt; the new repo to your workstation.&lt;/p&gt;

&lt;h2 id=&#34;start-using-git-with-the-new-repository:dc7018a7890c20895bf31528a8ab5dea&#34;&gt;Start using Git with the new repository&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gogs&lt;/em&gt; helps us in constructing the proper &lt;code&gt;git clone&lt;/code&gt; command.
Navigate inside your new repository in the Gogs Web-GUI and click on the &lt;strong&gt;black cloud symbol&lt;/strong&gt;.
Make sure that the &lt;strong&gt;SSH&lt;/strong&gt; button in front of the command is activated and copy the string in the text field via the &lt;strong&gt;black copy button&lt;/strong&gt; on the right edge.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/in-repo-get-ssh-link-for-git-remote_with-markers.png&#34; alt=&#34;in-repo-get-ssh-link-for-git-remote&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Now open a terminal at your workstation and navigate to the location where you want to create the folder for the repository.&lt;/p&gt;

&lt;p&gt;Paste the command you just copied from Gogs Web-GUI. Before executing add &lt;code&gt;git clone ssh://&lt;/code&gt; in front of the command and put port &lt;code&gt;8022&lt;/code&gt; in front of your user name.
In our case &lt;code&gt;8022&lt;/code&gt; is the port Gogs listens on for SSH.&lt;/p&gt;

&lt;p&gt;In the end the command should look similar to this one:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone ssh://git@172.16.254.149:8022/my-name/demo-hypriot.git

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this command has been executed confirm the fingerprint prompt and navigate into the new directory that has been created by this command.&lt;/p&gt;

&lt;p&gt;Within the repository folder execute a &lt;code&gt;git pull&lt;/code&gt;. If the command returns &lt;code&gt;Already up-to-date&lt;/code&gt; the repository is properly set up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations!! You now have your own Git service running on your Raspberry Pi!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Gogs will only be available within your local network.
To make your Git service available outside of your home you need to do use a Dynamic DNS service like &lt;a href=&#34;http://www.noip.com/&#34;&gt;no-ip&lt;/a&gt; and configure some port forwarding in your router.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We hope setting up your own Gogs has been a painless experience for you.&lt;br /&gt;
As always use the comments below to give us feedback and share the blog post on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Mathias, Andreas &amp;amp; Govinda&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hypriot-Demo and challenge at DockerCon 2015</title>
      <link>http://blog.hypriot.com/post/dockercon2015/</link>
      <pubDate>Wed, 24 Jun 2015 01:30:34 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/dockercon2015/</guid>
      <description>

&lt;p&gt;Hypriot had a short demo session (16:45 - 17:15 PDT) on the second day of the DockerCon 2015 in San Francisco,CA (USA).
The goal of the demo was to show that Docker is a really lightweight &amp;ldquo;virtualization&amp;rdquo; solution that can be easily run on small IoT devices.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;gallery clearfix&#34; itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Dieter Reuter from the Hypriot team at DockerCon 2015&lt;/div&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/dieter_at_dockercon/dieter_hypriot_dockercon_2015_1.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1426x804&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/dieter_at_dockercon/thumbnails/thumb_dieter_hypriot_dockercon_2015_1.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;It&amp;#39;s fun because the demo actually works fine :-)&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    It&amp;#39;s fun because the demo actually works fine :-)
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Docker Inc.&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/dieter_at_dockercon/dieter_hypriot_dockercon_2015_2.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1430x802&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/dieter_at_dockercon/thumbnails/thumb_dieter_hypriot_dockercon_2015_2.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;7 minutes have passed and 250 container have been started...&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    7 minutes have passed and 250 container have been started...
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Docker Inc.&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/dieter_at_dockercon/dieter_hypriot_dockercon_2015_3.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1428x806&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/dieter_at_dockercon/thumbnails/thumb_dieter_hypriot_dockercon_2015_3.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Get on our blog and start with the #hypriot_docker_challenge!&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Get on our blog and start with the #hypriot_docker_challenge!
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Docker Inc.&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/photoswipe.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/default-skin/default-skin.css&#34;&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe-ui-default.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/initphotoswipe.js&#34;&gt;&lt;/script&gt;



&lt;div class=&#34;pswp&#34; tabindex=&#34;-1&#34; role=&#34;dialog&#34; aria-hidden=&#34;true&#34;&gt;

&lt;div class=&#34;pswp__bg&#34;&gt;&lt;/div&gt;

&lt;div class=&#34;pswp__scroll-wrap&#34;&gt;
    
    &lt;div class=&#34;pswp__container&#34;&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    
    &lt;div class=&#34;pswp__ui pswp__ui--hidden&#34;&gt;
    &lt;div class=&#34;pswp__top-bar&#34;&gt;
      
      &lt;div class=&#34;pswp__counter&#34;&gt;&lt;/div&gt;
      &lt;button class=&#34;pswp__button pswp__button--close&#34; title=&#34;Close (Esc)&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--share&#34; title=&#34;Share&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--fs&#34; title=&#34;Toggle fullscreen&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--zoom&#34; title=&#34;Zoom in/out&#34;&gt;&lt;/button&gt;
      
      
      &lt;div class=&#34;pswp__preloader&#34;&gt;
        &lt;div class=&#34;pswp__preloader__icn&#34;&gt;
          &lt;div class=&#34;pswp__preloader__cut&#34;&gt;
            &lt;div class=&#34;pswp__preloader__donut&#34;&gt;&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;pswp__share-modal pswp__share-modal--hidden pswp__single-tap&#34;&gt;
      &lt;div class=&#34;pswp__share-tooltip&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--left&#34; title=&#34;Previous (arrow left)&#34;&gt;
    &lt;/button&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--right&#34; title=&#34;Next (arrow right)&#34;&gt;
    &lt;/button&gt;
    &lt;div class=&#34;pswp__caption&#34;&gt;
      &lt;div class=&#34;pswp__caption__center&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;style&gt;
    .gallery {  }
    .gallery img { width: 100%; height: auto; }
    .gallery figure { display: block; float: left; margin: 0 5px 5px 0; width: 200px; }
    .gallery figcaption { display: none; }
    .gallery div.title { font-weight: bold; }
    span[itemprop=&#34;copyrightHolder&#34;] { color : #888; float: right; }
    span[itemprop=&#34;copyrightHolder&#34;]:before { content: &#34;Foto: &#34;; }
    img[itemprop=&#34;thumbnail&#34;]{ width: 200px; }
&lt;/style&gt;


&lt;script&gt;initPhotoSwipeFromDOM(&#39;.gallery&#39;);&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;https://player.vimeo.com/video/131966874&#34; width=&#34;600&#34; height=&#34;450&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt; &lt;p&gt;&lt;a href=&#34;https://vimeo.com/131966874&#34;&gt;DockerCon2015 - Scale down to the minimum&lt;/a&gt; from &lt;a href=&#34;https://vimeo.com/user38425431&#34;&gt;hypriot&lt;/a&gt; on &lt;a href=&#34;https://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;As preparation for this demo we only had to make some small &lt;a href=&#34;https://github.com/docker/docker/compare/master...hypriot:optional_userland_proxy&#34;&gt;tweaks&lt;/a&gt; to Docker and its environment.
These changes allowed us to start up hundreds of containers on a Raspberry Pi in just a couple of minutes. How awesome is that?
If that is possible on a small device imagine how Docker runs on a big server&amp;hellip; :)&lt;/p&gt;

&lt;h3 id=&#34;the-hypriot-dockercon-challenge:08dbaaf64a7259b7390848cf1e42575f&#34;&gt;The Hypriot-DockerCon-Challenge&lt;/h3&gt;

&lt;p&gt;Even with this jaw-dropping result we think there is room for improvement.
That is why &lt;strong&gt;we challenge you&lt;/strong&gt; to help us to improve the performance even more and remove remaining roadblocks!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prize:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The person who successfully manage to get the highest number of these &lt;a href=&#34;https://registry.hub.docker.com/u/hypriot/rpi-busybox-httpd/&#34;&gt;Docker containers&lt;/a&gt; to run concurrently on a Raspberry Pi 2 will be awarded a &lt;a href=&#34;http://europe.dockercon.com&#34;&gt;DockerCon Europe&lt;/a&gt; ticket and a speaking / demo slot during the conference.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rules:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use a single Raspberry Pi 2 with a HypriotOS release (a Raspi 1 would work too, but you’ll have a big disadvantage with 512MByte only)&lt;/li&gt;
&lt;li&gt;Use Docker Engine to start the containers (see technical hint #3 below)&lt;/li&gt;
&lt;li&gt;Use the webserver container “hypriot/rpi-busybox-httpd” as a starting point – you can use whatever webserver you like, but you have to serve the static website with the same index.html + .jpg&lt;/li&gt;
&lt;li&gt;Challenge ends on Monday, October 19th, 2015 at 17:00 PDT – winner will be announced on Tuesday, October 20th&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Technical Hints:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reduce the stack size used for starting Docker subprocesses (see /etc/init.d/docker)&lt;/li&gt;
&lt;li&gt;Optimize the httpd container in order to use less memory&lt;/li&gt;
&lt;li&gt;Optimize the Docker daemon itself (Participants must submit any changes made to docker engine with appropriate tests back to the docker project or must be independently reproducible with the stock docker engine release.) Optimizations must be general optimizations, useful outside of the scope of this specific benchmark.&lt;/li&gt;
&lt;li&gt;Ask Hypriot for help, they’ll offer new hints and tips publicly through comments on the blog and &lt;a href=&#34;https://twitter.com/HypriotTweets&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To get you started for this challenge we prepared a couple of links for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.hypriot.com/getting-started&#34;&gt;Getting started with our Docker Hypriot SD-card image on Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hypriot/rpi-busybox-httpd&#34;&gt;Raspberry Pi Docker Image for HTTPd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hypriot/rpi-busybox-httpd/blob/master/start-webservers.sh&#34;&gt;Start-Script for running lots of containers on the Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope we did wet your appetite. Happy hacking and have fun!&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
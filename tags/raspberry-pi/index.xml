<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raspberry Pi on Docker Pirates ARMed with explosive stuff</title>
    <link>http://blog.hypriot.com/tags/raspberry-pi/</link>
    <description>Recent content in Raspberry Pi on Docker Pirates ARMed with explosive stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Jan 2016 16:00:00 +0100</lastBuildDate>
    <atom:link href="http://blog.hypriot.com/tags/raspberry-pi/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Pine A64 is about to become the cheapest ARM 64-bit platform to run Docker</title>
      <link>http://blog.hypriot.com/post/the-pine-a64-is-about-to-become=the-cheapest-ARM-64-bit-platform-to-run-Docker/</link>
      <pubDate>Tue, 26 Jan 2016 16:00:00 +0100</pubDate>
      
      <guid>http://blog.hypriot.com/post/the-pine-a64-is-about-to-become=the-cheapest-ARM-64-bit-platform-to-run-Docker/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/pine-a64/close_up_front_pine_06.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Last Saturday one of the more promising &lt;a href=&#34;https://www.kickstarter.com/projects/pine64/pine-a64-first-15-64-bit-single-board-super-comput&#34;&gt;Kickstarter campaigns&lt;/a&gt;
that picked our curiosity ended after 44 days and was able to raise &lt;strong&gt;1.7 million dollars&lt;/strong&gt;.
It was a campaign to fund the cheapest 64-bit ARM board that can currently be bought for money.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Pine A64 sells for 15 bucks&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So why is that noteworthy when there are boards like the Pi Zero around that sell for $5?&lt;/p&gt;

&lt;p&gt;It very much is, when you put that price into perspective. The cheapest 64-bit ARM board we knew before the Pine was
the &lt;a href=&#34;http://127.0.0.1:1313/post/getting-docker-running-on-a-highend-arm-gaming-console-for-fun-and-profit/&#34;&gt;NVIDIA ShieldTV&lt;/a&gt;, which sells for about $200.
Next comes the much more expensive &lt;a href=&#34;http://www.slashgear.com/amd-starts-shipping-seattle-arm-server-chips-14423259/&#34;&gt;AMD Opteron A1100 series&lt;/a&gt; where an individual chip alone starts with a price tag of $150.&lt;/p&gt;

&lt;p&gt;All in all that means that the Pine A64 is the most affordable way to lay your hands on real 64-bit ARM hardware - and that by a long shot!
So what can you actually do with such a device?&lt;/p&gt;

&lt;p&gt;Lots of things of course, but &lt;strong&gt;for us at Hypriot, the first thing we think about anything is: Can we run Docker on it?&lt;/strong&gt;
And the short answer is: probably yes. But more about that later.&lt;/p&gt;

&lt;h2 id=&#34;the-hardware:7983295b98b0feead04ba41a7de6ce9d&#34;&gt;The Hardware&lt;/h2&gt;

&lt;p&gt;Before we deep dive into the nitty gritty details, let&amp;rsquo;s first take a step back and see what the Pine A64 has to offer hardware-wise.&lt;/p&gt;

&lt;p&gt;The Pine A64 does have&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a &lt;strong&gt;quad-core Cortex A53 CPU&lt;/strong&gt; with 1,2 Ghz&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;64-bit&lt;/strong&gt; processor architecture&lt;/li&gt;
&lt;li&gt;up to &lt;strong&gt;2 GB of DDR3 memory&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;a version with &lt;strong&gt;Gigabit Ethernet&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;the ability to play 4K video&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What excites us the most here, is the 64-bit architecture combined with 2 GB of memory and Gigabit Ethernet.&lt;/p&gt;

&lt;p&gt;Those specs set the Pine A64 distinctly apart from the Raspberry Pi 2, which much to our regret only provides 100 Megabit Ethernet.
Just be aware that you&amp;rsquo;ll get these specs only with the high-end version of the Pine. It is called the A64+ and costs a bit more with $19 (1 GB version) or $29 (2 GB version).
&lt;strong&gt;Even at $19 for the 1 GB version that&amp;rsquo;s nearly half of the price of a Raspberry Pi 2.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If it turns out that the build quality and support of the board is on par with that of the Raspberry Pi that could indeed considered an impressive accomplishment.&lt;/p&gt;

&lt;p&gt;We were lucky enough to secure an early developer version of the device, which arrived a couple of days ago.
Seeing is believing and as such we prepared a couple of photos that we made from our own Pine A64+ board with 1 GB.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;gallery clearfix&#34; itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;





&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/pine-a64-gallery/close_up_front_pine_06.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1000x664&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/pine-a64-gallery/thumbnails/thumb_close_up_front_pine_06.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Close up Pine 64 FRONT&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Close up Pine 64 FRONT
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Dieter Reuter&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/pine-a64-gallery/close_up_back_pine_05.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1000x664&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/pine-a64-gallery/thumbnails/thumb_close_up_back_pine_05.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Close up Pine 64 BACK&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Close up Pine 64 BACK
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Dieter Reuter&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/pine-a64-gallery/close_up_pine_01.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1000x664&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/pine-a64-gallery/thumbnails/thumb_close_up_pine_01.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Close up 01&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Close up 01
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Docker Inc.&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/pine-a64-gallery/close_up_pine_02.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1000x664&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/pine-a64-gallery/thumbnails/thumb_close_up_pine_02.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Close up 02&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Close up 02
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Dieter Reuter&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/pine-a64-gallery/close_up_pine_03.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1000x664&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/pine-a64-gallery/thumbnails/thumb_close_up_pine_03.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Close up 03&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Close up 03
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Dieter Reuter&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/pine-a64-gallery/close_up_pine_04.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1000x664&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/pine-a64-gallery/thumbnails/thumb_close_up_pine_04.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Close up 04&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Close up 04
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Dieter Reuter&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/pine-a64-gallery/comparison_to_other_boards.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1000x664&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/pine-a64-gallery/thumbnails/thumb_comparison_to_other_boards.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;The Pine A64 compared to a Raspberry Pi 2 and an ODroid C1&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    The Pine A64 compared to a Raspberry Pi 2 and an ODroid C1
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Dieter Reuter&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/photoswipe.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/default-skin/default-skin.css&#34;&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe-ui-default.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/initphotoswipe.js&#34;&gt;&lt;/script&gt;



&lt;div class=&#34;pswp&#34; tabindex=&#34;-1&#34; role=&#34;dialog&#34; aria-hidden=&#34;true&#34;&gt;

&lt;div class=&#34;pswp__bg&#34;&gt;&lt;/div&gt;

&lt;div class=&#34;pswp__scroll-wrap&#34;&gt;
    
    &lt;div class=&#34;pswp__container&#34;&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    
    &lt;div class=&#34;pswp__ui pswp__ui--hidden&#34;&gt;
    &lt;div class=&#34;pswp__top-bar&#34;&gt;
      
      &lt;div class=&#34;pswp__counter&#34;&gt;&lt;/div&gt;
      &lt;button class=&#34;pswp__button pswp__button--close&#34; title=&#34;Close (Esc)&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--share&#34; title=&#34;Share&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--fs&#34; title=&#34;Toggle fullscreen&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--zoom&#34; title=&#34;Zoom in/out&#34;&gt;&lt;/button&gt;
      
      
      &lt;div class=&#34;pswp__preloader&#34;&gt;
        &lt;div class=&#34;pswp__preloader__icn&#34;&gt;
          &lt;div class=&#34;pswp__preloader__cut&#34;&gt;
            &lt;div class=&#34;pswp__preloader__donut&#34;&gt;&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;pswp__share-modal pswp__share-modal--hidden pswp__single-tap&#34;&gt;
      &lt;div class=&#34;pswp__share-tooltip&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--left&#34; title=&#34;Previous (arrow left)&#34;&gt;
    &lt;/button&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--right&#34; title=&#34;Next (arrow right)&#34;&gt;
    &lt;/button&gt;
    &lt;div class=&#34;pswp__caption&#34;&gt;
      &lt;div class=&#34;pswp__caption__center&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;style&gt;
    .gallery {  }
    .gallery img { width: 100%; height: auto; }
    .gallery figure { display: block; float: left; margin: 0 5px 5px 0; width: 200px; }
    .gallery figcaption { display: none; }
    .gallery div.title { font-weight: bold; }
    span[itemprop=&#34;copyrightHolder&#34;] { color : #888; float: right; }
    span[itemprop=&#34;copyrightHolder&#34;]:before { content: &#34;Foto: &#34;; }
    img[itemprop=&#34;thumbnail&#34;]{ width: 200px; }
&lt;/style&gt;


&lt;script&gt;initPhotoSwipeFromDOM(&#39;.gallery&#39;);&lt;/script&gt;
&lt;/p&gt;

&lt;h2 id=&#34;the-software:7983295b98b0feead04ba41a7de6ce9d&#34;&gt;The Software&lt;/h2&gt;

&lt;p&gt;One of the current limitations of the Pine A64 is that it only runs with Android.
The Pine makers assured us that Linux support will come, too. Still for us it is a tad annoying that Android is first instead of Linux.&lt;/p&gt;

&lt;p&gt;Impatient as we are, once we got the device, we immediately started out to rectify this by getting HypriotOS to run on it.
Relatively soon it became obvious that this would not be an easy task.&lt;/p&gt;

&lt;p&gt;Why? Well, the relationship between &lt;a href=&#34;http://www.allwinnertech.com/index.html&#34;&gt;Allwinner Technology&lt;/a&gt; and the Open-Source community seems not always been the best in the past.
That basically meant that the existing &lt;a href=&#34;http://linux-sunxi.org/&#34;&gt;friendly and supportive Open-Source community&lt;/a&gt; for the Allwinner related SoC&amp;rsquo;s often had to work
with limited information and support when they tried to come up with proper Linux support for Allwinner based devices.
Still despite that some members of the Linux Sunxi Community are already busy working with the Pine A64.&lt;/p&gt;

&lt;h2 id=&#34;a-long-journey-down-the-rabbit-hole-begins-with-the-first-step:7983295b98b0feead04ba41a7de6ce9d&#34;&gt;A long journey (down the rabbit hole) begins with the first step&lt;/h2&gt;

&lt;p&gt;The rest of this blog post describes our preliminary journey to create Linux &amp;amp; Docker bliss for the Pine A64.
And consider yourself sufficiently warned - this journey is not for the faint of heart&amp;hellip; :)&lt;/p&gt;

&lt;h3 id=&#34;down-the-rabbit-hole-output-foo-with-the-uart0-console:7983295b98b0feead04ba41a7de6ce9d&#34;&gt;Down the rabbit hole: Output foo with the UART0 console&lt;/h3&gt;

&lt;p&gt;So let&amp;rsquo;s get our hands on this new beauty. First thing you should know is how you can power the Pine A64 board.
It has a standard microUSB port, which you can use with a power adapter of 5V/2A. That&amp;rsquo;s the same you might use for a Raspberry Pi.&lt;/p&gt;

&lt;p&gt;For our first low-level steps with the board we prefer to connect to the UART0 console via an UART-to-USB connector cable.
We recommend to use one such as the &lt;a href=&#34;https://www.adafruit.com/product/954&#34;&gt;USB to TTL Serial Cable&lt;/a&gt; from Adafruit.
Adafruit also has a &lt;a href=&#34;https://learn.adafruit.com/adafruits-raspberry-pi-lesson-5-using-a-console-cable&#34;&gt;great tutorial&lt;/a&gt; on how to install the drivers for such a cable on different operating systems.&lt;/p&gt;

&lt;p&gt;For connecting via UART0 to the Pine there are basically two ways. Either via the pins of the &lt;code&gt;Euler bus&lt;/code&gt; or via the &lt;code&gt;EXT&lt;/code&gt; connectors.
The location of each can be seen on the following images. Consult the &lt;a href=&#34;http://linux-sunxi.org/Pine64#Serial_port_.2F_UART&#34;&gt;Linux-sunxi Wiki: Serial port / UART&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;Serial Console with Euler Bus:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/pine-a64/serial_euler.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Serial Console with Ext connector:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/pine-a64/serial_ext.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;To actually work with the UART0 console you have to connect the UART-to-USB cable to your Linux or Mac computer and start your preferred terminal program.&lt;/p&gt;

&lt;p&gt;Here is the command for Mac OS X:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo screen /dev/cu.usbserial 115200
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;rsquo;t be surprised that there is absolutely no sign of booting on your console screen when you connect the UART-to-USB cable to the Pine.
The only thing you will see is that the power LED on the board has turned green.&lt;/p&gt;

&lt;p&gt;This is due to the fact that the A64 SOC is reading it&amp;rsquo;s initial bootloader from the microSD card into memory and starts it.
This among other things initializes the UART0 port and prints out the first boot messages.&lt;/p&gt;

&lt;p&gt;There might be two reasons if your Pine stays silent: either there is no SD card present or there is no working bootloader program found on the SD card.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s make sure that we have both.&lt;/p&gt;

&lt;p&gt;Grab a working SD card and and flash an appropriate image on it.
Thanks to Andre Przywara there already exists &lt;a href=&#34;https://github.com/apritzel/pine64&#34;&gt;a first experimental Linux image&lt;/a&gt; that we can use.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# replace sdx with the name of your SD card device file

$ xzcat pine64_linux-20160121.img.xz | dd of=/dev/sdx bs=1M
$ sync
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This SD card image is a hybrid that combines components from the original Pine 64 Android image with a recent Linux 4.4.0-rc8 kernel and initrd.
All this is more or less just cobbled together to get a first prototypical SD card image with Linux running.&lt;/p&gt;

&lt;p&gt;As this image does not include a full root file system one of the first ideas that came to our mind was to include our HypriotOS root filesystem for ARM64.
Alright, lets see if this really works.&lt;/p&gt;

&lt;p&gt;Inserting the SD card into the Pine A64 and booting produced the expected boot messages.
After some seconds the following boot Linux prompt was visible:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BusyBox v1.22.1 (Debian 1:1.22.0-9+deb8u1) built-in shell (ash)
Enter &#39;help&#39; for a list of built-in commands.

/ #
/ #
/ #
/ # uname -a
Linux (none) 4.4.0-rc8 #20 SMP PREEMPT Mon Jan 18 01:05:25 GMT 2016 aarch64 GNU/Linux
/ # df -h
Filesystem                Size      Used Available Use% Mounted on
none                     78.5M     72.0K     78.4M   0% /run
devtmpfs                381.8M         0    381.8M   0% /dev
/ #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay, that was the first step, but now we would like to see, if it&amp;rsquo;s really possible to boot into a HypriotOS root filesystem.
So let&amp;rsquo;s reboot the Pine. As soon as the U-Boot messages appear hit a random key to stop the automatic boot process.
This drops us into an interactive U-Boot prompt.&lt;/p&gt;

&lt;p&gt;Next we just have to follow Andre&amp;rsquo;s documentation and tell U-Boot to boot into the root filesystem on &lt;code&gt;/dev/sda10&lt;/code&gt;, which contains our &lt;a href=&#34;https://github.com/hypriot/os-rootfs/releases/tag/v0.6.0&#34;&gt;generic HypriotOS for ARM64&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sunxi# run load_env
sunxi# run load_dtb
sunxi# run set_cmdline
sunxi# setenv kernel_part mainline
sunxi# run load_kernel
sunxi# run boot_kernel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bingo! It works.&lt;/p&gt;

&lt;p&gt;Here are a few snippets of the boot log from the UART0 console.
We have stored the complete bootlog for you as a &lt;a href=&#34;https://gist.github.com/DieterReuter/93a5d10dae6a62911b71&#34;&gt;GitHub gist&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HELLO! BOOT0 is starting!
boot0 commit : 045061a8bb2580cb3fa02e301f52a015040c158f

boot0 version : 4.0.0
set pll start
set pll end
...
NOTICE:  BL3-1: v1.0(debug):045061a
NOTICE:  BL3-1: Built : 14:30:28, Dec  3 2015
NOTICE:  BL3-1 commit: 045061a8bb2580cb3fa02e301f52a015040c158f

INFO:    BL3-1: Initializing runtime services
INFO:    BL3-1: Preparing for EL3 exit to normal world
INFO:    BL3-1: Next image address = 0x4a000000
INFO:    BL3-1: Next image spsr = 0x1d3


U-Boot 2014.07 (Dec 03 2015 - 14:30:33) Allwinner Technology
...
Starting kernel ...

INFO:    BL3-1: Next image address = 0x41080000
INFO:    BL3-1: Next image spsr = 0x3c5
Booting Linux on physical CPU 0x0
Initializing cgroup subsys cpu
Linux version 4.4.0-rc8 (aprzywara@slackpad) (gcc version 4.9.3 (GCC) ) #21 SMP PREEMPT Wed Jan 20 22:43:20 GMT 2016
Boot CPU: AArch64 Processor [410fd034]
...
Welcome to Debian GNU/Linux 8 (jessie)!
...
[  OK  ] Reached target Multi-User System.
[  OK  ] Reached target Graphical Interface.

Debian GNU/Linux 8 black-pearl ttyS0

black-pearl login: pirate
Password:
Linux black-pearl 4.4.0-rc8 #21 SMP PREEMPT Wed Jan 20 22:43:20 GMT 2016 aarch64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
HypriotOS/arm64: pirate@black-pearl in ~
$ uname -a
Linux black-pearl 4.4.0-rc8 #21 SMP PREEMPT Wed Jan 20 22:43:20 GMT 2016 aarch64 GNU/Linux
$ cat /etc/os-release
PRETTY_NAME=&amp;quot;Debian GNU/Linux 8 (jessie)&amp;quot;
NAME=&amp;quot;Debian GNU/Linux&amp;quot;
VERSION_ID=&amp;quot;8&amp;quot;
VERSION=&amp;quot;8 (jessie)&amp;quot;
ID=debian
HOME_URL=&amp;quot;http://www.debian.org/&amp;quot;
SUPPORT_URL=&amp;quot;http://www.debian.org/support/&amp;quot;
BUG_REPORT_URL=&amp;quot;https://bugs.debian.org/&amp;quot;
HYPRIOT_OS=&amp;quot;HypriotOS/arm64&amp;quot;
HYPRIOT_TAG=&amp;quot;dirty&amp;quot;
HypriotOS/arm64: root@black-pearl in ~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Success!&lt;/strong&gt; The first boot of HypriotOS/arm64 on a Pine A64 board.&lt;/p&gt;

&lt;h3 id=&#34;even-deeper-into-the-rabbit-hole-using-the-fel-mode-to-communicate-with-the-the-pine-a66:7983295b98b0feead04ba41a7de6ce9d&#34;&gt;Even deeper into the rabbit hole: Using the FEL mode to communicate with the the Pine A66&lt;/h3&gt;

&lt;p&gt;OK. That was fun, was it? Our small experiment with the UART-to-USB connector cable and the SD card image from Andre did give us a first taste of Linux on the Pine.
But that of course is not the real deal. There is still a rocky path to walk before we will have proper Linux support.&lt;/p&gt;

&lt;p&gt;Our path towards more knowledge does lead us even deeper into the rabbit hole.&lt;/p&gt;

&lt;p&gt;In order to gain that deeper knowledge we will introduce you to another powerful tool called &lt;a href=&#34;http://linux-sunxi.org/FEL&#34;&gt;FEL&lt;/a&gt; mode.
The FEL mode is a low-level subroutine in the Boot ROM of all Allwinner devices that ca be used to gather valuable insights about the Pine.
We will show you shortly how this works.&lt;/p&gt;

&lt;p&gt;Besides gathering intel FEL has another useful application. It allows you to directly boot images via an USB cable from your development computer.
As such it makes the annoying process of flashing and inserting SD cards over and over again obsolete.&lt;/p&gt;

&lt;p&gt;Booting the Pine A64 into FEL mode is really easy. Just leave the SD card slot empty and connect an appropriate USB cable between the Pine A64 and your computer.
Then power on the Pine. It&amp;rsquo;s important to know that you have to connect to the Pine with a special USB cable to the upper USB port.
That is because only this USB port is wired for using the FEL signals.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/pine-a64/upper_usb_port.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;You can buy such a special USB A-male/A-male cable at &lt;a href=&#34;http://www.amazon.com/Monoprice-1-5-Feet-24AWG-Plated-105441/dp/B009GUXG92&#34;&gt;Amazon&lt;/a&gt; or you can build &lt;a href=&#34;http://www.instructables.com/id/Male-to-Male-A-to-A-USB-Cable/&#34;&gt;your own&lt;/a&gt;.
Once the Pine A64 is booted, it can be discovered on your host computer as a new USB device with the &lt;code&gt;USB ID 1f3a:efe8&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Simply run &lt;code&gt;lsusb&lt;/code&gt; and it should be there:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ lsusb
Bus 001 Device 004: ID 1f3a:efe8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For further access via FEL mode, we do need to install and compile the very latest version of the sunxi-tools.
As our development computer we are using a Raspberry Pi running &lt;a href=&#34;http://blog.hypriot.com/post/just-in-time-for-DockerCon-EU-a-shipload-of-new-Docker-ARM-goodies/&#34;&gt;HypriotOS&lt;/a&gt;.
So let&amp;rsquo;s install all the development dependencies we need and then clone the sunxi-tools repo and compile them from source.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get install -y make gcc pkg-config libusb-1.0-0-dev
$ makedir -p ~/code
$ cd ~/code
$ git clone https://github.com/linux-sunxi/sunxi-tools
$ cd sunxi-tools
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s see if we can use the sunxi-tools to extract some version information about the Pine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo sunxi-fel version
AWUSBFEX soc=00001689(unknown) 00000001 ver=0001 44 08 scratchpad=00017e00 00000000 00000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bingo!&lt;/p&gt;

&lt;p&gt;The Pine A64 board is connected and we are already getting some basic version info.
The the SOC ID #1689 tells us it is an Allwinner A64 SOC.
The device itself is classified as &amp;ldquo;unknown&amp;rdquo; because it is too new and the A64 support is not yet merged upstream into the &lt;code&gt;sunxi-fel&lt;/code&gt; tool.&lt;/p&gt;

&lt;p&gt;What can we do now with this low-level access via FEL mode?&lt;/p&gt;

&lt;p&gt;Well, for instance we could read 128 bytes of the device memory and display it as hex dump on the screen.
Let&amp;rsquo;s start from address 0x0000:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo sunxi-fel hexdump 0x0000 128
00000000: 08 00 00 ea 06 00 00 ea 05 00 00 ea 04 00 00 ea  ................
00000010: 03 00 00 ea 02 00 00 ea 11 00 00 ea 00 00 00 ea  ................
00000020: 13 00 00 ea fe ff ff ea 01 00 a0 e3 00 10 a0 e3  ................
00000030: 00 20 a0 e3 00 30 a0 e3 00 40 a0 e3 00 50 a0 e3  . ...0...@...P..
00000040: 00 60 a0 e3 00 70 a0 e3 00 80 a0 e3 00 90 a0 e3  .`...p..........
00000050: 00 a0 a0 e3 00 b0 a0 e3 00 c0 a0 e3 00 d0 a0 e3  ................
00000060: e8 f0 9f e5 04 e0 4e e2 ff 5f 2d e9 1f 07 00 eb  ......N.._-.....
00000070: ff 9f fd e8 d2 20 a0 e3 02 f0 21 e1 d0 d0 9f e5  ..... ....!.....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or we could just copy the device memory into a file to our development computer and display the content with the &lt;code&gt;hexdump&lt;/code&gt; command locally.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo sunxi-fel dump 0x0000 128 &amp;gt; memory-dump.bin
$ hexdump -C memory-dump.bin
00000000  08 00 00 ea 06 00 00 ea  05 00 00 ea 04 00 00 ea  |................|
00000010  03 00 00 ea 02 00 00 ea  11 00 00 ea 00 00 00 ea  |................|
00000020  13 00 00 ea fe ff ff ea  01 00 a0 e3 00 10 a0 e3  |................|
00000030  00 20 a0 e3 00 30 a0 e3  00 40 a0 e3 00 50 a0 e3  |. ...0...@...P..|
00000040  00 60 a0 e3 00 70 a0 e3  00 80 a0 e3 00 90 a0 e3  |.`...p..........|
00000050  00 a0 a0 e3 00 b0 a0 e3  00 c0 a0 e3 00 d0 a0 e3  |................|
00000060  e8 f0 9f e5 04 e0 4e e2  ff 5f 2d e9 1f 07 00 eb  |......N.._-.....|
00000070  ff 9f fd e8 d2 20 a0 e3  02 f0 21 e1 d0 d0 9f e5  |..... ....!.....|
00000080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we already explained, the Allwinner SOC is starting it&amp;rsquo;s boot process by loading the Boot ROM (&lt;a href=&#34;http://linux-sunxi.org/BROM&#34;&gt;BROM&lt;/a&gt;)
and detects wether it should run a normal boot or start the FEL subroutine.
With the help of FEL mode and the &lt;code&gt;sunxi-fel&lt;/code&gt; tool we can also copy and analyse the BROM boot code itself.&lt;/p&gt;

&lt;p&gt;So, let&amp;rsquo;s download the BROM directly from the Pine and save it into a local file on our development computer for later inspection.
In order to do so, we need to know the memory address where the BROM starts.&lt;/p&gt;

&lt;p&gt;Unfortunately the memory address that works for existing Allwinner SoC&amp;rsquo;s like the A10 or A20 does not work here.
But there is an important clue in the &lt;a href=&#34;http://linux-sunxi.org/EGON&#34;&gt;Linux-Sunxi wiki&lt;/a&gt; that tells us
that we need to search for a unique string &lt;code&gt;eGON.BRM&lt;/code&gt; near the starting address of the BROM.&lt;/p&gt;

&lt;p&gt;Armed with this knowlegde and the &lt;code&gt;sunxi-fel hexdump&lt;/code&gt; command we can now scan the memory until we will find this string.
And luckily we were able to locate the BROM starting at address &lt;strong&gt;0x2c00&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo sunxi-fel hexdump 0x2c00 128
00002c00: 07 00 00 ea 07 00 00 ea 65 47 4f 4e 2e 42 52 4d  ........eGON.BRM
00002c10: 24 00 00 00 31 31 30 30 31 31 30 30 31 36 33 33  $...110011001633
00002c20: 00 00 00 00 00 00 00 ea 01 00 00 ea 00 60 a0 e3  .............`..
00002c30: 03 00 00 ea 5c 60 a0 e3 0e 00 00 ea e8 01 9f e5  ....\`..........
00002c40: 00 f0 90 e5 b0 0f 10 ee 03 10 00 e2 00 00 51 e3  ..............Q.
00002c50: f9 ff ff 1a ff 1c 00 e2 00 00 51 e3 f6 ff ff 1a  ..........Q.....
00002c60: c8 11 9f e5 c8 21 9f e5 00 30 91 e5 03 00 52 e1  .....!...0....R.
00002c70: 00 00 00 1a f0 ff ff ea 50 00 a0 e3 01 00 50 e2  ........P.....P.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s download the complete 32 kByte of the BROM binary blob and have a look at it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo sunxi-fel dump 0x2c00 32768 &amp;gt; pine64-a64-brom.bin
$ head -c 128 pine64-a64-brom.bin | hexdump -C
00000000  07 00 00 ea 07 00 00 ea  65 47 4f 4e 2e 42 52 4d  |........eGON.BRM|
00000010  24 00 00 00 31 31 30 30  31 31 30 30 31 36 33 33  |$...110011001633|
00000020  00 00 00 00 00 00 00 ea  01 00 00 ea 00 60 a0 e3  |.............`..|
00000030  03 00 00 ea 5c 60 a0 e3  0e 00 00 ea e8 01 9f e5  |....\`..........|
00000040  00 f0 90 e5 b0 0f 10 ee  03 10 00 e2 00 00 51 e3  |..............Q.|
00000050  f9 ff ff 1a ff 1c 00 e2  00 00 51 e3 f6 ff ff 1a  |..........Q.....|
00000060  c8 11 9f e5 c8 21 9f e5  00 30 91 e5 03 00 52 e1  |.....!...0....R.|
00000070  00 00 00 1a f0 ff ff ea  50 00 a0 e3 01 00 50 e2  |........P.....P.|
00000080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All these examples were based on the FEL mode and the &lt;code&gt;sunxi-fel&lt;/code&gt; tool.
They illustrated how to gather information about a device.&lt;/p&gt;

&lt;p&gt;In the introduction about the FEL mode we did mention another application of the FEL mode.
It was about using the FEL mode to have a faster development cycle where one does not have to flash and boot SD cards.&lt;/p&gt;

&lt;p&gt;To make this mode work for the Pine we first have to patch the &lt;code&gt;sunix-fel&lt;/code&gt; tool.
Thanks to the work of &lt;a href=&#34;https://github.com/ssvb&#34;&gt;Siarhei Siamashka&lt;/a&gt; from Linux-Sunxi community this is easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/code/sunxi-tools
$ mv fel.c fel.c.org
$ wget https://github.com/ssvb/sunxi-tools/raw/dc77476014669a6f9010a3160357391450a5196e/fel.c
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wow, it works. The &lt;code&gt;sunxi-fel&lt;/code&gt; tool now correctly detects the Pine A64 and the Allwinner A64 SOC.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo sunxi-fel version
AWUSBFEX soc=00001689(A64) 00000001 ver=0001 44 08 scratchpad=00017e00 00000000 00000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this preparation in place our work on things like the Secondary Program Loader (SPL or boot0), U-Boot, the Linux kernel and its modules get much more convenient.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/pine-a64/dev-host-pine-cabeling.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;inside-wonderland-combining-uart0-console-and-fel-mode:7983295b98b0feead04ba41a7de6ce9d&#34;&gt;Inside wonderland: Combining UART0 console and FEL mode&lt;/h3&gt;

&lt;p&gt;Now it is about time to put the various things we already learned together.
Using both an USB A-male/A-male cable and an UART-to-USB connector cable at the same time we are able to send software to the Pine and see how it gets executed.
This allows for fast feedback cycles.&lt;/p&gt;

&lt;p&gt;We will attempt this by uploading and starting a boot0 bootloader.&lt;/p&gt;

&lt;p&gt;Instead of creating our own boot0 bootloader for the sake of simplicity we are going to extract the existing one from Andre&amp;rsquo;s Linux SD card image.
It is located at sector 16 (or 8 KByte) and has a total size of 64 sectors or 32 KByte.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ xzcat pine64_linux-20160121.img.xz | dd of=pine64-boot0.bin bs=512 count=64 skip=16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s double-check if this file is really the correct boot0 binary blob we&amp;rsquo;re looking for.
The file should start with the string &amp;ldquo;eGON.BT0&amp;rdquo; at byte #5.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hexdump -C pine64-boot0.bin
00000000  cc 00 00 ea 65 47 4f 4e  2e 42 54 30 31 7a f6 a8  |....eGON.BT01z..|
00000010  00 80 00 00 30 00 00 00  00 00 00 00 00 00 01 00  |....0...........|
00000020  00 00 01 00 00 00 00 00  00 00 34 2e 30 2e 30 00  |..........4.0.0.|
00000030  00 00 00 00 01 00 00 00  a0 02 00 00 03 00 00 00  |................|
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the help of &lt;code&gt;sunxi-fel&lt;/code&gt; this boot0 program can now be sent directly to the Pine A64.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo sunxi-fel spl pine64-boot0.bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looking at our UART0 console output we can see that the upload and start of the program works as expected.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HELLO! BOOT0 is starting!
boot0 commit : 045061a8bb2580cb3fa02e301f52a015040c158f

boot0 version : 4.0.0
set pll start
set pll end
rtc[0] value = 0x00000000
rtc[1] value = 0x00000000
rtc[2] value = 0x00000000
rtc[3] value = 0x00000000
rtc[4] value = 0x00000000
rtc[5] value = 0x00000000
DRAM driver version: V1.1
rsb_send_initseq: rsb clk 400Khz -&amp;gt; 3Mhz
PMU: AXP81X
ddr voltage = 1500 mv
DRAM Type = 3 (2:DDR2,3:DDR3,6:LPDDR2,7:LPDDR3)
DRAM clk = 672 MHz
DRAM zq value: 003b3bbb
DRAM single rank full DQ OK
DRAM size = 1024 MB
DRAM init ok
dram size =1024
card boot number = 0, boot0 copy = 0
card no is 0
sdcard 0 line count 4
[mmc]: mmc driver ver 2015-05-08 20:06
[mmc]: sdc0 spd mode error, 2
[mmc]: Wrong media type 0x00000000
[mmc]: ***Try SD card 0***
[mmc]: mmc 0 cmd 8 timeout, err 00000100
[mmc]: mmc 0 cmd 8 err 00000100
[mmc]: mmc 0 send if cond failed
[mmc]: mmc 0 cmd 55 timeout, err 00000100
[mmc]: mmc 0 cmd 55 err 00000100
[mmc]: mmc 0 send app cmd failed
[mmc]: ***Try MMC card 0***
[mmc]: mmc 0 cmd 1 timeout, err 00000100
[mmc]: mmc 0 cmd 1 err 00000100
[mmc]: mmc 0 send op cond failed
[mmc]: mmc 0 Card did not respond to voltage select!
[mmc]: ***SD/MMC 0 init error!!!***
[mmc]: mmc 0 register failed
Fail in Init sdmmc.
Ready to disable icache.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By verifing that we can send code to the Pine and execute it, we opened up the door for further steps.
For instance working on a new U-Boot bootloader.&lt;/p&gt;

&lt;p&gt;A few days ago Siarhei was able to create a first working U-Boot for the A64 SOC and could upload and start it on his Pine A64 board.
He published the full bootlog of this &lt;a href=&#34;https://gist.github.com/ssvb/67ebb38e8f8f2b9b5ee6&#34;&gt;work-in-progress U-Boot bootloader&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here you can see a snippet from the bootlog that shows what is already working:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;U-Boot SPL 2016.01-00352-ge77e0e4-dirty (Jan 24 2016 - 10:26:33)
DRAM:DRAM driver version: V1.0
DRAM Type = 3 (2:DDR2,3:DDR3,6:LPDDR2,7:LPDDR3)
DRAM clk = 672 MHz
DRAM zq value: 3b3bbb
DRAM single rank full DQ OK
DRAM size = 1024 MB
DRAM init ok
 1024 MiB
Trying to boot from MMC


U-Boot 2016.01-00352-ge77e0e4-dirty (Jan 24 2016 - 10:26:33 +0200) Allwinner Technology

CPU:   Allwinner A64 (SUN50I)
DRAM:  1 GiB
MMC:   SUNXI SD/MMC: 0
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-preliminary-end:7983295b98b0feead04ba41a7de6ce9d&#34;&gt;The preliminary end&lt;/h2&gt;

&lt;p&gt;This brings us (somewhat sadly) to the end of our blog post.&lt;/p&gt;

&lt;p&gt;Our goal was to give a first impression of the current state of Linux support for the Pine A64.
And we also wanted to give you an introduction to the tools and knowledge that are necessary to make it happen.&lt;/p&gt;

&lt;p&gt;This blogpost would not be possible without the great guys from the Linux-Sunxi community.
Especially the help of &lt;a href=&#34;https://github.com/apritzel&#34;&gt;Andre Przywara&lt;/a&gt;(apritzel) and &lt;a href=&#34;https://github.com/ssvb&#34;&gt;Siarhei Siamashka&lt;/a&gt;(ssvb) was invaluable.
It demands lots of respect seeing how they have to reverse engineer this stuff with only little support from Allwinner Technology.
We really hope that the &lt;a href=&#34;http://forum.pine64.org/forumdisplay.php?fid=17&#34;&gt;announced support&lt;/a&gt; from the Pine team will help to move things forward.&lt;/p&gt;

&lt;p&gt;We will follow this development closely and hope to publish an initial support for HypriotOS rather sooner than later.
By this Docker will gain access to a really powerful developer board - and we will support it early on.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed this whirlwind tour!&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Dieter &lt;a href=&#34;https://twitter.com/Quintus23M&#34;&gt;@Quintus23M&lt;/a&gt; and Govinda &lt;a href=&#34;https://twitter.com/_beagile_&#34;&gt;@_beagile_&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to get Docker working on your favourite ARM board with HypriotOS</title>
      <link>http://blog.hypriot.com/post/how-to-get-docker-working-on-your-favourite-arm-board-with-hypriotos/</link>
      <pubDate>Mon, 18 Jan 2016 16:00:00 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/how-to-get-docker-working-on-your-favourite-arm-board-with-hypriotos/</guid>
      <description>&lt;p&gt;It all began when Dieter aka &lt;a href=&#34;https://twitter.com/Quintus23M&#34;&gt;@Quintus23M&lt;/a&gt; started to experiment with the NVIDIA ShieldTV.
The ShieldTV is a curious little thing. Sold as a media hub for your living room it does deliver one teraflop of processing power.
On top of that it is one of the first 64-bit ARM boards that can be bought for a reasonable price.&lt;/p&gt;

&lt;p&gt;Regular readers of our blog know that it is not in Dieter&amp;rsquo;s nature to resist the Sirens voices of such an appealing beauty for long.
Read on to learn what happened next&amp;hellip;&lt;/p&gt;

&lt;p&gt;Last December he started the work to get Docker running on the ShieldTV and &lt;a href=&#34;http://blog.hypriot.com/post/getting-docker-running-on-a-highend-arm-gaming-console-for-fun-and-profit/&#34;&gt;described his journey&lt;/a&gt; on our blog.
The gist of it is that it was quite an involved process of creating his own custom Debian based operating system that supported building Go and Docker for ARM64.&lt;/p&gt;

&lt;p&gt;The work of Dieter on the ShieldTV inspired our team to revisit the way we were building our beloved HypriotOS for the Raspberry Pi.
Longing to publish the way we build it for quite some time we had been ashamed to actually do it because it was such a complicated mess.
Don&amp;rsquo;t get me wrong - it worked well enough and was completely automated with our CI system and even tested, but ultimately it was difficult to understand and change.&lt;/p&gt;

&lt;p&gt;So Dieter&amp;rsquo;s work got us thinking:
What if we could restructure the build process of HypriotOS in such a way that it would be built in distinct layers that would create distinct build artifacts on their own.
What if those artifacts could be tested and published on their own, too? Only to be assembled in a final step at the end to create a fully working SD card image.
What if those distinct steps were self-contained and easy to understand?&lt;/p&gt;

&lt;p&gt;Last week we had some time at our hands and we started working on a build process that would be the answer to all those questions.
It is certainly still a little rough around the edges and needs further tweaking but it produces a working SD card image for the Raspberry Pi.
We consider it beta quality and it is not yet completely on par with our stable HypriotOS Hector image, but it already runs very well.&lt;/p&gt;

&lt;p&gt;The main repository for building HypriotOS SD card image for the Raspberry Pi can be found at GitHub in the &lt;a href=&#34;https://github.com/hypriot/image-builder-rpi&#34;&gt;Image-Builder-Rpi Repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So what happens in this repository?&lt;/p&gt;

&lt;p&gt;Basically it just assembles prepared artifacts into a working SD card image which then can be &lt;a href=&#34;https://github.com/hypriot/flash&#34;&gt;easily flashed&lt;/a&gt; onto a SD card.&lt;/p&gt;

&lt;p&gt;The artifacts that are combined here are produced elsewhere each in their own GitHub repository:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hypriot/os-rootfs&#34;&gt;a basic filesystem that is based on Debian Jessie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hypriot/rpi-kernel&#34;&gt;a Raspberry Pi compatible Linux kernel and firmware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hypriot/image-builder-raw&#34;&gt;a Raspberry Pi image file that contains the necessary partitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://packagecloud.io/Hypriot/Schatzkiste&#34;&gt;a couple of Debian packages with software like Docker, Docker-Machine and Docker-Compose&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The basic idea is that all these artifacts can be build and tested with the help of Docker.
For instance if you look into the &lt;a href=&#34;https://github.com/hypriot/os-rootfs&#34;&gt;os-rootfs&lt;/a&gt; repository you will find a &lt;code&gt;Dockerfile&lt;/code&gt; in the root of the project that will allow you to create a build and test environment for the root filesystem.&lt;/p&gt;

&lt;p&gt;This makes two important things possible: Firstly it allows others to build the rootfs locally on their own computer and fix or extend the rootfs with ease.
And secondly the rootfs is build and tested on &lt;a href=&#34;https://travis-ci.org/hypriot/os-rootfs&#34;&gt;Travis CI&lt;/a&gt; everytime somebody creates - for instance - a pull request.
Combined these two points create a transparent development process with instant feedback.&lt;/p&gt;

&lt;p&gt;It turned out that this approach is generic and powerful enough to be applied - you probably already guessed it - to the NVIDIA ShieldTV, too.
By publishing the &lt;a href=&#34;https://github.com/hypriot/image-builder-nvidia-shieldtv&#34;&gt;Image-Builder-NVIDIA-ShieldTV&lt;/a&gt; repository we are making good on Dieter&amp;rsquo;s promise to publish the sources for Dieter&amp;rsquo;s journey with the ShieldTV.&lt;/p&gt;

&lt;p&gt;But hold on - that&amp;rsquo;s not all. To proof to ourselves that this process allows to easily port HypriotOS to different development boards we created &lt;a href=&#34;https://github.com/hypriot/image-builder-odroid-c1&#34;&gt;another Github repository&lt;/a&gt;.
It builds a SD card image for the very capable &lt;a href=&#34;http://www.hardkernel.com/main/products/prdt_info.php?g_code=G143703355573&#34;&gt;ODROID C1+&lt;/a&gt; development board.
Similar to the Raspberry Pi 2 the ODROID C1+ features a quad core ARMv7 CPU with 1 GB of memory. Distinct from the Raspberry Pi 2 it features a gigabit ethernet port.
A highlevel comparision of both devices can be found at &lt;a href=&#34;http://www.cnx-software.com/2015/02/02/raspberry-pi-2-odroid-c1-development-boards-comparison/&#34;&gt;CNX-Software&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With this third supported board for HypriotOS we proofed to ourselves that this new build process makes it not only feasible but actually quite easy to extend the support of HypriotOS to new development boards.&lt;/p&gt;

&lt;p&gt;Overall the relation of the different repositories now looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/hypriotos-xxx/hypriotos_buildpipeline.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;All these changes also redefined for us what HypriotOS is all about.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our old mission statement for HypriotOS was:&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;&amp;ldquo;HypriotOS is a minimal operating system for the Raspberry Pi 1 &amp;amp; 2 that provides an optimized environment for running Docker. It is very easy to install and use. HypriotOS prides itself for coming with very recent versions of the Linux kernel and all included software.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our new mission statement is:&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;&amp;ldquo;HypriotOS is a minimal Debian-based operating system for &lt;strong&gt;many popular IoT devices&lt;/strong&gt; that provides an optimized environment for running Docker. It is very easy to install and use. HypriotOS prides itself for coming with very recent versions of the Linux kernel and all included software.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is just a small change but it will have big implications.&lt;/p&gt;

&lt;p&gt;One of the biggest downsides of having an ever increasing amount of IoT devices to choose from is fragmentation. Each device comes with varying support for existing operating systems.
Take Linux for instance. Even if a vendor provides Linux support for a device from the start - it is often based on an outdated Linux kernel.
This in turn often enough means that you can only use old software on top of it. Docker with OverlayFS is such an example. It can only be used with a Linux kernel greater than 3.18.
And that&amp;rsquo;s not only a problem of the small vendors, it even happens with big vendors like NVIDIA. The NVIDIA ShieldTV is provided only with a 3.10 Linux kernel while the latest stable Linux kernel is 4.4.
Not to mention that the 3.10 kernel is &lt;a href=&#34;https://www.kernel.org/category/releases.html&#34;&gt;not supported any more by the kernel maintainers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With this background in mind a major goal of HypriotOS is to provide an operating system that behaves as similar as possible on &lt;strong&gt;different&lt;/strong&gt; IoT devices.
While I know that this might prove to be a difficult task - especially in regards to support for recent Linux kernels - I think it might prove to be a worthwhile effort that provides much value.&lt;/p&gt;

&lt;p&gt;Providing a beta version of HypriotOS that supports three different development boards is a first step into that direction.&lt;/p&gt;

&lt;p&gt;Being just able to flash HypriotOS on a SD card and get going in minutes is one of the basic promises of HypriotOS, so without further ado you can download it here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hypriot/image-builder-rpi/releases&#34;&gt;HypriotOS for the Raspberry Pi&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/hypriot/image-builder-nvidia-shieldtv/releases&#34;&gt;HypriotOS for the NVIDIA ShieldTV&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/hypriot/image-builder-odroid-c1/releases&#34;&gt;HypriotOS for the ODROID C1+&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hopefully you have a lot of fun trying out what HypriotOS has to offer!&lt;br /&gt;
&lt;strong&gt;Note:&lt;/strong&gt; We changed the default username to &lt;code&gt;pirate&lt;/code&gt; (password &lt;code&gt;hypriot&lt;/code&gt;) and disabled the &lt;code&gt;root&lt;/code&gt; user for security reasons.&lt;/p&gt;

&lt;p&gt;By adding support for many more boards we think HypriotOS gets a lot more attractive! What do you think?&lt;br /&gt;
And for which board would you want to see support next?
Help us to get your favourite ARM board supported by HypriotOS!&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.
You also might wanna discuss this article on &lt;a href=&#34;https://news.ycombinator.com/item?id=10926502&#34;&gt;HackerNews&lt;/a&gt; or vote it up if you find it interesting.&lt;/p&gt;

&lt;p&gt;Govinda aka &lt;a href=&#34;https://twitter.com/_beagile_&#34;&gt;@&lt;em&gt;beagile&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First Meetup at University of Bamberg summons local Docker community</title>
      <link>http://blog.hypriot.com/post/first_docker_meetup_university_bamberg/</link>
      <pubDate>Fri, 15 Jan 2016 21:47:24 +0100</pubDate>
      
      <guid>http://blog.hypriot.com/post/first_docker_meetup_university_bamberg/</guid>
      <description>&lt;p&gt;&lt;strong&gt;An introduction to Docker, hands-on tutorials, live demos and roughly 30 attendees.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the summary of the first Docker meetup that we organized in cooperation with University of Bamberg. As a supplement to this event yesterday, we share the pictures and the slides of the presentation.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;gallery clearfix&#34; itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;





&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/docker_meetup_university_bamberg_00.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1030x684&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/thumbnails/thumb_docker_meetup_university_bamberg_00.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Our self-made poster&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Our self-made poster
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Dieter Reuter&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/docker_meetup_university_bamberg_01.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1030x684&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/thumbnails/thumb_docker_meetup_university_bamberg_01.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Some introductory words by Marcel Großmann as representer of the University&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Some introductory words by Marcel Großmann as representer of the University
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Dieter Reuter&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/docker_meetup_university_bamberg_02.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1030x684&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/thumbnails/thumb_docker_meetup_university_bamberg_02.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;... and Mathias with introductory words for Hypriot.&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    ... and Mathias with introductory words for Hypriot.
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Docker Inc.&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/docker_meetup_university_bamberg_03.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1030x684&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/thumbnails/thumb_docker_meetup_university_bamberg_03.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Introduction to Docker: Knowing about the evolution of virtualization helps to understand Docker.&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Introduction to Docker: Knowing about the evolution of virtualization helps to understand Docker.
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Dieter Reuter&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/docker_meetup_university_bamberg_04.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1030x684&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/thumbnails/thumb_docker_meetup_university_bamberg_04.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Community is carefully listening.&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Community is carefully listening.
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Dieter Reuter&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/docker_meetup_university_bamberg_05.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1030x684&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/thumbnails/thumb_docker_meetup_university_bamberg_05.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;While everyone is playing with Docker the entire Hypriot team is around to help.&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    While everyone is playing with Docker the entire Hypriot team is around to help.
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Dieter Reuter&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/docker_meetup_university_bamberg_06.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1030x684&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/meetup_uni_bamberg/thumbnails/thumb_docker_meetup_university_bamberg_06.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Mathias announcing a live demo with Hypriot Cluster Lab presented by Andreas (in the middle).&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Mathias announcing a live demo with Hypriot Cluster Lab presented by Andreas (in the middle).
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Dieter Reuter&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/photoswipe.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/default-skin/default-skin.css&#34;&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe-ui-default.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/initphotoswipe.js&#34;&gt;&lt;/script&gt;



&lt;div class=&#34;pswp&#34; tabindex=&#34;-1&#34; role=&#34;dialog&#34; aria-hidden=&#34;true&#34;&gt;

&lt;div class=&#34;pswp__bg&#34;&gt;&lt;/div&gt;

&lt;div class=&#34;pswp__scroll-wrap&#34;&gt;
    
    &lt;div class=&#34;pswp__container&#34;&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    
    &lt;div class=&#34;pswp__ui pswp__ui--hidden&#34;&gt;
    &lt;div class=&#34;pswp__top-bar&#34;&gt;
      
      &lt;div class=&#34;pswp__counter&#34;&gt;&lt;/div&gt;
      &lt;button class=&#34;pswp__button pswp__button--close&#34; title=&#34;Close (Esc)&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--share&#34; title=&#34;Share&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--fs&#34; title=&#34;Toggle fullscreen&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--zoom&#34; title=&#34;Zoom in/out&#34;&gt;&lt;/button&gt;
      
      
      &lt;div class=&#34;pswp__preloader&#34;&gt;
        &lt;div class=&#34;pswp__preloader__icn&#34;&gt;
          &lt;div class=&#34;pswp__preloader__cut&#34;&gt;
            &lt;div class=&#34;pswp__preloader__donut&#34;&gt;&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;pswp__share-modal pswp__share-modal--hidden pswp__single-tap&#34;&gt;
      &lt;div class=&#34;pswp__share-tooltip&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--left&#34; title=&#34;Previous (arrow left)&#34;&gt;
    &lt;/button&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--right&#34; title=&#34;Next (arrow right)&#34;&gt;
    &lt;/button&gt;
    &lt;div class=&#34;pswp__caption&#34;&gt;
      &lt;div class=&#34;pswp__caption__center&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;style&gt;
    .gallery {  }
    .gallery img { width: 100%; height: auto; }
    .gallery figure { display: block; float: left; margin: 0 5px 5px 0; width: 200px; }
    .gallery figcaption { display: none; }
    .gallery div.title { font-weight: bold; }
    span[itemprop=&#34;copyrightHolder&#34;] { color : #888; float: right; }
    span[itemprop=&#34;copyrightHolder&#34;]:before { content: &#34;Foto: &#34;; }
    img[itemprop=&#34;thumbnail&#34;]{ width: 200px; }
&lt;/style&gt;


&lt;script&gt;initPhotoSwipeFromDOM(&#39;.gallery&#39;);&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;And here the slides of the presentation:&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/79aLKAZjsSsL5i&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Thanks to all guests for coming, hacking, and the good discussions. Special thanks to Prof. Krieger and Marcel Großmann for the awesome support from University.
&lt;br /&gt;&lt;br /&gt;
The next Docker Meetup probably will take place on February the 25th. Save the date! Details will follow soon, stay tuned!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/MathiasRenner&#34;&gt;@MathiasRenner&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to compile Go on any ARM device</title>
      <link>http://blog.hypriot.com/post/how-to-compile-go-on-arm/</link>
      <pubDate>Thu, 31 Dec 2015 18:47:24 +0100</pubDate>
      
      <guid>http://blog.hypriot.com/post/how-to-compile-go-on-arm/</guid>
      <description>

&lt;p&gt;As for today, up to the latest Go version 1.5.2 there is no official binary release
of the Go runtime available for ARM devices. Maybe you can install it as
a package from your operating system, but these packages are almost outdated.&lt;/p&gt;

&lt;p&gt;For this reason, anyone who wants to use GOLANG (or Go for short) on an ARM device has to compile
it by himself. This is a cumbersome and time consuming task, which sometimes leads
to bad results.&lt;/p&gt;

&lt;p&gt;To cover these issues, we&amp;rsquo;ll explain in this short and basic tutorial how to compile
and test the Go compiler runtime by yourself. We&amp;rsquo;d like to cover all the details you&amp;rsquo;ll
need from the ground up. And with having this basic understanding then it&amp;rsquo;s easier
for everybody to build and use the Go compiler in a consistent and reproducible way.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s get started with building your own Go environment on ARM&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;let-s-go-on-arm:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;Let&amp;rsquo;s Go on ARM&lt;/h3&gt;

&lt;p&gt;As a member of the Hypriot team I&amp;rsquo;ll show you all the necessary steps on a
Raspberry Pi 2 board. Together we&amp;rsquo;ll first install the operating system with
flashing a SD card with HypriotOS and then installing all the build tools we&amp;rsquo;ll
need to bootstrap a complete Go development environment.&lt;/p&gt;

&lt;p&gt;These steps are quite similar for almost every other Linux distro, so I&amp;rsquo;m assuming you&amp;rsquo;ll
need just a short time to adjust the build steps for any Ubuntu, Debian, ArchLinux
or other Linux OS on your ARM device of choice.&lt;/p&gt;

&lt;h3 id=&#34;bootstrap-the-building-system:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;Bootstrap the building system&lt;/h3&gt;

&lt;p&gt;We need the following parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a Raspberry Pi 2 Model B&lt;/li&gt;
&lt;li&gt;a SD card with 4Gbyte or larger&lt;/li&gt;
&lt;li&gt;a power adapter or an USB cable to power the Raspberry Pi&lt;/li&gt;
&lt;li&gt;an ethernet cable to connect the Raspberry Pi to the internet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As soon as you have setup the hardware, we can start to install the OS and login
to our fresh and clean build system.&lt;/p&gt;

&lt;h4 id=&#34;a-flash-a-new-sd-card-with-hypriotos-0-6-1:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;a) Flash a new SD card with HypriotOS 0.6.1&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;m using a Mac to flash the SD card, so maybe you have to look for specific
instructions for your OS in one of our other posts.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget http://downloads.hypriot.com/hypriot-rpi-20151115-132854.img.zip
$ tar -xvf hypriot-rpi-20151115-132854.img.zip
$ flash --hostname golang-nutshell hypriot-rpi-20151115-132854.img
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;b-boot-the-raspberry-pi-2-with-hypriotos:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;b) Boot the Raspberry Pi 2 with HypriotOS&lt;/h4&gt;

&lt;p&gt;Just insert the SD card into your Raspberry Pi 2, connect the Ethernet cable
between the Raspi and your Internet router/switch and power on the Raspi.&lt;/p&gt;

&lt;p&gt;Within one or two minutes the Raspi is booted and has already configured the SD card
for the first time to it&amp;rsquo;s full size. We defined the specific hostname &lt;code&gt;golang-nutshell&lt;/code&gt;
for the Raspi, so we can lookup the device on our network.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ping -c 3 golang-nutshell.local

PING golang-nutshell.local (192.168.2.116): 56 data bytes
64 bytes from 192.168.2.116: icmp_seq=0 ttl=64 time=5.337 ms
64 bytes from 192.168.2.116: icmp_seq=1 ttl=64 time=6.142 ms
64 bytes from 192.168.2.116: icmp_seq=2 ttl=64 time=6.781 ms

--- golang-nutshell.local ping statistics ---
3 packets transmitted, 3 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 5.337/6.087/6.781/0.591 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;c-prepare-ssh-for-login:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;c) Prepare SSH for login&lt;/h4&gt;

&lt;p&gt;In case you used the same hostname or IP address before, you should clean your
SSH cache with the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-keygen -R golang-nutshell.local
$ ssh-keygen -R 192.168.2.116
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, login to your Raspi with the standard username=&lt;code&gt;pi&lt;/code&gt; and password=&lt;code&gt;raspberry&lt;/code&gt;,
or you can optionally just setup SSH with your SSH credentials.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-copy-id pi@golang-nutshell.local
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;d-login-to-your-raspberry-pi:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;d) Login to your Raspberry Pi&lt;/h4&gt;

&lt;p&gt;Once the Raspi and SSH access is configured, we can login and start working on
our task to compile Go from the source code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh pi@golang-nutshell.local
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;e-install-all-the-required-build-dependencies:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;e) Install all the required build dependencies&lt;/h4&gt;

&lt;p&gt;In order to build Go 1.5 we need first a running Go 1.4 compiler on our system.
So, we&amp;rsquo;ll start our journey with building the Go 1.4 compiler first.&lt;/p&gt;

&lt;p&gt;Next we have to consider that Go 1.4.x has to be built with a &lt;code&gt;gcc&lt;/code&gt; compiler,
because the Go 1.4 compiler is written in C code.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s install all the necessary build dependencies. Some of these packages are
already pre-installed with HypriotOS, but I&amp;rsquo;d like to list all of them here so you
can easily replay this tutorial on a different Linux distro as well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get install -y curl gcc git-core
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;download-go-1-4-3-source-tarball-and-compile-it:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;Download Go 1.4.3 source tarball and compile it&lt;/h3&gt;

&lt;p&gt;The GOLANG team provides all the Go sources for all the different versions as
easy to download and install tarballs. But it&amp;rsquo;s not clearly documented how to compile
and package it the right way to get a package for a binary release later on.&lt;/p&gt;

&lt;p&gt;Ok, so let&amp;rsquo;s explain these steps in detail and you&amp;rsquo;ll get to know all the important
parts. After all it&amp;rsquo;s just easy to make some mistakes and so we&amp;rsquo;ll try to break
the steps down for easy understanding.&lt;/p&gt;

&lt;h4 id=&#34;a-download-the-go-1-4-3-source-code:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;a) Download the Go 1.4.3 source code&lt;/h4&gt;

&lt;p&gt;Maybe some of you will be asking, why I&amp;rsquo;m extracting the Go source code into the
directory &lt;code&gt;/usr/local/go&lt;/code&gt; and running the gcc compiler as a &lt;code&gt;root&lt;/code&gt; user.
I&amp;rsquo;m coming back later on to the reasons behind, but for now you should know it&amp;rsquo;s just
important for creating the binary package.&lt;/p&gt;

&lt;p&gt;You can see, I&amp;rsquo;m downloading the source tarball and extract it right away in a
single step, but if you like you can break this into two steps as well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo rm -fr /usr/local/go
$ curl -sSL https://storage.googleapis.com/golang/go1.4.3.src.tar.gz | sudo tar -xz -C /usr/local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively using two steps:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo rm -fr /usr/local/go
$ curl -O https://storage.googleapis.com/golang/go1.4.3.src.tar.gz
$ sudo tar -xzf go1.4.3.src.tar.gz -C /usr/local
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;b-compile-go-1-4-3-without-running-the-tests:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;b) Compile Go 1.4.3 without running the tests&lt;/h4&gt;

&lt;p&gt;We compile Go now from within this installation directory and please we warned
it will take some time. On a Raspberry Pi 2 with it&amp;rsquo;s four ARMv7 cores it&amp;rsquo;s quite fast
enough, but on a slower machine it can take hours!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /usr/local/go/src
$ time sudo ./make.bash

# Building C bootstrap tool.
cmd/dist
...
---
Installed Go for linux/arm in /usr/local/go
Installed commands in /usr/local/go/bin

real	10m41.755s
user	12m8.140s
sys	0m46.860s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As soon as we can read the message &lt;code&gt;Installed Go for linux/arm in /usr/local/go&lt;/code&gt;
we know the build was successful and we can use the Go compiler right away.&lt;/p&gt;

&lt;h4 id=&#34;c-test-running-the-go-1-4-3-locally:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;c) Test running the Go 1.4.3 locally&lt;/h4&gt;

&lt;p&gt;According to the fact that we used the standard installation path in &lt;code&gt;/usr/local/go&lt;/code&gt;,
we are now able to use Go 1.4.3 directly on our Raspi. The only thing we need is
to define the PATH variable in order that all the Go tools and programs can be used
from the command line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export PATH=/usr/local/go/bin:$PATH
$ go version

go version go1.4.3 linux/arm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, we do have successfully compiled Go 1.4.3 on our Raspberry Pi and can
use it now right away. This process lasts some time and we don&amp;rsquo;t like to repeat
this much often, right? And on the other side, did you recognized that we didn&amp;rsquo;t
run any tests at all?&lt;/p&gt;

&lt;p&gt;Running the Go tests at compile time is quite easy, just run &lt;code&gt;./all.bash&lt;/code&gt; instead
of &lt;code&gt;./make.bash&lt;/code&gt;. But this will take way much longer and typically the tests will
fail on a Raspberry Pi 2 and maybe on other similar devices too. In this case it&amp;rsquo;s
better to compile Go an run the tests on a reliable machine like the
&lt;a href=&#34;https://www.scaleway.com&#34;&gt;Scaleway&lt;/a&gt; cloud servers.&lt;/p&gt;

&lt;h3 id=&#34;package-go-1-4-3-as-a-binary-tarball:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;Package Go 1.4.3 as a binary tarball&lt;/h3&gt;

&lt;p&gt;Maybe some of you already know, that the GOLANG team is providing Go binary releases
for the most common operating systems. But unfortunately not for ARM.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s create our own Go binary tarball in the exact same way like the originals,
because then it&amp;rsquo;s easier for us using the exact same ways and scripts when
we&amp;rsquo;d like to install it on our new ARM machines as well.&lt;/p&gt;

&lt;h4 id=&#34;a-analyse-the-original-go-binary-tarball:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;a) Analyse the original Go binary tarball&lt;/h4&gt;

&lt;p&gt;We can find the official GOLANG binary releases on their download page.
So let&amp;rsquo;s just google for &amp;ldquo;golang download&amp;rdquo; and we&amp;rsquo;ll get to their website
&lt;a href=&#34;https://golang.org/dl/&#34;&gt;Downloads - The Go Programming Language&lt;/a&gt; and select
Go 1.4.3 for a Linux on Intel 64-bit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -O https://storage.googleapis.com/golang/go1.4.3.linux-amd64.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s analyze the structure of this tarball in more detail.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar -vtf go1.4.3.linux-amd64.tar.gz | head -10
drwxr-xr-x 0/0               0 2015-09-23 06:43 go/
-rw-r--r-- 0/0           17575 2015-09-23 06:37 go/AUTHORS
-rw-r--r-- 0/0           24564 2015-09-23 06:37 go/CONTRIBUTORS
-rw-r--r-- 0/0            1479 2015-09-23 06:37 go/LICENSE
-rw-r--r-- 0/0            1303 2015-09-23 06:37 go/PATENTS
-rw-r--r-- 0/0            1112 2015-09-23 06:37 go/README
-rw-r--r-- 0/0               7 2015-09-23 06:38 go/VERSION
drwxr-xr-x 0/0               0 2015-09-23 06:37 go/api/
-rw-r--r-- 0/0             524 2015-09-23 06:37 go/api/README
-rw-r--r-- 0/0           19302 2015-09-23 06:37 go/api/except.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tarball has some special settings we should really keep care about it.
First of all, the user and group id&amp;rsquo;s &lt;code&gt;0/0&lt;/code&gt; are all numeric and showing this
is a &lt;code&gt;root/root&lt;/code&gt; user.
Next to notice is that the directory name is always starting with &lt;code&gt;go/&lt;/code&gt; and
without any leading slash &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These are all just small details, but we have to
make sure, we create our own tarball the same way - otherwise it will work on some
machines and on some we&amp;rsquo;ll get some wired issues, because we don&amp;rsquo;t know which
command a different user will use to install the binary tarball on his machine.&lt;/p&gt;

&lt;h4 id=&#34;b-create-our-own-go-binary-tarball:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;b) Create our own Go binary tarball&lt;/h4&gt;

&lt;p&gt;With this details in mind we can create our own binary release tarball easily.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar -czf ~/go1.4.3.linux-armv7.tar.gz -C /usr/local go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or alternatively, if your &lt;code&gt;tar&lt;/code&gt; command does not support the &lt;code&gt;-C&lt;/code&gt; flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /usr/local
$ tar -czf ~/go1.4.3.linux-armv7.tar.gz go
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;c-prove-our-own-go-binary-tarball:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;c) Prove our own Go binary tarball&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ tar -vtf go1.4.3.linux-armv7.tar.gz | head -10
drwxr-xr-x root/root         0 2015-12-31 14:06 go/
drwxr-xr-x root/root         0 2015-12-31 14:16 go/bin/
-rwxr-xr-x root/root   7659728 2015-12-31 14:16 go/bin/go
-rwxr-xr-x root/root   2899312 2015-12-31 14:16 go/bin/gofmt
-rw-r--r-- root/root      1303 2015-09-23 06:37 go/PATENTS
-rw-r--r-- root/root      1479 2015-09-23 06:37 go/LICENSE
drwxr-xr-x root/root         0 2015-09-23 06:38 go/test/
-rw-r--r-- root/root       722 2015-09-23 06:37 go/test/sinit_run.go
-rw-r--r-- root/root      2280 2015-09-23 06:37 go/test/nil.go
-rw-r--r-- root/root       716 2015-09-23 06:37 go/test/typeswitch3.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, not exactly the same as the original. The user and group id&amp;rsquo;s are not in numerical form, but all the other details seems to be correct. We just have to include the &lt;code&gt;--numeric-owner&lt;/code&gt; flag and we&amp;rsquo;ll get a perfect result.&lt;/p&gt;

&lt;h4 id=&#34;d-recommended-way-to-package-the-go-binary-tarball:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;d) Recommended way to package the Go binary tarball&lt;/h4&gt;

&lt;p&gt;With all the details proved well, we do have now a way how we should package the
Go pre-compiled binary tarball. As long as your ARM Linux system supports the &lt;code&gt;tar&lt;/code&gt;
command with all the necessary flags, we can use this single command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar --numeric-owner -czf ~/go1.4.3.linux-armv7.tar.gz -C /usr/local go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It can happen that your &lt;code&gt;tar&lt;/code&gt; version doesn&amp;rsquo;t support the &lt;code&gt;--numeric-owner&lt;/code&gt; flag,
so just leave this out. When your &lt;code&gt;tar&lt;/code&gt; doesn&amp;rsquo;t support the &lt;code&gt;-z&lt;/code&gt; compresssion flag,
it can be done in two steps as well. And if &lt;code&gt;-C&lt;/code&gt; flag isn&amp;rsquo;t supported, we can
work around this too.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /usr/local
$ tar --numeric-owner -cf ~/go1.4.3.linux-armv7.tar go
$ gzip ~/go1.4.3.linux-armv7.tar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, here is our almost perfect own-built pre-compiled Go tarball, which
we could install within just seconds on any of our ARM devices.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar -vtf go1.4.3.linux-armv7.tar.gz | head -10
drwxr-xr-x 0/0               0 2015-12-31 14:06 go/
drwxr-xr-x 0/0               0 2015-12-31 14:16 go/bin/
-rwxr-xr-x 0/0         7659728 2015-12-31 14:16 go/bin/go
-rwxr-xr-x 0/0         2899312 2015-12-31 14:16 go/bin/gofmt
-rw-r--r-- 0/0            1303 2015-09-23 06:37 go/PATENTS
-rw-r--r-- 0/0            1479 2015-09-23 06:37 go/LICENSE
drwxr-xr-x 0/0               0 2015-09-23 06:38 go/test/
-rw-r--r-- 0/0             722 2015-09-23 06:37 go/test/sinit_run.go
-rw-r--r-- 0/0            2280 2015-09-23 06:37 go/test/nil.go
-rw-r--r-- 0/0             716 2015-09-23 06:37 go/test/typeswitch3.go
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;install-and-test-the-go-1-4-3-binary-tarball:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;Install and test the Go 1.4.3 binary tarball&lt;/h3&gt;

&lt;p&gt;Honestly, this was a long and dirty road, just to get a Go 1.4.3 compiler so that
we can start developing our Go code and compiling our real world tasks on an
ARM device. But with all these details we know now exactly how to create and package
a Go binary release as a pre-compiled tarball.&lt;/p&gt;

&lt;p&gt;And finally, let&amp;rsquo;s see how easy we do have it now, when we have a Go binary release
for our ARM device available. It&amp;rsquo;s really that damn simple to install Go and just using it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo rm -fr /usr/local/go
$ sudo tar -xzf go1.4.3.linux-armv7.tar.gz -C /usr/local
$ export PATH=/usr/local/go/bin:$PATH
$ go version

go version go1.4.3 linux/arm
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;compiling-testing-and-packaging-go-1-5-2:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;Compiling, testing and packaging Go 1.5.2&lt;/h3&gt;

&lt;p&gt;With all our previous detailed work this part is now a really easy task.&lt;/p&gt;

&lt;p&gt;As the first step, before we&amp;rsquo;re able to compile Go 1.5.2 on our ARM board, we have
to install a Go 1.4.3 compiler. Luckily we have already a pre-compiled Go 1.4.3
which we can use here. But we should install it in a different location, which is
the recommended way according to the GOLANG team.&lt;/p&gt;

&lt;p&gt;Install the Go 1.4.3 binary release from our own tarball:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rm -fr $HOME/go1.4
$ mkdir -p $HOME/go1.4
$ tar -xzf go1.4.3.linux-armv7.tar.gz -C $HOME/go1.4 --strip-components=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can download the Go 1.5.2 source tarball and bootstrap/compile it with Go 1.4.3:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo rm -fr /usr/local/go
$ curl -sSL https://storage.googleapis.com/golang/go1.5.2.src.tar.gz | sudo tar -xz -C /usr/local

$ cd /usr/local/go/src
$ time sudo GOROOT_BOOTSTRAP=/home/pi/go1.4 ./make.bash

##### Building Go bootstrap tool.
...
---
Installed Go for linux/arm in /usr/local/go
Installed commands in /usr/local/go/bin

real	11m14.203s
user	26m29.730s
sys	1m18.470s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s package Go 1.5.2 as a binary tarball, using our recommended way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar --numeric-owner -czf ~/go1.5.2.linux-armv7.tar.gz -C /usr/local go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prove the Go 1.5.2 binary package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar -vtf go1.5.2.linux-armv7.tar.gz | head -10
drwxr-xr-x 0/0               0 2015-12-31 17:08 go/
drwxr-xr-x 0/0               0 2015-12-31 17:18 go/bin/
-rwxr-xr-x 0/0         9004984 2015-12-31 17:18 go/bin/go
-rwxr-xr-x 0/0         3163768 2015-12-31 17:17 go/bin/gofmt
-rw-r--r-- 0/0            1519 2015-12-03 01:52 go/README.md
-rw-r--r-- 0/0            1303 2015-12-03 01:52 go/PATENTS
-rw-r--r-- 0/0            1479 2015-12-03 01:52 go/LICENSE
drwxr-xr-x 0/0               0 2015-12-03 01:53 go/test/
-rw-r--r-- 0/0             595 2015-12-03 01:53 go/test/sinit_run.go
-rw-r--r-- 0/0            2280 2015-12-03 01:53 go/test/nil.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install and test the Go 1.5.2 binary tarball&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo rm -fr /usr/local/go
$ sudo tar -xzf go1.5.2.linux-armv7.tar.gz -C /usr/local
$ export PATH=/usr/local/go/bin:$PATH
$ go version

go version go1.5.2 linux/arm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wow, this time it was pretty easy and completed with a few commands only.
But we didn&amp;rsquo;t run any tests at all. And honestly, as a developer I just like
to install and use the Go compiler - I don&amp;rsquo;t like to compile it by myself,
so I recommend using a Go binary release would be the best way!&lt;/p&gt;

&lt;h3 id=&#34;key-takeaways:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;Key takeaways&lt;/h3&gt;

&lt;p&gt;As you can clearly see, it&amp;rsquo;s really the easiest and preferred way to install a
Go binary release instead of compiling the Go compiler every time from source.
Especially for some slow ARM devices it can take hours and will sometimes lead
to some confusing problems too.&lt;/p&gt;

&lt;p&gt;When you prefer to use a completely tested Go binary release it&amp;rsquo;s even more desired
to use pre-compiled and successfully tested Go versions for ARMv6, ARMv7 and
even later for the 64-bit ARM devices as well.&lt;/p&gt;

&lt;p&gt;The really great news here is, that  the GOLANG team has acknowleged to build
and deliver the future Go releases from version 1.6 on with pre-compiled tarballs - at least
for ARMv6. The difference between ARMv6 and ARMv7 are absolutely marginal for Go,
because the generated machine code doesn&amp;rsquo;t use any advanced instructions from the
ARMv7 instruction set at all and ARMv7 just uses a few more registers - that&amp;rsquo;s all.&lt;/p&gt;

&lt;p&gt;And in the meantime, we&amp;rsquo;ve already done all the hard work for you and created the
Go binary releases for 1.4.3, 1.5.1 and 1.5.2. Everything is open source and
available on our GitHub repo at &lt;a href=&#34;https://github.com/hypriot/golang-armbuilds&#34;&gt;https://github.com/hypriot/golang-armbuilds&lt;/a&gt;. From
here you can easily install a Go binary release within a few minutes with the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo rm -fr /usr/local/go
$ curl -sSL https://github.com/hypriot/golang-armbuilds/releases/download/v1.5.2/go1.5.2.linux-armv7.tar.gz | sudo tar -xz -C /usr/local
$ export PATH=/usr/local/go/bin:$PATH
$ go version

go version go1.5.2 linux/arm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is already a work in progress and we&amp;rsquo;re happy to get comments and pull-request
to improve the build task even more.&lt;/p&gt;

&lt;h3 id=&#34;feedback-please:204f85c7f3de7b1fb9d7b9a672da8cbd&#34;&gt;Feedback please!&lt;/h3&gt;

&lt;p&gt;Please send us your feedback on our &lt;a href=&#34;https://gitter.im/hypriot/talk&#34;&gt;Gitter channel&lt;/a&gt; or tweet your thoughts and ideas on this tutorial at &lt;a href=&#34;https://twitter.com/HypriotTweets&#34;&gt;@HypriotTweets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dieter &lt;a href=&#34;https://twitter.com/Quintus23M&#34;&gt;@Quintus23M&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing Hypriot Cluster Lab: Docker clustering as easy as it gets</title>
      <link>http://blog.hypriot.com/post/introducing-hypriot-cluster-lab-docker-clustering-as-easy-as-it-gets/</link>
      <pubDate>Tue, 08 Dec 2015 15:30:00 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/introducing-hypriot-cluster-lab-docker-clustering-as-easy-as-it-gets/</guid>
      <description>

&lt;p&gt;Today we wanna share something with you that we have been working on for the last couple of weeks. And we are pretty exited about it, too.
It is based on our beloved &lt;a href=&#34;http://blog.hypriot.com/post/get-your-all-in-one-docker-playground-now-hypriotos-reloaded/&#34;&gt;HypriotOS&lt;/a&gt; and makes it dead simple to build Docker clusters.&lt;/p&gt;

&lt;p&gt;Until now it was not exactly easy to get started with Docker clustering.
You would have needed specific knowledge and lots of time to manually configure the cluster and its individual nodes.&lt;/p&gt;

&lt;p&gt;Well, that&amp;rsquo;s now a thing of the past.&lt;/p&gt;

&lt;p&gt;May we introduce to you the newest member of the Hypriot family: &lt;strong&gt;The Hypriot Cluster Lab!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/cluster-lab-release-v01/cluster_lab.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;With the &lt;strong&gt;Hypriot Cluster Lab&lt;/strong&gt; it is just a matter of minutes to set up your own personal Docker cluster.
All you need is a couple of Raspberry Pi&amp;rsquo;s - 3, 5, 30 or even 100 - it is up to you - and our Hypriot Cluster Lab SD card image.&lt;/p&gt;

&lt;p&gt;We designed the Cluster Lab to be completely self-configuring, so there is nothing to configure or to set up.
Basically you just need to download our Cluster Lab SD card image and flash it onto a number of SD cards.
Then ensure that all your Pi&amp;rsquo;s have network connectivity, insert the SD cards and switch on power.
Everything else is taken care of automatically by our Cluster Lab.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker Clustering as easy as it gets!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we started out to develop the Cluster Lab we wanted to be able to create complex Raspberry Pi based clusters with an arbitrary number of nodes.
We wanted to directly jump to deploying all kind of interesting services on top of the cluster instead of being concerned with setting up the cluster itself.&lt;/p&gt;

&lt;p&gt;And well - we managed to pull this off by combining a number of great technologies.
For instance &lt;strong&gt;Avahi&lt;/strong&gt; for announcing/managing who is a master and who is a slave node in the cluster. &lt;strong&gt;VLAN&lt;/strong&gt; for isolating the cluster network from other existing networks.
&lt;strong&gt;DHCP&lt;/strong&gt; for automatically assigning IP addresses to slave nodes in the cluster network. &lt;strong&gt;Consul&lt;/strong&gt; as a service registry and key-value-store.
And of course a number of other Docker related technologies that we already provide in HypriotOS: &lt;strong&gt;Docker Engine&lt;/strong&gt;, &lt;strong&gt;Swarm&lt;/strong&gt; and &lt;strong&gt;Compose&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;These technologies work together seamlessly and form what we call the Hypriot Cluster Lab. On top of it we are now able to easily deploy all kind of cluster services.
We have a number of ideas where this can come in handy in the future! Think Kubernetes for instance or Redis cluster.&lt;/p&gt;

&lt;p&gt;The Cluster Lab is still a bit rough around the edges and is more technology preview than production ready software, but we think it demonstrates the basic use case very well and shows the potential.
So for the coming weeks we want to gather feedback and make it more polished and resilient.
After that our main goal is to make it possible that all kind of cluster scenarios can be deployed on top of the Cluster Lab with just one command.
We want to make this possible by providing a kind of plugin-mechanism so that the community can help us in enabling many more interesting cluster use cases.&lt;/p&gt;

&lt;p&gt;The main reason that makes us really excited about the Cluster Lab, is that we think that there is great potential in using it as an educational tool in schools, universities or in commercial trainings.
It can be used to teach about Linux, Networking, Clustering, Microservices and so much more!&lt;/p&gt;

&lt;p&gt;And with the latest member of the Raspberry Pi family - the &lt;a href=&#34;http://swag.raspberrypi.org/collections/pi-zero/products/pi-zero&#34;&gt;Pi Zero&lt;/a&gt; - it got really cheap to have your own cluster. For about 50 bucks you are able to have a two to three node physical cluster.
And believe us - having physical nodes and being able to pull the network or power to simulate different cluster scenarios makes all the difference.
Working with &lt;strong&gt;real hardware&lt;/strong&gt; compared to a virtual environment (e.g. Vagrant) &lt;strong&gt;has a certain raw and primal feel about it&lt;/strong&gt; that we really like. :)&lt;/p&gt;

&lt;p&gt;So enough talking - let&amp;rsquo;s get our hands dirty - shall we?&lt;/p&gt;

&lt;h3 id=&#34;prerequisites-or-what-you-gonna-need-to-follow-along:8280d5ff2f6dfae78180ad5a72400c1a&#34;&gt;Prerequisites or what you gonna need to follow along&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;at least two &lt;strong&gt;Raspberry Pi&amp;rsquo;s&lt;/strong&gt;: Model 1 or 2 - both will do&lt;/li&gt;
&lt;li&gt;for each Raspberry Pi a &lt;strong&gt;power supply&lt;/strong&gt;, a &lt;strong&gt;MicroSD card&lt;/strong&gt; and a &lt;strong&gt;network cable&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;network switch&lt;/strong&gt; that is somehow connected to the Internet and a DHCP server; both is usually provided by your typical off-the-shelf home router&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, the switch should not filter IEEE 802.1Q VLAN flags out of network packets. Usually this feature is provided even by cheap switches. If you wanna be safe, go through a small test to figure this out. The test is &lt;a href=&#34;https://github.com/hypriot/cluster-lab/blob/master/README.md#troubleshooting&#34;&gt;listed here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;download-flash-boot-enjoy:8280d5ff2f6dfae78180ad5a72400c1a&#34;&gt;Download. Flash. Boot. Enjoy!&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;Download&lt;/strong&gt; the &lt;a href=&#34;http://downloads.hypriot.com/hypriot_20160121-235123_clusterlab.img.zip&#34;&gt;Hypriot Cluster Lab SD card image&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Flash the image to your SD cards your way or use &lt;a href=&#34;https://github.com/hypriot/flash&#34;&gt;our funky flash script&lt;/a&gt; which makes flashing the SD cards so much easier.&lt;/p&gt;

&lt;p&gt;Another advantage of our flash script is that it also allows you to give your cluster nodes unique hostnames:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ flash --hostname cl-master http://downloads.hypriot.com/hypriot_20160121-235123_clusterlab.img.zip
$ flash --hostname cl-node-1 http://downloads.hypriot.com/hypriot_20160121-235123_clusterlab.img.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Put the freshly flashed SD cards in each node&amp;rsquo;s SD card slot.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Power on &lt;strong&gt;only one&lt;/strong&gt; node. This node will automatically become the master node of the cluster. It might take up to two minutes until the master node is fully functional.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; Find out the IP address of your master node. One way to do this is via &lt;a href=&#34;https://nmap.org/&#34;&gt;nmap&lt;/a&gt; and is described &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-and-linux-on-the-raspberry-pi/#ensure-everything-works:8814904f208dcaade82991443c7514e0&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt; Use the IP (from step 5) or the hostname (from step 2) to point your browser to &lt;code&gt;http://{IP or hostname of the master node}:8500&lt;/code&gt;. In our case &lt;code&gt;http://cl-master:8500&lt;/code&gt; opens the Consul web interface and our cluster master node is displayed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/cluster-lab-release-v01/consul_cl_master.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.&lt;/strong&gt; Power on all the remaining cluster nodes only if step 5 was successful. After about 2 minutes you should see the rest of them being listed in the Consul web interface, too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/cluster-lab-release-v01/consul_cl_master_and_nodes.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The last step makes the cluster fully operational and we are now able to work with the cluster in earnest.&lt;/p&gt;

&lt;h3 id=&#34;babysteps-with-our-cluster-lab:8280d5ff2f6dfae78180ad5a72400c1a&#34;&gt;Babysteps with our Cluster Lab&lt;/h3&gt;

&lt;p&gt;Congratulations, you got your Hypriot Cluster Lab up and running! That was easy, wasn&amp;rsquo;t it?&lt;/p&gt;

&lt;p&gt;The Cluster Lab is using &lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;Docker Swarm&lt;/a&gt; for managing Docker containers on the nodes that make up the cluster.
Docker Swarm will distribute containers based on different distribution &lt;a href=&#34;https://docs.docker.com/swarm/scheduler/strategy/&#34;&gt;strategies&lt;/a&gt; to individual nodes.
Per default Docker Swarm uses the &lt;em&gt;spread&lt;/em&gt; strategy to evenly distribute container on cluster nodes.&lt;/p&gt;

&lt;p&gt;Working with Docker Swarm is easy. To start we first need to log into our cluster master:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh root@cl-master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There we can use the Docker Client to connect to the Swarm Manager instance. We do that by providing the &amp;lsquo;-H&amp;rsquo; flag to the &lt;code&gt;docker&lt;/code&gt; command.
This enables the Docker client to use the Docker Remote API for accessing the Swarm Manager.&lt;/p&gt;

&lt;p&gt;To display some basic info about the Swarm Cluster run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker -H cl-master:2378 info
Containers: 7
Images: 6
Role: primary
Strategy: spread
Filters: health, port, dependency, affinity, constraint
Nodes: 3
 cl-master: 192.168.200.1:2375
  └ Containers: 3
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.8 MiB
  └ Labels: executiondriver=native-0.2, kernelversion=4.1.12-hypriotos-v7+, operatingsystem=Raspbian GNU/Linux 8 (jessie), storagedriver=overlay
 cl-node-1: 192.168.200.115:2375
  └ Containers: 2
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.8 MiB
  └ Labels: executiondriver=native-0.2, kernelversion=4.1.12-hypriotos-v7+, operatingsystem=Raspbian GNU/Linux 8 (jessie), storagedriver=overlay
 cl-node-2: 192.168.200.113:2375
  └ Containers: 2
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.8 MiB
  └ Labels: executiondriver=native-0.2, kernelversion=4.1.12-hypriotos-v7+, operatingsystem=Raspbian GNU/Linux 8 (jessie), storagedriver=overlay
CPUs: 12
Total Memory: 2.84
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of the hostname &lt;code&gt;cl-master&lt;/code&gt; one can also use the IP address that is always fixed for the cluster master node: 192.168.200.1.&lt;/p&gt;

&lt;p&gt;Ok - it seems our Swarm cluster is truly up and running.&lt;/p&gt;

&lt;p&gt;Time to get a little bit more daring.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s spin up a web interface for managing our nodes called &lt;a href=&#34;https://github.com/crosbymichael/dockerui&#34;&gt;DockerUI&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker -H cl-master:2378 run -d -p 9000:9000 --env=&amp;quot;constraint:node==cl-master&amp;quot; --name dockerui hypriot/rpi-dockerui -e http://192.168.200.1:2378
51f2eb09ab48540eb4a052bbe07644487c3a0b29ca44a6217ea6aebf17b3df0c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most interesting part here is the env parameter &lt;code&gt;--env=&amp;quot;constraint:node==cl-master&amp;quot;&lt;/code&gt; which tells the Swarm Manager that we want to start our new container on the &lt;strong&gt;cl-master&lt;/strong&gt; node.
Without that the new container would be started by Docker Swarm on one of the nodes according to the &lt;em&gt;spread&lt;/em&gt; strategy.
By using the &amp;lsquo;constraint:node&amp;rsquo; label we are able to control on which node a container gets started.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s open the DockerUI with the following URL: &lt;code&gt;http://cl-master:9000&lt;/code&gt;.
If everything did work you should now see an overview of your running containers similar to this one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/cluster-lab-release-v01/dockerui.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Back to the command line we can see the same result by using the &lt;code&gt;docker ps&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker -H cl-master:2378 ps
CONTAINER ID        IMAGE                                                              COMMAND                  CREATED             STATUS              PORTS                          NAMES
51f2eb09ab48        hypriot/rpi-dockerui                                               &amp;quot;./dockerui -e http:/&amp;quot;   12 minutes ago      Up 12 minutes       192.168.200.1:9000-&amp;gt;9000/tcp   cl-master/dockerui
fca75c6b759a        hypriot/rpi-consul                                                 &amp;quot;/consul agent -serve&amp;quot;   About an hour ago   Up About an hour                                   cl-node-2/bin_consul_1
4bfa58ed2a07        hypriot/rpi-swarm                                                  &amp;quot;/swarm join --advert&amp;quot;   About an hour ago   Up About an hour    2375/tcp                       cl-node-2/bin_swarm_1
ec61f8f5d766        hypriot/rpi-consul                                                 &amp;quot;/consul agent -serve&amp;quot;   About an hour ago   Up About an hour                                   cl-node-1/bin_consul_1
75c7cb003639        0104b3a10aad7e9a3d38ca4dce652c73d195b87171675c7dbc114ae85a444831   &amp;quot;/swarm join --advert&amp;quot;   About an hour ago   Up About an hour    2375/tcp                       cl-node-1/bin_swarm_1
df027cd23e69        hypriot/rpi-swarm                                                  &amp;quot;/swarm manage consul&amp;quot;   2 hours ago         Up 2 hours          192.168.200.1:2378-&amp;gt;2375/tcp   cl-master/bin_swarmmanage_1
f6b11e9e4f07        hypriot/rpi-consul                                                 &amp;quot;/consul agent -serve&amp;quot;   2 hours ago         Up 2 hours                                         cl-master/bin_consul_1
8658010a4433        hypriot/rpi-swarm                                                  &amp;quot;/swarm join --advert&amp;quot;   2 hours ago         Up 2 hours          2375/tcp                       cl-master/bin_swarm_1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By now you should have gotten the hang of it and come to expect that you can use many of the Docker command line commands with Swarm, too.
And you are right - you just need to remember to use the &lt;code&gt;-H&lt;/code&gt; flag as part of the Docker command.&lt;/p&gt;

&lt;h3 id=&#34;getting-to-the-grown-up-stuff:8280d5ff2f6dfae78180ad5a72400c1a&#34;&gt;Getting to the grown-up stuff&lt;/h3&gt;

&lt;p&gt;After we did our first babysteps successfully it is now time for some serious grown-up stuff.
Certainly Docker multi-host networking can be considered serious stuff - don&amp;rsquo;t you think?&lt;/p&gt;

&lt;p&gt;First let&amp;rsquo;s see if we already have any networks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker -H cl-master:2378 network ls
NETWORK ID          NAME                DRIVER
d88253054dd4        cl-node-1/none      null
e78f9fc77a31        cl-node-2/bridge    bridge
12d2cb0e387d        cl-node-2/none      null
020bdb74ea43        cl-node-1/host      host
b39702828ebf        cl-node-1/bridge    bridge
c24764cf7077        cl-master/host      host
480319fbca22        cl-node-2/host      host
e5d7f7a69313        cl-master/bridge    bridge
7153745ef548        cl-master/none      null
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are the networks that are already present by default.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s add our own overlay network:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker -H cl-master:2378 network create -d overlay my-net
54583b74b0c5b678678db18b99a1148049640e3c4e6ac6f5cdfa0938b1399f3a
HypriotOS: root@cl-master in ~
$ docker -H cl-master:2378 network ls
NETWORK ID          NAME                DRIVER
7153745ef548        cl-master/none      null
c24764cf7077        cl-master/host      host
54583b74b0c5        my-net              overlay
480319fbca22        cl-node-2/host      host
e5d7f7a69313        cl-master/bridge    bridge
b39702828ebf        cl-node-1/bridge    bridge
d88253054dd4        cl-node-1/none      null
e78f9fc77a31        cl-node-2/bridge    bridge
12d2cb0e387d        cl-node-2/none      null
020bdb74ea43        cl-node-1/host      host
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see we now have successfully created our first Docker multi-node overlay network.
This overlay network is really useful. Any container started in this network can talk to any other container in the network by default.&lt;/p&gt;

&lt;p&gt;In order to see how this works we are going to start two containers on different cluster nodes that will talk to each other.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker -H cl-master:2378 run -itd --name=webserver --net=my-net --env=&amp;quot;constraint:node==cl-node-1&amp;quot; hypriot/rpi-nano-httpd
378ddbe05781360f57f869f9aec7ad4c2cd703047cb5da11a9a7f395501bc533
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listing the running containers in our cluster we now have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker -H cl-master:2378 ps
CONTAINER ID        IMAGE                                                              COMMAND                  CREATED             STATUS              PORTS                          NAMES
378ddbe05781        hypriot/rpi-nano-httpd                                             &amp;quot;/httpd 80&amp;quot;              26 seconds ago      Up 23 seconds       80/tcp                         cl-node-1/webserver
51f2eb09ab48        hypriot/rpi-dockerui                                               &amp;quot;./dockerui -e http:/&amp;quot;   41 minutes ago      Up 40 minutes       192.168.200.1:9000-&amp;gt;9000/tcp   cl-master/dockerui
fca75c6b759a        hypriot/rpi-consul                                                 &amp;quot;/consul agent -serve&amp;quot;   About an hour ago   Up About an hour                                   cl-node-2/bin_consul_1
4bfa58ed2a07        hypriot/rpi-swarm                                                  &amp;quot;/swarm join --advert&amp;quot;   About an hour ago   Up About an hour    2375/tcp                       cl-node-2/bin_swarm_1
ec61f8f5d766        hypriot/rpi-consul                                                 &amp;quot;/consul agent -serve&amp;quot;   About an hour ago   Up About an hour                                   cl-node-1/bin_consul_1
75c7cb003639        0104b3a10aad7e9a3d38ca4dce652c73d195b87171675c7dbc114ae85a444831   &amp;quot;/swarm join --advert&amp;quot;   2 hours ago         Up 2 hours          2375/tcp                       cl-node-1/bin_swarm_1
df027cd23e69        hypriot/rpi-swarm                                                  &amp;quot;/swarm manage consul&amp;quot;   3 hours ago         Up 3 hours          192.168.200.1:2378-&amp;gt;2375/tcp   cl-master/bin_swarmmanage_1
f6b11e9e4f07        hypriot/rpi-consul                                                 &amp;quot;/consul agent -serve&amp;quot;   3 hours ago         Up 3 hours                                         cl-master/bin_consul_1
8658010a4433        hypriot/rpi-swarm                                                  &amp;quot;/swarm join --advert&amp;quot;   3 hours ago         Up 3 hours          2375/tcp                       cl-master/bin_swarm_1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Everything so far looks good. So let&amp;rsquo;s get the final piece working by starting a web client that talks to our webserver.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker -H cl-master:2378 run -it --rm --net=my-net --env=&amp;quot;contraint:node==cl-node-2&amp;quot; hypriot/armhf-busybox wget -O- http://webserver/index.html
Connecting to webserver (10.0.0.2:80)
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Pi armed with Docker by Hypriot&amp;lt;/title&amp;gt;
  &amp;lt;body style=&amp;quot;width: 100%; background-color: black;&amp;quot;&amp;gt;
    &amp;lt;div id=&amp;quot;main&amp;quot; style=&amp;quot;margin: 100px auto 0 auto; width: 800px;&amp;quot;&amp;gt;
      &amp;lt;img src=&amp;quot;pi_armed_with_docker.jpg&amp;quot; alt=&amp;quot;pi armed with docker&amp;quot; style=&amp;quot;width: 800px&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
-                    100% |*******************************|   304   0:00:00 ETA
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see we have been able to spin up a busybox container on another node.
We used it to fetch the index.html page with the &lt;code&gt;wget&lt;/code&gt; command from our webserver container.&lt;/p&gt;

&lt;p&gt;The simplicity of this illustrates how powerful Docker networking has become.
Creating this kind of a setup with - for example &lt;a href=&#34;http://openvswitch.org/&#34;&gt;OpenVSwitch&lt;/a&gt; - was way more complicated in the past.&lt;/p&gt;

&lt;p&gt;It is possible to create far more complex scenarios with our Cluster Lab, but hopefully we were able to demonstrate a bit of the potential it has.
We will write more about those in some future blog posts.&lt;/p&gt;

&lt;p&gt;Until then we hope that it was fun to follow along and that we could infect you a little bit with our passion for Docker clustering.&lt;/p&gt;

&lt;p&gt;You can find the source code of the Hypriot Cluster Lab at &lt;a href=&#34;https://github.com/hypriot/cluster-lab&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, use the comments below to give us feedback, discuss this post on &lt;a href=&#34;https://news.ycombinator.com/item?id=10696752&#34;&gt;HackerNews&lt;/a&gt; and share this post on Twitter, Google or Facebook.&lt;/p&gt;

&lt;p&gt;Andreas &amp;amp; Mathias&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The family of ARM hardware for Docker got two more children – at least!</title>
      <link>http://blog.hypriot.com/post/family_arm_hardware_for_docker_more_children/</link>
      <pubDate>Mon, 07 Dec 2015 19:55:55 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/family_arm_hardware_for_docker_more_children/</guid>
      <description>

&lt;p&gt;Today we are proud to present a guest contribution from the community. Marcel Großmann, a research assistant at the University of Bamberg, Germany, shows in a short test that the hardware family on which our ARMed Docker runs is probably much larger than we ever thought. But rather than anticipating the punch line, let&amp;rsquo;s give the word to him!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&#34;testing-docker-on-new-platforms:b445d62276b06d5ff303032c7603f78a&#34;&gt;Testing Docker on new Platforms&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;(Marcel is now speaking)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hello everyone!
First of all, thanks to Hypriot for porting Docker to the ARM platform!&lt;/p&gt;

&lt;p&gt;Recently, I tested their port of Docker (v 1.9.1) on two platforms different from the Raspberry Pi and HypriotOS. This time, I had a look at  &lt;strong&gt;&lt;a href=&#34;http://www.armbian.com/&#34;&gt;armbian&lt;/a&gt;&lt;/strong&gt; as operating system, which ships a Linux image based on Debian Wheezy and includes the Vanilla kernel 4.2.6. As hardware I picked the &lt;strong&gt;Cubietruck&lt;/strong&gt; and &lt;strong&gt;Lamobo R1&lt;/strong&gt; board. The first one, Cubietruck, has e.g. a S-ATA port to attach hard drives and an integrated WiFi and Bluetooth controller:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.armbian.com/wp-content/uploads/2013/12/cubietruck1.png&#34; alt=&#34;&#34; width=&#34;600&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The second one, the Lamobo R1, is also called BananaPi R1. It comes with an integrated 5-port switch fabric and a WiFi modul.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.armbian.com/wp-content/uploads/2015/08/lamobo-r1.png&#34; alt=&#34;&#34; width=&#34;600&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The configuration of both devices shows for &lt;code&gt;uname -a&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Linux XXX 4.2.6-sunxi #1 SMP Sun Nov 29 10:33:44 CET 2015 armv7l GNU/Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Debian release depicted by &lt;code&gt;lsb_release -a&lt;/code&gt; shows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Distributor ID:	Debian
Description:	Debian GNU/Linux 7.9 (wheezy)
Release:	7.9
Codename:	wheezy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install &lt;code&gt;docker-hypriot&lt;/code&gt;, I added the Debian package repository of Hypriot to my package manager:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://packagecloud.io/gpg.key | sudo apt-key add -

sudo bash -c &#39;cat &amp;gt; /etc/apt/sources.list.d/Hypriot_Schatzkiste.list&#39; &amp;lt;&amp;lt; EOF
deb https://packagecloud.io/Hypriot/Schatzkiste/debian/ wheezy main
EOF

sudo apt-get update
sudo apt-get -y install --no-install-recommends docker-hypriot
sudo apt-get -y install cgroupfs-mount

# Add your user to group &#39;Docker&#39; so you do not need to type `sudo` before each Docker command. 
sudo usermod -aG docker $(whoami)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nevertheless, Docker is not running, if your glibc version is &amp;lt; &lt;strong&gt;2.15&lt;/strong&gt;. Test your version with &lt;code&gt;ldd --version&lt;/code&gt;. To update glibc, execute these commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo bash -c &#39;echo &amp;quot;deb http://ftp.debian.org/debian sid main&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list&#39;
sudo apt-get update
sudo apt-get -yqq -t sid install libc6 libc6-dev libc6-dbg
sudo sed -i &amp;quot;/sid main/s/^/#/g&amp;quot; /etc/sources.list
sudo apt-get clean
sudo apt-get update
sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the reboot, &lt;code&gt;docker version&lt;/code&gt; should show a Docker 1.9.1:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Client:
Version:      1.9.1
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition, check if your armbian is capable of running Docker with the &lt;code&gt;check-config.sh&lt;/code&gt; script provided by Docker. Execute the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget https://raw.githubusercontent.com/docker/docker/master/contrib/check-config.sh
sudo chmod +x check-config.sh
./check-config.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As output you should see all items in section &lt;strong&gt;Generally Necessary&lt;/strong&gt; as &lt;strong&gt;enabled&lt;/strong&gt;. Even many options of section &lt;strong&gt;Optional Features&lt;/strong&gt; are enabled and thus available. If you wanna see my full output of the script, see &lt;a href=&#34;https://gist.github.com/hypriot/5d1236bb9c63f7ef7be8&#34;&gt;these lines of code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now you may want to install docker-compose, docker-machine or swarm provided by the Hypriot package repository.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-armed-family-for-docker-is-probably-bigger-than-that:b445d62276b06d5ff303032c7603f78a&#34;&gt;The ARMed Family for Docker is probably bigger than that&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;(Andreas &amp;amp; Mathias speaking again)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Many thanks, Marcel. So what&amp;rsquo;s the punch line now? Well, this test makes us believe that &lt;strong&gt;our Docker probably runs on all devices supported by armbian, which is a total of 19 ARM boards!&lt;/strong&gt; &lt;a href=&#34;http://www.armbian.com/download/&#34;&gt;See the compatibility list here&lt;/a&gt;. We now have it safe for two of them. Of course, we are curious who of you has one of the remaining boards at hand and could test it! So, this is our call to the community:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who can confirm another ARM board running Docker?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Get in touch with us via the comments below, on &lt;a href=&#34;https://twitter.com/HypriotTweets&#34;&gt;Twitter&lt;/a&gt;, in the &lt;a href=&#34;https://gitter.im/hypriot/talk&#34;&gt;community chat&lt;/a&gt; and spread the word using the buttons below.&lt;/p&gt;

&lt;p&gt;Andreas, Mathias and Marcel Großmann (&lt;a href=&#34;https://www.uni-bamberg.de/en/ktr/staff/grossmann-marcel/&#34;&gt;University of Bamberg&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Just in time for DockerCon EU: a shipload of new Docker ARM goodies</title>
      <link>http://blog.hypriot.com/post/just-in-time-for-DockerCon-EU-a-shipload-of-new-Docker-ARM-goodies/</link>
      <pubDate>Sun, 15 Nov 2015 21:40:00 +0100</pubDate>
      
      <guid>http://blog.hypriot.com/post/just-in-time-for-DockerCon-EU-a-shipload-of-new-Docker-ARM-goodies/</guid>
      <description>

&lt;p&gt;Hard on the heels of Docker announcing &lt;a href=&#34;https://blog.docker.com/2015/11/docker-1-9-production-ready-swarm-multi-host-networking/&#34;&gt;major changes with Docker 1.9&lt;/a&gt; we are making the newest Docker goodies available on HypriotOS.
We are really happy that we were able to finish our new release called &amp;ldquo;Hector&amp;rdquo; just in time for DockerCon EU.&lt;/p&gt;

&lt;p&gt;If you like a personal demo of what&amp;rsquo;s in store for &amp;ldquo;Hector&amp;rdquo; just ping @Quintus23M on Twitter and meet him in person at DockerCon EU.
Dieter and Andreas brought their treasure chest filled with Raspberry Pi&amp;rsquo;s to Barcelona and are eager to show off a bit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/hector-release/testing.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;And if you are not lucky enough to attend DockerCon you might as well read on.&lt;/p&gt;

&lt;p&gt;To name just a few of the highlights, there is now &lt;a href=&#34;http://blog.docker.com/2015/11/docker-multi-host-networking-ga/&#34;&gt;multi-host networking&lt;/a&gt;, extensively improved volume management and a production-ready &lt;a href=&#34;http://blog.docker.com/2015/11/swarm-1-0/&#34;&gt;Swarm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HypriotOS - the ultimate Docker playground for your Raspberry Pi 1 &amp;amp; 2&lt;/strong&gt; has you covered once again: all the cool &amp;amp; latest Docker tools in one convenient package.&lt;/p&gt;

&lt;p&gt;Compared with HypriotOS &amp;ldquo;Will&amp;rdquo; we updated&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;Linux Kernel&lt;/strong&gt; from 4.1.8 to &lt;strong&gt;4.1.12&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;Docker Engine&lt;/strong&gt; from 1.8.2 to &lt;strong&gt;1.9.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Compose&lt;/strong&gt; from 1.4.2 to &lt;strong&gt;1.5.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Swarm&lt;/strong&gt; from 0.4.0 to &lt;strong&gt;1.0.0&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides that we enabled some missing cgroup kernel settings for better Docker support.
We also added a default &lt;code&gt;/boot/config.txt&lt;/code&gt;, which for instance allows for a better out-of-the-box HDMI display experience (&lt;code&gt;hdmi_force_hotplug=1&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;There is no easier way to get started with Docker on ARM.
Just give it a try: Download our &lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20151115-132854.img.zip&#34;&gt;latest image&lt;/a&gt; and get started in less than 5 minutes.&lt;/p&gt;

&lt;h3 id=&#34;detailed-features-of-hypriotos-hector:02d83c62817c8a33766342f7f05756e9&#34;&gt;Detailed Features of HypriotOS &amp;ldquo;Hector&amp;rdquo;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;a modern operating system based on &lt;strong&gt;Raspbian Jessie&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;a recent Raspberry Pi firmware and Device Tree to &lt;strong&gt;support a huge range of hardware add-ons&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;a kernel optimized for Docker-awesomeness: &lt;strong&gt;Kernel 4.1.12 with support for OverlayFS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Raspberry Pi 1 &amp;amp; 2&lt;/strong&gt; with the same SD card image&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Engine 1.9.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Compose 1.5.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Machine 0.4.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Swarm 1.0.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;network hotplugging&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;out-of-the-box support for &lt;strong&gt;WiFi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Avahi&lt;/strong&gt; (aka mDNS aka Apple Bonjour)&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Open vSwitch&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;our own package repository to easily update individual components&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;download-get-it-while-it-is-still-hot:02d83c62817c8a33766342f7f05756e9&#34;&gt;Download: Get it while it is still hot&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20151115-132854.img.zip&#34;&gt;hypriot-rpi-20151115-132854.img.zip&lt;/a&gt; (~ 438 MB)
&lt;a href=&#34;hypriot-rpi-20151115-132854.img.zip.sha256&#34;&gt;SHA256 checksum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started-Guide&lt;/a&gt; on how to get this SD card image running on your Raspberry Pi.&lt;/p&gt;

&lt;p&gt;As always, use the comments below to give us feedback and share this post on Twitter, Google+ or Facebook.&lt;/p&gt;

&lt;p&gt;Your Hypriot-Team -
Stefan, Dieter, Mathias, Andreas, Govinda&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A touch of magic: Controlling Kitematic &amp; Docker with a touch display on the Raspberry Pi</title>
      <link>http://blog.hypriot.com/post/a-touch-of-magic-controlling-kitematic-with-a-touch-display-on-the-raspberry-pi/</link>
      <pubDate>Mon, 12 Oct 2015 00:15:00 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/a-touch-of-magic-controlling-kitematic-with-a-touch-display-on-the-raspberry-pi/</guid>
      <description>&lt;p&gt;We have recently released our &lt;a href=&#34;http://blog.hypriot.com/post/get-your-all-in-one-docker-playground-now-hypriotos-reloaded/&#34;&gt;new SD card image&lt;/a&gt; called &lt;strong&gt;Will&lt;/strong&gt;.
It is the ultimate Docker playground with Docker Engine, Docker Compose, Docker Swarm and Docker Machine preinstalled.
This image now also supports the new 7&amp;rdquo; Raspberry Pi Touch Display out-of-the-box. So we thought, wouldn&amp;rsquo;t it be cool to have Kitematic running directly on your Raspberry Pi? And yes, we did it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/teaser.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;While polishing and testing &lt;strong&gt;Will&lt;/strong&gt; the idea came up that it would be awesome to be able to use Kitematic on the new great &lt;a href=&#34;https://www.raspberrypi.org/blog/the-eagerly-awaited-raspberry-pi-display/&#34;&gt;7&amp;rdquo; touch display of the Raspberry Pi foundation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We started using the &lt;a href=&#34;https://github.com/zedtux/kitematic/tree/linux-support&#34;&gt;Linux support branch&lt;/a&gt; of Kitematic (&lt;a href=&#34;https://github.com/kitematic/kitematic/pull/696&#34;&gt;PR #696&lt;/a&gt;) and tried to compile it.
After some fiddling we got the first build working. Still in the team we were not satisfied with installing Kitematic directly on the host - we wanted a better way.
This was the time for the next crazy idea. We thought, let us write a &lt;code&gt;Dockerfile&lt;/code&gt; to build Kitematic and run it within a Docker container.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;gallery clearfix&#34; itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Kitematic running on the Raspberry Pi&lt;/div&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/docker-toolbox.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_docker-toolbox.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Unboxing the Docker Toolbox&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Unboxing the Docker Toolbox
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/display-back.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_display-back.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;The RPi 2 is attached to 7 inch Raspberry Pi Display&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    The RPi 2 is attached to 7 inch Raspberry Pi Display
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/connect-to-docker-hub.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_connect-to-docker-hub.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Connect to the Docker Hub&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Connect to the Docker Hub
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/kitematic.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_kitematic.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;List of Docker Images&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    List of Docker Images
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/create.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_create.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Download and create a Docker Container&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Download and create a Docker Container
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/web-preview.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_web-preview.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;A running a container with web preview&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    A running a container with web preview
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbs-up.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_thumbs-up.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Thumbs up! All is running well&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Thumbs up! All is running well
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/photoswipe.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/default-skin/default-skin.css&#34;&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe-ui-default.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/initphotoswipe.js&#34;&gt;&lt;/script&gt;



&lt;div class=&#34;pswp&#34; tabindex=&#34;-1&#34; role=&#34;dialog&#34; aria-hidden=&#34;true&#34;&gt;

&lt;div class=&#34;pswp__bg&#34;&gt;&lt;/div&gt;

&lt;div class=&#34;pswp__scroll-wrap&#34;&gt;
    
    &lt;div class=&#34;pswp__container&#34;&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    
    &lt;div class=&#34;pswp__ui pswp__ui--hidden&#34;&gt;
    &lt;div class=&#34;pswp__top-bar&#34;&gt;
      
      &lt;div class=&#34;pswp__counter&#34;&gt;&lt;/div&gt;
      &lt;button class=&#34;pswp__button pswp__button--close&#34; title=&#34;Close (Esc)&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--share&#34; title=&#34;Share&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--fs&#34; title=&#34;Toggle fullscreen&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--zoom&#34; title=&#34;Zoom in/out&#34;&gt;&lt;/button&gt;
      
      
      &lt;div class=&#34;pswp__preloader&#34;&gt;
        &lt;div class=&#34;pswp__preloader__icn&#34;&gt;
          &lt;div class=&#34;pswp__preloader__cut&#34;&gt;
            &lt;div class=&#34;pswp__preloader__donut&#34;&gt;&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;pswp__share-modal pswp__share-modal--hidden pswp__single-tap&#34;&gt;
      &lt;div class=&#34;pswp__share-tooltip&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--left&#34; title=&#34;Previous (arrow left)&#34;&gt;
    &lt;/button&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--right&#34; title=&#34;Next (arrow right)&#34;&gt;
    &lt;/button&gt;
    &lt;div class=&#34;pswp__caption&#34;&gt;
      &lt;div class=&#34;pswp__caption__center&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;style&gt;
    .gallery {  }
    .gallery img { width: 100%; height: auto; }
    .gallery figure { display: block; float: left; margin: 0 5px 5px 0; width: 200px; }
    .gallery figcaption { display: none; }
    .gallery div.title { font-weight: bold; }
    span[itemprop=&#34;copyrightHolder&#34;] { color : #888; float: right; }
    span[itemprop=&#34;copyrightHolder&#34;]:before { content: &#34;Foto: &#34;; }
    img[itemprop=&#34;thumbnail&#34;]{ width: 200px; }
&lt;/style&gt;


&lt;script&gt;initPhotoSwipeFromDOM(&#39;.gallery&#39;);&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;You can find the &lt;code&gt;Dockerfile&lt;/code&gt; in a new GitHub repo at &lt;a href=&#34;https://github.com/hypriot/rpi-kitematic&#34;&gt;hypriot/rpi-kitematic&lt;/a&gt;. If you like you can follow along and try it out with your own display.&lt;/p&gt;

&lt;p&gt;We made a small video to demonstrate how Kitematic looks and feels controlling your containers with a touch display:&lt;/p&gt;

&lt;div class=&#34;video-container&#34;&gt;&lt;iframe src=&#34;https://www.youtube.com/embed/HVyQeCqE_4A&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;As you can see this is still a work-in-progress. But we believe we can make it available soon in an easy and convenient way to be used by everyone.&lt;/p&gt;

&lt;p&gt;If you are one of the lucky owners of the new Raspberry 7&amp;rdquo; touch screen display, you may wanna try out the following steps to run it on your own Pi as well.&lt;/p&gt;

&lt;p&gt;First log in to your Raspberry Pi and install X11. We have created a small helper script that installs everything you need.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -sSL https://github.com/hypriot/x11-on-HypriotOS/raw/master/install-x11-basics.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you have to enable the X11 server to listen on a TCP socket (port 6000). Just insert the line &lt;code&gt;xserver-allow-tcp=true&lt;/code&gt; in the file &lt;code&gt;/etc/lightdm/lightdm.conf&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;xserver-allow-tcp=true&amp;quot; &amp;gt;&amp;gt; /etc/lightdm/lightdm.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next you have to enable X11 server to accept external TCP access from inside of a Docker container.
This is a network connection coming from another TCP/IP address because the container is running in it&amp;rsquo;s own network name space.&lt;/p&gt;

&lt;p&gt;If you want to automate this step, you can add a start script so the TCP connections are allowed after the next reboot.
If you want to do it manually, just skip this step.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;xhost +&amp;quot; &amp;gt; /etc/X11/Xsession.d/36x11-xhost-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To fix the orientation of the 7&amp;rdquo; touch display we have to add &lt;code&gt;lcd_rotate=2&lt;/code&gt; into the &lt;code&gt;/boot/config.txt&lt;/code&gt;. If you just use an HDMI monitor you should skip this step.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;lcd_rotate=2&amp;quot; &amp;gt;&amp;gt; /boot/config.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now reboot your Pi to start the X11 server on your 7&amp;rdquo; touch display or HDMI monitor.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you haven&amp;rsquo;t enabled the TCP connection yet, run the following command to enable it now.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DISPLAY=:0.0 xhost +
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it works you see a message like &lt;code&gt;access control disabled, clients can connect from any host&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you have to build the Kitematic container.
We haven&amp;rsquo;t uploaded it to the Docker Hub yet as it is still a work-in-progress.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/hypriot/rpi-kitematic
cd rpi-kitematic
docker build -t hypriot/rpi-kitematic .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it&amp;rsquo;s time to run the Kitematic container with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --privileged -v /var/run/docker.sock:/var/run/docker.sock -e DISPLAY=172.17.42.1:0.0 hypriot/rpi-kitematic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The container runs Kitematic in development mode. Because of this the first start-up may take some minutes until the user interface finally shows up.
But once it is started, it feels pretty smooth to use.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this demonstration. We currently think of how to best deploy Kitematic for the Pi - whether we should run it in a container or natively on the host.
But running a GUI application in a Docker container was something we wanted to try out anyhow. :)&lt;/p&gt;

&lt;p&gt;What do you think would be the best approach? How should we provide Kitematic on a Raspberry Pi without putting to much bloat into our SD card image by default?&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.
You also might wanna discuss this article on &lt;a href=&#34;https://news.ycombinator.com/item?id=10374271&#34;&gt;HackerNews&lt;/a&gt; or vote it up if you find it interesting.&lt;/p&gt;

&lt;p&gt;Stefan&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get your all-in-one Docker playground now: HypriotOS reloaded!</title>
      <link>http://blog.hypriot.com/post/get-your-all-in-one-docker-playground-now-hypriotos-reloaded/</link>
      <pubDate>Wed, 07 Oct 2015 17:30:00 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/get-your-all-in-one-docker-playground-now-hypriotos-reloaded/</guid>
      <description>

&lt;p&gt;We are happy to announce that after months of hard work we are now releasing a new major version of HypriotOS called &lt;a href=&#34;https://en.wikipedia.org/wiki/Will_Turner&#34;&gt;&amp;ldquo;Will&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Highlights are the upgrade from Raspberry Wheezy to Jessie, the upgrade of the included Raspberry Pi firmware, support for Device Tree and the addition of the most recent versions of Docker Compose, Docker Swarm and Docker Machine to the image.&lt;/p&gt;

&lt;p&gt;It is - more than ever - &lt;strong&gt;the ultimate Docker playground for the Raspberry Pi 1 &amp;amp; 2&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/jessie-release/one-to-rule-them-all_blog.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;We have been coming a long way since we started in February 2015. Then Docker was not easily available for ARM-based devices.
By following long - often outdated - tutorials, only technically well-versed people had a chance to eventually get Docker running on ARM.
It also didn&amp;rsquo;t help that Docker wasn&amp;rsquo;t offically supported on ARM and 32-bit systems.&lt;/p&gt;

&lt;p&gt;As avid Docker users and owners of various ARM devices our mission from the beginning was to make Docker a first-class citizen in the ARM world.
The most popular ARM device that is easily available at reasonable costs is the &lt;a href=&#34;https://www.raspberrypi.org/help/what-is-a-raspberry-pi/&#34;&gt;Raspberry Pi&lt;/a&gt;. More than 5 millions devices have been sold until now.
Thus it was an obvious choice for us to start our mission on the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;The standard way to provide software for the Raspberry Pi is by using a SD card that includes the operating system with all necessary user software.
So our first step was to provide a SD card image that included an operating system that was optimized for the use of Docker.
And that was exactly what we did when we published the &lt;a href=&#34;http://blog.hypriot.com/post/kick-ass-raspberry-pi-2-having-a-forbidden-love-affair-with-docker-1-dot-4-1/&#34;&gt;first version&lt;/a&gt; of our Get-Docker-Up-And-Running-On-Your-Pi-In-No-Time SD card image.
It allowed even novice users to get a working Docker environment running in minutes.&lt;/p&gt;

&lt;p&gt;Besides the ease of use there was another important &amp;ldquo;feature&amp;rdquo; for us when we started publishing our SD card image.
We wanted to provide our users with new Docker versions as soon as they were available.
And that&amp;rsquo;s exactly what we did: Sometimes within minutes after a new Docker version was released you would find it on our website ready to be downloaded.&lt;/p&gt;

&lt;p&gt;Following this approach we did not only update the Docker Engine on a regular basis, but also the included Linux kernel and various other components that made the work with our image easier or more interesting.
The positive feedback we got, spurred us on to tackle a new challenge at the end of July: upgrading the foundation of our SD card image from Raspbian Wheezy to Jessie.
Since August we had three preview releases and we now have not only upgraded HypriotOS from Raspbian Wheezy to &lt;a href=&#34;http://arstechnica.com/information-technology/2015/05/debian-8-linuxs-most-reliable-distro-makes-its-biggest-change-since-1993/&#34;&gt;Jessie&lt;/a&gt;, but we also have upgraded the Linux kernel from 3.18.11 to 4.1.8.
And that&amp;rsquo;s not all: the most exciting addition is that we now support most of the Docker tools besides the Docker Engine.
This includes the most recent versions of &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt;, &lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;Docker Swarm&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/machine/&#34;&gt;Docker Machine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We believe this makes our SD card image one of the easiest and straightforward ways to get started with Docker and its ecosystem!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We also improved the way how upgrades can be done. In the past, upgrading basically meant to reflash your SD card with the newest version of HypriotOS.
To allow upgrading of individual components, without reflashing the SD card, we now have set up our own package repository.
&lt;code&gt;apt&lt;/code&gt; in our new image is configured to use it by default - thus an upgrade is just an &lt;code&gt;apt-get update &amp;amp;&amp;amp; apt-get install docker-compose&lt;/code&gt; away.&lt;/p&gt;

&lt;p&gt;We also massively improved the out-of-the-box support for different hardware extensions that are available for the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;To achieve that we upgraded to the lastest Raspberry Pi firmware and added support for &lt;a href=&#34;http://www.devicetree.org/&#34;&gt;Device Tree&lt;/a&gt;.
With the help of Device Tree many hardware devices like displays and Pi Hats should just work&amp;trade; now.
One great example is &lt;a href=&#34;https://www.raspberrypi.org/blog/the-eagerly-awaited-raspberry-pi-display/&#34;&gt;The official 7&amp;rdquo; touch display of the Raspberry Pi foundation&lt;/a&gt;.
Just attach it to your Pi and you can use it right away.
Besides adding Device Tree we also added support for more WiFi-Dongles from Ralink, Realtec and Atheros.
We hope that all these measures contribute to a much smoother out-of-the-box hardware experience for our users.&lt;/p&gt;

&lt;p&gt;All in all we think that this release is a major step forward and we hope, you enjoy it as much as we do!
Rest assured that we still have some more major improvements in our release pipeline which we will announce soon.&lt;/p&gt;

&lt;h3 id=&#34;detailed-features-of-hypriotos-will:0ebc29021394a433fb8d656202bccf5e&#34;&gt;Detailed Features of HypriotOS &amp;ldquo;Will&amp;rdquo;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;a modern operating system based on &lt;strong&gt;Raspbian Jessie&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;a recent Raspberry Pi firmware and Device Tree to &lt;strong&gt;support a huge range of hardware add-ons&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;a kernel optimized for Docker-awesomeness: &lt;strong&gt;Kernel 4.1.8 with support for OverlayFS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Pi 1 &amp;amp; 2&lt;/strong&gt; with the same SD card image&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Engine 1.8.2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Compose 1.4.2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Machine 0.4.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Swarm 0.4.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;network hotplugging&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;out-of-the-box support for &lt;strong&gt;WiFi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Avahi&lt;/strong&gt; (aka mDNS aka Apple Bonjour)&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Open vSwitch&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;our own package repository to easily update individual components&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;download-get-it-while-it-is-still-hot:0ebc29021394a433fb8d656202bccf5e&#34;&gt;Download: Get it while it is still hot&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20151004-132414.img.zip&#34;&gt;hypriot-rpi-20151004-132414.img.zip&lt;/a&gt; (~ 438 MB)
&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20151004-132414.img.zip.sha256&#34;&gt;SHA256 checksum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started-Guide&lt;/a&gt; on how to get this SD card image running on our Pi.&lt;/p&gt;

&lt;p&gt;As always, use the comments below to give us feedback and share this post on Twitter or Facebook.
You also might wanna discuss this release on &lt;a href=&#34;https://news.ycombinator.com/item?id=10351792&#34;&gt;HackerNews&lt;/a&gt; or vote it up if you find it interesting.&lt;/p&gt;

&lt;p&gt;Your Hypriot-Team -
Stefan, Dieter, Mathias, Andreas, Govinda&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RC2: Jessie with upgraded Firmware, Linux Kernel and Docker-Engine</title>
      <link>http://blog.hypriot.com/post/rc2-jessie-with-brand-new-kernel-and-docker-and-display-support/</link>
      <pubDate>Mon, 28 Sep 2015 21:00:00 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/rc2-jessie-with-brand-new-kernel-and-docker-and-display-support/</guid>
      <description>

&lt;p&gt;Here comes &lt;strong&gt;Release Candiate 2&lt;/strong&gt; of our brand new &lt;em&gt;Get-Docker-Running-in-under-5-Minutes Hypriot SD card image&lt;/em&gt;.
It is the ultimate Docker playground for the Raspberry Pi 1 &amp;amp; 2.&lt;/p&gt;

&lt;p&gt;This image builds on the &lt;a href=&#34;http://blog.hypriot.com/post/rc1-jessie-with-brand-new-kernel-and-docker/&#34;&gt;RC1 we released roughly two weeks ago&lt;/a&gt; and fixes a couple of issues that were reported by our community.&lt;/p&gt;

&lt;p&gt;We also upgraded the included firmware as well as the Linux-Kernel- and the Docker-Version.&lt;/p&gt;

&lt;p&gt;We finally managed to add out-of-the-box support for &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker-Compose&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;Docker-Swarm&lt;/a&gt; in our image.
Docker-Compose helps you manage a group of containers that make up your application. And if working on one server/device is not enough for you you might wanna look into Docker-Swarm as it allows you to manage a cluster of Docker-Engines on multiple servers/devices.&lt;/p&gt;

&lt;p&gt;Another noteably thing that we now support is the &lt;a href=&#34;https://www.raspberrypi.org/blog/the-eagerly-awaited-raspberry-pi-display/&#34;&gt;official 7&amp;rdquo; display of the Raspberry PI foundation&lt;/a&gt;.
Just attach it to your PI and you should be able to use Docker together with the awesomeness of a beautiful GUI at once.
That&amp;rsquo;s exactly what one of our users did last week by using &lt;a href=&#34;https://medium.com/@icebob/jessie-on-raspberry-pi-2-with-docker-and-chromium-c43b8d80e7e1&#34;&gt;a beautiful Node.js-App on HypriotOS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Albeit he still had to add support for the 7&amp;rdquo; display manually on his own.&lt;br /&gt;
As of today this is not necessary anymore as we upgraded the included Raspberry PI Firmware to a more recent version that supports a number of new displays.&lt;/p&gt;

&lt;p&gt;And last but not least we updated Docker from version &lt;strong&gt;1.8.1&lt;/strong&gt; to &lt;strong&gt;1.8.2&lt;/strong&gt; and the included Linux Kernel from &lt;strong&gt;4.1.6&lt;/strong&gt; to &lt;strong&gt;4.1.8&lt;/strong&gt;..&lt;/p&gt;

&lt;p&gt;So here comes an overview of all the things that are part of our new Hypriot SD card image&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;battle-tested-docker-jessie-with-some-sugar:ccfb3997a8de6874549db7c1add28f11&#34;&gt;Battle-Tested Docker-Jessie with some sugar&lt;/h3&gt;

&lt;p&gt;On top of &lt;a href=&#34;http://arstechnica.com/information-technology/2015/05/debian-8-linuxs-most-reliable-distro-makes-its-biggest-change-since-1993/&#34;&gt;Jessie&lt;/a&gt; we added all the battle-tested ingredients of our previous &lt;em&gt;Get-Docker-Running-in-under-5-Minutes Hypriot SD card image&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a kernel optimised for Docker-awesomeness: &lt;strong&gt;Kernel 4.1.8 with support for OverlayFS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;the most recent &lt;strong&gt;Docker 1.8.2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Pi 1 &amp;amp; 2&lt;/strong&gt; with the same image&lt;/li&gt;
&lt;li&gt;Docker-Compose &lt;strong&gt;1.4.2&lt;/strong&gt; included&lt;/li&gt;
&lt;li&gt;Docker-Swarm &lt;strong&gt;0.4.0&lt;/strong&gt; included&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;network hotplugging&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for a couple of Raspberry PI displays&lt;/li&gt;
&lt;li&gt;out of the box support for &lt;strong&gt;Wifi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Avahi&lt;/strong&gt; (aka Apple Bonjour)&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Open vSwitch&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During the next two weeks we want to improve the SD card image and gather more feedback to make it a great out-of-the-box experience for our users.&lt;/p&gt;

&lt;h3 id=&#34;get-it-while-it-is-still-hot:ccfb3997a8de6874549db7c1add28f11&#34;&gt;Get it while it is still hot&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150928-174643.img.zip&#34;&gt;hypriot-rpi-20150928-174643.img.zip&lt;/a&gt; (~ 438 MB)
&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150928-174643.img.zip.sha256&#34;&gt;SHA256 checksum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started-Guide&lt;/a&gt; on how to get this SD card image running on our Pi.&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share this post on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Govinda, Stefan &amp;amp; Dieter&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RC1: Jessie with brand new Linux Kernel and Docker</title>
      <link>http://blog.hypriot.com/post/rc1-jessie-with-brand-new-kernel-and-docker/</link>
      <pubDate>Thu, 10 Sep 2015 21:30:00 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/rc1-jessie-with-brand-new-kernel-and-docker/</guid>
      <description>

&lt;p&gt;Here comes &lt;strong&gt;Release Candiate 1&lt;/strong&gt; of our brand new &lt;em&gt;Get-Docker-Running-in-under-5-Minutes Hypriot SD card image&lt;/em&gt;.
It is the ultimate Docker playground for the Raspberry Pi 1 &amp;amp; 2.&lt;/p&gt;

&lt;p&gt;This image builds on the &lt;a href=&#34;http://blog.hypriot.com/post/moving-docker-from-wheezy-to-jessie/&#34;&gt;Beta Version we published six weeks ago&lt;/a&gt; and fixes a couple of issues that were reported by our community.
The positiv feedback we got spurred us on to make this release even better.&lt;/p&gt;

&lt;p&gt;And by the way - keep this kind of positiv feedback coming - it really makes a difference and pushes us to be the best we can&amp;hellip; :)&lt;/p&gt;

&lt;p&gt;So we updated Docker from &lt;strong&gt;1.7.1&lt;/strong&gt; to &lt;strong&gt;1.8.1&lt;/strong&gt;.
We also had the impression that our current version of the Linux Kernel - &lt;strong&gt;3.18.11&lt;/strong&gt; - did need some kind of a refresher - so we added the &lt;strong&gt;4.1.6&lt;/strong&gt; version it.&lt;/p&gt;

&lt;p&gt;So here again the list of features that make this release really awesome.&lt;/p&gt;

&lt;h3 id=&#34;battle-tested-docker-jessie-with-some-sugar:0cbf622673eabe9849be13a37f374c36&#34;&gt;Battle-Tested Docker-Jessie with some sugar&lt;/h3&gt;

&lt;p&gt;On top of &lt;a href=&#34;http://arstechnica.com/information-technology/2015/05/debian-8-linuxs-most-reliable-distro-makes-its-biggest-change-since-1993/&#34;&gt;Jessie&lt;/a&gt; we added all the battle-tested ingredients of our previous &lt;em&gt;Get-Docker-Running-in-under-5-Minutes Hypriot SD card image&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a kernel optimised for Docker-awesomeness: &lt;strong&gt;Kernel 4.1.6 with support for OverlayFS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;the most recent &lt;strong&gt;Docker 1.8.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Pi 1 &amp;amp; 2&lt;/strong&gt; with the same image&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;network hotplugging&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;out of the box support for &lt;strong&gt;Wifi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Avahi&lt;/strong&gt; (aka Apple Bonjour)&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Open vSwitch&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During the next two weeks we want to improve the SD card image and gather more feedback to make it a great out-of-the-box experience for our users.&lt;/p&gt;

&lt;h3 id=&#34;get-it-while-it-is-still-hot:0cbf622673eabe9849be13a37f374c36&#34;&gt;Get it while it is still hot&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150909-070022.img.zip&#34;&gt;hypriot-rpi-20150909-070022.img.zip&lt;/a&gt; (~ 398 MB)
&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150909-070022.img.zip.sha256&#34;&gt;SHA256 checksum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started-Guide&lt;/a&gt; on how to get this SD card image running on our Pi.&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share this post on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Govinda &amp;amp; Stefan&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Better be prepared for the ARMed IoT flood and port Docker apps to ARM</title>
      <link>http://blog.hypriot.com/post/port_dockerfiles_to_arm/</link>
      <pubDate>Wed, 26 Aug 2015 02:55:55 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/port_dockerfiles_to_arm/</guid>
      <description>

&lt;p&gt;The great ARMed flood has begun. Especially for the sake of the IoT, every day new tiny devices pop up all around the world. And since most of these devices are build on top of the ARM architecture, with each new device, ARM gets more important compared to the x86 architecture proposed by Intel/AMD. Maybe you even need to run your next app on ARM! Thus better be prepared and port apps to ARM, it&amp;rsquo;s basically just one step to take.&lt;/p&gt;

&lt;p&gt;In comparison to the x86 CPU architecture, ARM supports low power consumption by design, not just as a feature. When thinking of a sensor network at your home, you don&amp;rsquo;t wanna change the battery of all your sensors every week. Well, think of any device that profits from low power consumption, which does not need the CPU power of a sumo wrestler. As with sumo wrestlers, computers cluttered with resources lack the flexibility needed in today&amp;rsquo;s IT, and the resources of their built in x86 CPU often are barely needed.&lt;/p&gt;

&lt;p&gt;Speaking of the number of devices: Some say we will have 20, some say 50 billion connected IoT devices by 2020, where most of them will be ARMed. Well, least let&amp;rsquo;s conclude: It will be a flooding number of them.&lt;/p&gt;

&lt;p&gt;Fair enough, so let&amp;rsquo;s start making apps compatible to ARM. To do so, you only need to make sure that the binaries of your apps are compiled explicitly for the ARM architecture. Thus, porting an app to ARM basically means to change the binaries to ARM compatible ones. Let&amp;rsquo;s do it!&lt;/p&gt;

&lt;h2 id=&#34;get-started-with-docker-for-an-easy-porting-example:88da4e06b8e93673f9a039fdd642e0cc&#34;&gt;Get started with Docker for an easy porting example&lt;/h2&gt;

&lt;p&gt;Of course, we use &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;. And in the world of Docker, apps are described by Dockerfiles, like recipes for making cakes. Thus, when we wanna ARM an app, we only change its recipe, i.e. its Dockerfile. So make sure you know about the commands in Dockerfiles with the help of the &lt;a href=&#34;https://docs.docker.com/reference/builder/&#34;&gt;Dockerfile reference at Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From now on, let&amp;rsquo;s better refer to an app as a &lt;strong&gt;service&lt;/strong&gt; because often a Dockerfile or a docker-compose file is a recipe for a collection of apps which are combined to a service. Thus a service is described by one or many apps.&lt;/p&gt;

&lt;p&gt;In order to directly apply the necessary steps, we go through an example. In this example, we wanna port the &lt;a href=&#34;http://httpd.apache.org/&#34;&gt;Apache webserver&lt;/a&gt; to ARM.&lt;/p&gt;

&lt;p&gt;As hardware for our example, we use a Raspberry Pi, which is one of the most popular ARM devices for developers. Of course, as operating system we use our &lt;a href=&#34;http://blog.hypriot.com/downloads/&#34;&gt;SD Card image&lt;/a&gt; that provides Docker on the Raspberry Pi by just &lt;a href=&#34;https://github.com/hypriot/flash&#34;&gt;flashing it to a SD card and booting it&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;let-s-arm-it:88da4e06b8e93673f9a039fdd642e0cc&#34;&gt;Let&amp;rsquo;s ARM it!&lt;/h2&gt;

&lt;p&gt;First, search for a Dockerfile that describes the service you wanna ARM. In most cases, Dockerfiles reside on the &lt;a href=&#34;https://hub.docker.com/explore/&#34;&gt;Dockerhub&lt;/a&gt; or on &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When choosing a Dockerfile, make sure you can check the following three prerequisites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take the one with the most stars, the most popular one, or the ones tagged with  &amp;ldquo;official&amp;rdquo;. In addition, prefer the less complex ones if possible.&lt;/li&gt;
&lt;li&gt;Take a Dockerfile that is based on Ubuntu or a Debian based image. To evaluated this, check what&amp;rsquo;s in the Dockerfile after the &lt;code&gt;FROM&lt;/code&gt; command. Any of &lt;code&gt;debian&lt;/code&gt; or &lt;code&gt;ubuntu&lt;/code&gt; is fine.&lt;/li&gt;
&lt;li&gt;Pay attention to the license. Some licenses forbid to copy and change a Dockerfile.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Apache, we found a small and popular Dockerfile &lt;a href=&#34;https://hub.docker.com/r/eboraas/apache/~/dockerfile/&#34;&gt;here&lt;/a&gt;. We check the Dockerfile if the three prerequisites in the list we above are met. Here, the Dockerfile is based on Debian, it seems clean and there&amp;rsquo;s no license given that restricts the usage of this work.&lt;/p&gt;

&lt;p&gt;Note that every now and then there are mistakes in Dockerfiles. Therefore we recommend to test the Docker images on your x86 machine before porting it. In case you encounter any errors, the performance advantage of an x86 machine makes debugging much faster than on your ARM machine. See the &lt;a href=&#34;http://docs.docker.com/installation/&#34;&gt;Docker docs to install Docker&lt;/a&gt; on your machine. It&amp;rsquo;s fast and painless.&lt;/p&gt;

&lt;p&gt;Thus, we test the chosen Dockerfile for Apache on a x86 machine. The &lt;code&gt;docker run&lt;/code&gt; command to do this is given in the repo description on the Dockerhub. In advance we had to add the tag &lt;code&gt;wheezy&lt;/code&gt; (read the next chapter when you are curious about the &lt;code&gt;wheezy&lt;/code&gt; here).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run -p 80:80 -p 443:443 -d eboraas/apache:wheezy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When the Docker command completed, point your browser to &lt;code&gt;http://&amp;lt;IP OF YOUR PI&amp;gt;:80/&lt;/code&gt;. You should see the default page of Apache:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/port_dockerfiles_to_arm/apache_default_x86.png&#34; alt=&#34;port_dockerfiles_to_arm&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Next, let&amp;rsquo;s move to the target machine running on ARM. Copy the content of the Dockerfile as is to your ARM machine.&lt;/p&gt;

&lt;p&gt;In our case, we log into the Raspberry Pi (&lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;get help from our getting started guide&lt;/a&gt;) and copy the content of the Dockerfile to the machine. For this, on the machine, we use the &lt;code&gt;vim&lt;/code&gt; editor by executing&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vim Dockerfile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Paste the content.&lt;/p&gt;

&lt;p&gt;Then make sure that the content is formatted as it is on the website, e.g. any command should be at the beginning of a new line etc.&lt;/p&gt;

&lt;p&gt;After formatting, this is how the Dockerfile should look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM eboraas/debian:stable
MAINTAINER Ed Boraas &amp;lt;ed@boraas.ca&amp;gt;

RUN apt-get update &amp;amp;&amp;amp; apt-get -y install apache2 &amp;amp;&amp;amp; apt-get clean
ENV APACHE_RUN_USER www-data
ENV APACHE_RUN_GROUP www-data
ENV APACHE_LOG_DIR /var/log/apache2

RUN /bin/ln -sf ../sites-available/default-ssl /etc/apache2/sites-enabled/001-default-ssl
RUN /bin/ln -sf ../mods-available/ssl.conf /etc/apache2/mods-enabled/
RUN /bin/ln -sf ../mods-available/ssl.load /etc/apache2/mods-enabled/

EXPOSE 80
EXPOSE 443
CMD [&amp;quot;/usr/sbin/apache2ctl&amp;quot;, &amp;quot;-D&amp;quot;, &amp;quot;FOREGROUND&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to change all binaries that are used in this Dockerfile to ARM compatible ones. In general, there are two locations that need to be adjusted:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;FROM field in the Dockerfile&lt;/strong&gt;, which defines the software layer our service will inherit from. Here we change &lt;code&gt;debian:jessie&lt;/code&gt; to &lt;code&gt;resin/rpi-raspbian:wheezy&lt;/code&gt;. Then of course, replace the &lt;code&gt;MAINTAINER&lt;/code&gt; with your name and email address.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;binaries of the apps that are being downloaded&lt;/strong&gt;. In our case, we do not need to change anything because the binary, which is &lt;code&gt;apache2&lt;/code&gt; is downloaded via the &lt;code&gt;apt-get install&lt;/code&gt; command. This command is already architecture sensitive, i.e. it downloads only compatible binaries to the target machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, save the Dockerfile. Try if the Dockerfile works by creating &amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker build -t rpi-apache .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&amp;hellip; and starting a Docker image:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run -p 80:80 -d rpi-apache&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, when you point your browser to the IP address of your ARM machine, you should see the same default page of Apache&amp;rsquo;s as when you started the image on x86 before.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CONGRATULATIONS! You ARMed your first service!&lt;/strong&gt; Now you have the basic understanding to ARM more services! In case you encounter any error, get help in the next chapter. We cross our fingers for you!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: After you successfully ported a service, you can push it to the Dockerhub, so that other people can use it. In addition make sure to put &lt;code&gt;rpi-&lt;/code&gt; in front of the Docker image&amp;rsquo;s name. This declares it as a Raspberry Pi compatible image and therefore also as an ARM compatible service. It will make the life easier for people looking for ARMed services on the Dockerhub.&lt;/p&gt;

&lt;h2 id=&#34;debugging-hints-to-arm-a-service:88da4e06b8e93673f9a039fdd642e0cc&#34;&gt;Debugging hints to ARM a service&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Remove any command you do not need to run the service&lt;/strong&gt;. In our Apache example, you can delete everything regarding SSL if you do not need it. This already might solve some problems.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make sure, that all binaries used are pointing to ARM compatible ones&lt;/strong&gt;. If there is no compiled ARM binary available, you might need to compile it yourself.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Check other tags&lt;/strong&gt;. You may have noticed that in the porting example above we explicitly defined the tag &lt;code&gt;wheezy&lt;/code&gt; in the &lt;code&gt;Docker run&lt;/code&gt; command. Why? With the tag &lt;code&gt;stable&lt;/code&gt; as it was defined in the original Dockerfile, the Docker image will not work. The reason for this is a common problem, which arises when Dockerfiles are not updated regularly: At the time the author created this Dockerfile, &lt;code&gt;stable&lt;/code&gt; pointed to Debian Wheezy. This worked out fine. However, meanwhile Debian Jessy has been released which ships updated versions of software as well. This invisibly changes the Dockerfile, because &lt;code&gt;apt-get install apache2&lt;/code&gt; now installs the latest version of Apache. This updated version of Apache is controlled by commands other than the ones given in the Dockerfile. This causes Apache to crash. So this Dockerfile simply has not been updated yet to the newer commands of the updated version of Apache. Thus, try other tags in your Dockerfile – they might just work!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search for ADD commands&lt;/strong&gt; that copy files from the host into the container. Sometimes you need to download these files in advance. Refer to the instructions of the repository, especially look for links to the authors code base , e.g. at Github&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Check the &amp;lsquo;docker run&amp;rsquo; command in the Dockerhub repo info&lt;/strong&gt;. If there are any depending containers (defined via &lt;code&gt;--link&lt;/code&gt; parameter), you need porting these images to ARM too. Also check if someone else already ported the depending images you look for.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Try to resolve any other errors by asking an online search engine&lt;/strong&gt;. Often, you are not the first one having this problem.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;optimize-the-dockerfile-optional:88da4e06b8e93673f9a039fdd642e0cc&#34;&gt;Optimize the Dockerfile (optional)&lt;/h2&gt;

&lt;p&gt;Optimizing the Dockerfile does have several advantages: It often makes it smaller, i.e. you need less time to download packages and less disk space on your machine. Further, you gain a better overview over the Dockerfile&amp;rsquo;s structure which simplifies debugging. In the following, we give some recommendations of how to optimize a Dockerfile:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Format it nicely.&lt;/strong&gt; Put commands only at the beginning of a line. Add line breaks with &lt;code&gt;\&lt;/code&gt; and combine commands if possible. See this example:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;RUN  	apt-get update &amp;amp;&amp;amp; \
	apt-get -y install apache2 &amp;amp;&amp;amp; \
	apt-get clean

...

EXPOSE 80,443
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Again, remove any commands that are not needed&lt;/strong&gt;, i.e. avoid downloading and installing packages that will not be used.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;At the end of a Dockerfile, remove any files that are useless&lt;/strong&gt;, e.g. execute &lt;code&gt;apt-get autoremove &amp;amp;&amp;amp; apt-get clean&lt;/code&gt; after installing several packages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Also, refer to these blog posts that provide more hints (advanced)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.xebia.com/2015/06/30/how-to-create-the-smallest-possible-docker-container-of-any-image/&#34;&gt;How to create the smallest possible docker image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you have a service in Go:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.atlassian.com/blog/2015/07/osx-static-golang-binaries-with-docker/&#34;&gt;Static Go binaries with Docker on OSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aerofs/gockerize&#34;&gt;Automatically build static Go binaries and put them into containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://joeshaw.org/smaller-docker-containers-for-go-apps/&#34;&gt;Smaller Docker containers for Go apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use the comments below to share your experiences. Also, join the discussions in the &lt;a href=&#34;https://gitter.im/hypriot/talk&#34;&gt;community channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We wish &lt;strong&gt;happy porting parties&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Mathias &amp;amp; Andreas&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Access your Docker-based Raspberry Pi at home from the internet</title>
      <link>http://blog.hypriot.com/post/access_your_raspberry_pi_from_the_internet/</link>
      <pubDate>Thu, 06 Aug 2015 09:55:55 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/access_your_raspberry_pi_from_the_internet/</guid>
      <description>

&lt;p&gt;If you followed our guides about &lt;a href=&#34;http://blog.hypriot.com/post/run-your-own-github-like-service-with-docker/&#34;&gt;setting up a git service&lt;/a&gt; or about &lt;a href=&#34;http://blog.hypriot.com/post/static-website-generation-on-steriods-with-docker/&#34;&gt;setting up a blog&lt;/a&gt; on your Raspberry Pi, you might want to access these services from the internet. In most cases, this requires three steps to be done. We will show how to take them successfully.&lt;/p&gt;

&lt;p&gt;First check, which of the following two cases match your network environment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you have full access to your router, i.e. if you are able to change your router&amp;rsquo;s configuration, this blog post is exactly what you will need to go through. Please double check and log in into your router&amp;rsquo;s admin panel. If you are able to login, continue reading below.&lt;/li&gt;
&lt;li&gt;Else if you cannot login into your router or if you sit behind a firewall, you need to use solutions that implement the so called &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hole_punching_%28networking%29&#34;&gt;hole punching technique&lt;/a&gt;&lt;/em&gt;. In this case, you may wait for the blog post covering that at some day in the future :-) If you are curious already today, have a look at &lt;a href=&#34;https://ngrok.com/&#34;&gt;ngrok&lt;/a&gt;, &lt;a href=&#34;http://localtunnel.me/&#34;&gt;localtunnel&lt;/a&gt; or &lt;a href=&#34;https://pagekite.net/&#34;&gt;pagekite&lt;/a&gt;, and ping us if you need help to set them up!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since you have access to your router, this prerequisite is met and we can start to make your Raspberry Pi accessible from the internet! There&amp;rsquo;s just one thing more to mention upfront: The instructions we provide are not always as step-by-step as we would like to offer them. It&amp;rsquo;s just that the hardware you use and your network topology probably differ a lot among other readers&amp;rsquo; setup. Thus at some point we rather explain the overall concepts and ask you to adapt the concepts to your environment. We do our best to make it a painless experience for you, of course!&lt;/p&gt;

&lt;p&gt;The three steps we gonna take in the following, are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.hypriot.com/post/access_your_raspberry_pi_from_the_internet/#step-1-setup-dynamic-dns:fb391bf85a6f0a9f03fa40ecb16bfcab&#34;&gt;Step 1: Register at a Dynamic DNS service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.hypriot.com/post/access_your_raspberry_pi_from_the_internet/#step-2-configure-port-forwarding-in-your-router:fb391bf85a6f0a9f03fa40ecb16bfcab&#34;&gt;Step 2: Define port forwarding rules in your router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.hypriot.com/post/access_your_raspberry_pi_from_the_internet/#step-3-docker-run-your-containers-with-published-ports:fb391bf85a6f0a9f03fa40ecb16bfcab&#34;&gt;Step 3: Docker run your containers with published ports&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, hands on!&lt;/p&gt;

&lt;h2 id=&#34;step-1-setup-dynamic-dns:fb391bf85a6f0a9f03fa40ecb16bfcab&#34;&gt;Step 1: Setup Dynamic DNS&lt;/h2&gt;

&lt;p&gt;A Dynamic DNS provider maps a domain to the IP address of the router at your home. For example, if the Dynamic DNS provider offers the domain &lt;em&gt;my-home.domain-of-provider.org&lt;/em&gt; to you, you will reach your home by just typing this domain into your browser - from all over the world. This is useful because your router usually changes its IP address it is accessible from the internet on a daily basis. Thus, you want some automated tracking  of these changes. Moreover it is often easier to remember a domain instead of an IP address. Therefore, first we register a free domain that always routes to your router at home.&lt;/p&gt;

&lt;p&gt;As a Dynamic DNS provider, we recommend &lt;a href=&#34;https://virtual-ip.org/&#34;&gt;virtual-ip.org&lt;/a&gt;, which is free and has no commercial purpose.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/access_service_from_internet/virtual_ip.png&#34; alt=&#34;virtual_ip.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Follow these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Register at &lt;a href=&#34;https://virtual-ip.org/&#34;&gt;virtual-ip.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;After login, on the main page, click on the button &lt;strong&gt;Add Host&lt;/strong&gt;. There, choose a hostname and click the blue button &lt;strong&gt;Add Host&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the list on the main page, you should see a table showing a domain name and an IP address. The domain name will be the one you will reach your home with.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, you need to install &lt;em&gt;virtual-ip.org&lt;/em&gt; as Dynamic DNS provider in your router. First you need to &lt;strong&gt;login to your router&lt;/strong&gt;. To do so, point your browser to the IP address of your router. If you are not sure about the IP address of your router, try to figure out your own IP address, which is e.g. &lt;code&gt;192.168.0.20&lt;/code&gt;. Then, exchange the last number of your own IP address by &lt;code&gt;1&lt;/code&gt;. The resulting IP address is often assigned to your router. Point your browser to this IP address and you should see your router&amp;rsquo;s web interface:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/access_service_from_internet/fritzbox_login.png&#34; alt=&#34;fritzbox_login&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The screenshot is taken of the web interface of a router called &amp;ldquo;Fritz!Box&amp;rdquo;, which we will use to show the steps in the following. If you have a different router, check if your device is listed in the &lt;a href=&#34;https://virtual-ip.org/support.aspx&#34;&gt;documentation of virtual-ip.org about how to configure Dynamic DNS&lt;/a&gt;. If your device is not listed, try to apply the following steps to your device accordingly.&lt;/p&gt;

&lt;p&gt;In our case, using the Fritz!Box, you need to go to &lt;strong&gt;Internet&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Permit Access&lt;/strong&gt; and open the &lt;strong&gt;Dynamic DNS&lt;/strong&gt; tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/access_service_from_internet/fritz_box_dyn-dns-settings.png&#34; alt=&#34;fritz_box_dyn-dns-settings.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Here, &lt;strong&gt;Activate the checkbox and fill the fields with your credentials of virtual-ip.org&lt;/strong&gt;. If the Update URL is not provided in the &lt;em&gt;virtual-ip.org&lt;/em&gt; documenation, try the following one. In advance, replace &lt;code&gt;&amp;lt;your-domain&amp;gt;&lt;/code&gt; with the domain you just registered at &lt;em&gt;virtual-ip.org&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://update.virtual-ip.org/nic/update?system=dyndns&amp;amp;hostname=&amp;lt;your-domain&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After you have set the configuration for Dynamic DNS in your router, &lt;strong&gt;login to virtual-ip.org&lt;/strong&gt;. Now, the IP address of your router should be displayed in the column &lt;strong&gt;IP Address&lt;/strong&gt; next to your new domain as in the following screenshot. You can double check if this really is your IP address with a service like &lt;a href=&#34;https://www.whatismyip.com/&#34;&gt;whatismyip.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/access_service_from_internet/virtual_ip_domain-list.png&#34; alt=&#34;virtual_ip_domain-list.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations!&lt;/strong&gt; At this point you can reach your router at home by a domain in the internet. However, your requests won&amp;rsquo;t reach the Raspberry Pi yet because the router is not configured to forward requests from your router to the Raspberry Pi. Continue with the following section to configure this.&lt;/p&gt;

&lt;h2 id=&#34;step-2-configure-port-forwarding-in-your-router:fb391bf85a6f0a9f03fa40ecb16bfcab&#34;&gt;Step 2: Configure port forwarding in your router&lt;/h2&gt;

&lt;p&gt;In order to forward requests from your router to the Raspberry Pi, you need create &lt;em&gt;port forwarding rules&lt;/em&gt; in your router.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create a port forwarding rule for an app on your Raspberry Pi. In the web interface of your router, find the section &lt;em&gt;Port Forwarding&lt;/em&gt; or alike. In our case, we go to &lt;strong&gt;Internet&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Permit Access&lt;/strong&gt;. As shown in the following screenshot, you should see an option to create port forwarding rules. Klick on &lt;strong&gt;New Port Forwading&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/access_service_from_internet/fritzbox_port-forwarding-menu-port-forwarding-start.png&#34; alt=&#34;fritzbox_port-forwarding-menu-port-forwarding-start.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Then, the web interface asks for some input. Before we gonna provide this, choose &lt;strong&gt;other applications&lt;/strong&gt; in the drop down box. This will expand the input fields as shown in the next screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/access_service_from_internet/fritzbox_port-forwarding-rules-input-empty.png&#34; alt=&#34;fritzbox_port-forwarding-rules-input-empty.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Now refer to the following table to provide the required input. Also have look at the next screenshot which shows an example of the result.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Input field&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Name&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Choose an arbitrary name for the port forwarding rule.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Protocol&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Use option &lt;code&gt;TCP&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;From Port x through Port y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Provide the port number the app on your Raspberry Pi listens on. We do not need a range of several port numbers here, so type in the same port number twice.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;To computer&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Type the IP address of your Raspberry Pi&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;To Port&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Type the same port number as in field &lt;code&gt;From port&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If you are not sure about the port numbers you need to define, checkout the chapter &lt;em&gt;Example: How to create port forwarding rules for Docker containers&lt;/em&gt; below. There we will give some introduction of how port forwarding works.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/access_service_from_internet/fritzbox_port-forwarding-fules-inputs-filled.png&#34; alt=&#34;fritzbox_port-forwarding-fules-inputs-filled.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Save. Next you should see a list of all rules that have been created. Make sure that the rule is &lt;strong&gt;Enabled&lt;/strong&gt; and that the parameters are correct.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/access_service_from_internet/fritzbox_port-forwarding-see-config.png&#34; alt=&#34;fritzbox_port-forwarding-see-config.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations!&lt;/strong&gt; You managed to configure everything to reach your Raspberry Pi from the internet. Next, we will see how to bring Docker into this game.&lt;/p&gt;

&lt;h2 id=&#34;step-3-docker-run-your-containers-with-published-ports:fb391bf85a6f0a9f03fa40ecb16bfcab&#34;&gt;Step 3: Docker run your containers with published ports&lt;/h2&gt;

&lt;p&gt;Before we get down to Docker, we will put some technical details about how port forwarding works upfront.&lt;/p&gt;

&lt;p&gt;Incoming requests from the internet to your router will always include a port number, e.g. &lt;code&gt;my-home.domain-of-provider.org:8080&lt;/code&gt;. This port number (here: &lt;code&gt;8080&lt;/code&gt;)  tells the router, that this request wants to be forwarded to a device in your local network that is specified as the receiver for all requests to port &lt;code&gt;8080&lt;/code&gt;. This specification has to be done manually by creating &lt;em&gt;port forwarding rules&lt;/em&gt; in your router. Doing so, you tell the router, which requests it should forward to which device in your local network.&lt;/p&gt;

&lt;p&gt;For instance you can create a port forwarding rule saying&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All incoming requests to port 8080 shall be forwarded to 192.168.0.10&lt;/em&gt;,&lt;/p&gt;

&lt;p&gt;where &lt;code&gt;192.168.0.10&lt;/code&gt; is the IP address of your Raspberry Pi.&lt;/p&gt;

&lt;p&gt;The port that is published by a Docker container on your Raspberry Pi is specified whenever you start a new Docker container with&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run --publish &amp;lt;port number&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For instance, if you execute&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run --publish 8080:8080&lt;/code&gt;,&lt;/p&gt;

&lt;p&gt;your container will be available at port &lt;code&gt;8080&lt;/code&gt;. For us, only the first port number is relevant. Just specify the port twice, like &lt;code&gt;8080:8080&lt;/code&gt; and you will be fine. Now, you can specify a port forwarding rule in your router that forwards requests to port &lt;code&gt;8080&lt;/code&gt; to the IP address of your Raspberry Pi.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note (1)! You need to create one port forwarding rule for each port you publish when creating a new Docker container.&lt;/strong&gt; Doing so, make sure that you always use one port only once. You cannot bind the same port to two different Docker containers. However, some Docker containers might require to publish several ports on your Raspberry Pi. This is true e.g. when setting up the &lt;a href=&#34;http://blog.hypriot.com/post/run-your-own-github-like-service-with-docker/&#34;&gt;Gogs Git service&lt;/a&gt;. Then, you need to create rules in your router saying that all requests to these ports shall be forwarded to the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note (2)! In case you already started a container and want to know which port a container has published, execute&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker ps&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You will see a list of all running Docker containers. In the column &lt;strong&gt;PORTS&lt;/strong&gt; you find the ports a container has published. Use the port number in front of the &lt;code&gt;-&amp;gt;&lt;/code&gt; sign as port number when creating the forwarding rules your router.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/access_service_from_internet/docker-ps_on_rpi_with-marker.png&#34; alt=&#34;docker-ps_on_rpi_with-marker.png&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;finally-test-your-setup:fb391bf85a6f0a9f03fa40ecb16bfcab&#34;&gt;Finally test your setup&lt;/h2&gt;

&lt;p&gt;To test your setup, we recommend to use a simple webserver you make available to the internet. In the terminal on your Raspberry Pi, execute as root:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d --publish 80:80 hypriot/rpi-busybox-httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, point your browser to the domain name you registered at the Dynamic DNS service. If everything has been configured properly, a small website from our team should appear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/access_service_from_internet/browser-pi-hypriot-logo.png&#34; alt=&#34;browser-pi-hypriot-logo&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;We cross our fingers so that it will work for you! Please use the comments below to give us feedback and share it on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;&amp;ndash; Mathias&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Moving Docker from Wheezy to Jessie</title>
      <link>http://blog.hypriot.com/post/moving-docker-from-wheezy-to-jessie/</link>
      <pubDate>Mon, 27 Jul 2015 20:37:38 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/moving-docker-from-wheezy-to-jessie/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;What’s even better then Wheezy? Yes, your right - that’s Jessie.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And that’s not only because we very much like what crazy stuff &lt;em&gt;&lt;a href=&#34;https://blog.jessfraz.com/&#34;&gt;Jessie&lt;/a&gt;&lt;/em&gt; is doing with Docker.
No, it’s because &lt;em&gt;Jessie&lt;/em&gt; is &lt;a href=&#34;http://arstechnica.com/information-technology/2015/05/debian-8-linuxs-most-reliable-distro-makes-its-biggest-change-since-1993/&#34;&gt;the next version of the Debian operating system&lt;/a&gt; that forms the foundation of our SD card image.&lt;/p&gt;

&lt;p&gt;Jessie updates all the included software to much more recent versions. And most notably it switches the old sys-v-init startup system to systemd.&lt;/p&gt;

&lt;h3 id=&#34;battle-tested-docker-jessie-with-some-sugar:4fe06647c823b8256063c23fed15f529&#34;&gt;Battle-Tested Docker-Jessie with some sugar&lt;/h3&gt;

&lt;p&gt;On top of that we added all the battle-tested ingredients of our previous Get-Docker-Running-in-under-5-Minutes SD card image:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a kernel optimised for Docker-awesomeness: &lt;strong&gt;Kernel 3.18.11 with support for OverlayFS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;the most recent &lt;strong&gt;Docker 1.7.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Pi 1 &amp;amp; 2&lt;/strong&gt; with the same image&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;network hotplugging&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;out of the box support for &lt;strong&gt;Wifi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Avahi&lt;/strong&gt; (aka Apple Bonjour)&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Open vSwitch&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We consider this new version of our SD card image still as &lt;strong&gt;beta quality&lt;/strong&gt;.
During the next two weeks we want to improve it step by step and gather feedback to make it a great out-of-the-box experience for our users.&lt;/p&gt;

&lt;h3 id=&#34;get-it-while-it-is-still-hot:4fe06647c823b8256063c23fed15f529&#34;&gt;Get it while it is still hot&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150727-151455.img.zip&#34;&gt;hypriot-rpi-20150727-151455.img.zip&lt;/a&gt; (~ 424 MB)&lt;br /&gt;
&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150727-151455.img.zip.sha256&#34;&gt;SHA256 checksum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started-Guide&lt;/a&gt; on how to get this SD card image running on our Pi.&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Govinda&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let Docker Swarm all over your Raspberry Pi Cluster</title>
      <link>http://blog.hypriot.com/post/let-docker-swarm-all-over-your-raspberry-pi-cluster/</link>
      <pubDate>Fri, 03 Jul 2015 00:30:45 +0100</pubDate>
      
      <guid>http://blog.hypriot.com/post/let-docker-swarm-all-over-your-raspberry-pi-cluster/</guid>
      <description>

&lt;p&gt;In this blog post we show you how easy it is to install Swarm on your Raspberry Pi and how to set up a Raspberry Pi Swarm cluster with the help of Docker Machine.&lt;/p&gt;

&lt;p&gt;We have built a little &amp;ldquo;Pi Tower&amp;rdquo; with three Raspberry Pi 2 model B and combined them into a Docker Swarm cluster.&lt;/p&gt;

&lt;p&gt;As you can see in the pictures below we have mounted the three Raspberry Pi&amp;rsquo;s on top of a 5-port D-Link GBit switch. All four devices get their power from an Anker 4-port USB charger.
This makes a very solid but portable &amp;ldquo;Pi Tower&amp;rdquo; with only one power plug and one external network connector.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;gallery clearfix&#34; itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Pi Tower&lt;/div&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/docker-swarm/d-link_mounting_holes.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/docker-swarm/thumbnails/thumb_d-link_mounting_holes.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;The Making of Pi Tower&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    The Making of Pi Tower
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/docker-swarm/d-link_rpi2_cluster.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/docker-swarm/thumbnails/thumb_d-link_rpi2_cluster.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Pi Tower with D-Link Switch&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Pi Tower with D-Link Switch
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/docker-swarm/d-link_rpi2_cluster02.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/docker-swarm/thumbnails/thumb_d-link_rpi2_cluster02.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Pi Tower with D-Link Switch&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Pi Tower with D-Link Switch
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/docker-swarm/d-link_rpi2_cluster_lights.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/docker-swarm/thumbnails/thumb_d-link_rpi2_cluster_lights.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Pi Tower at night&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Pi Tower at night
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/photoswipe.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/default-skin/default-skin.css&#34;&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe-ui-default.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/initphotoswipe.js&#34;&gt;&lt;/script&gt;



&lt;div class=&#34;pswp&#34; tabindex=&#34;-1&#34; role=&#34;dialog&#34; aria-hidden=&#34;true&#34;&gt;

&lt;div class=&#34;pswp__bg&#34;&gt;&lt;/div&gt;

&lt;div class=&#34;pswp__scroll-wrap&#34;&gt;
    
    &lt;div class=&#34;pswp__container&#34;&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    
    &lt;div class=&#34;pswp__ui pswp__ui--hidden&#34;&gt;
    &lt;div class=&#34;pswp__top-bar&#34;&gt;
      
      &lt;div class=&#34;pswp__counter&#34;&gt;&lt;/div&gt;
      &lt;button class=&#34;pswp__button pswp__button--close&#34; title=&#34;Close (Esc)&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--share&#34; title=&#34;Share&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--fs&#34; title=&#34;Toggle fullscreen&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--zoom&#34; title=&#34;Zoom in/out&#34;&gt;&lt;/button&gt;
      
      
      &lt;div class=&#34;pswp__preloader&#34;&gt;
        &lt;div class=&#34;pswp__preloader__icn&#34;&gt;
          &lt;div class=&#34;pswp__preloader__cut&#34;&gt;
            &lt;div class=&#34;pswp__preloader__donut&#34;&gt;&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;pswp__share-modal pswp__share-modal--hidden pswp__single-tap&#34;&gt;
      &lt;div class=&#34;pswp__share-tooltip&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--left&#34; title=&#34;Previous (arrow left)&#34;&gt;
    &lt;/button&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--right&#34; title=&#34;Next (arrow right)&#34;&gt;
    &lt;/button&gt;
    &lt;div class=&#34;pswp__caption&#34;&gt;
      &lt;div class=&#34;pswp__caption__center&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;style&gt;
    .gallery {  }
    .gallery img { width: 100%; height: auto; }
    .gallery figure { display: block; float: left; margin: 0 5px 5px 0; width: 200px; }
    .gallery figcaption { display: none; }
    .gallery div.title { font-weight: bold; }
    span[itemprop=&#34;copyrightHolder&#34;] { color : #888; float: right; }
    span[itemprop=&#34;copyrightHolder&#34;]:before { content: &#34;Foto: &#34;; }
    img[itemprop=&#34;thumbnail&#34;]{ width: 200px; }
&lt;/style&gt;


&lt;script&gt;initPhotoSwipeFromDOM(&#39;.gallery&#39;);&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;For your convenience we have prepared a &lt;a href=&#34;http://www.amazon.de/gp/registry/wishlist/BCGEW9W3V8GM/ref=cm_wl_rlist_go_o&#34;&gt;small shopping list&lt;/a&gt; of all the components we used at Amazon.&lt;/p&gt;

&lt;h2 id=&#34;pre-requisites:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Pre-requisites&lt;/h2&gt;

&lt;p&gt;For this tutorial we will run all steps from a Mac. To do this we need three tools.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A flash tool to write the SD card images for all the Raspberry Pi&amp;rsquo;s.&lt;/li&gt;
&lt;li&gt;The Docker client, which is only a &lt;code&gt;brew install docker&lt;/code&gt; away.&lt;/li&gt;
&lt;li&gt;The Docker Machine binary with the hypriot driver&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;flash-all-sd-cards:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Flash all SD cards&lt;/h2&gt;

&lt;p&gt;First we want to install the SD cards with Docker preinstalled.
On a Mac or Linux machine we can use our little &lt;a href=&#34;https://github.com/hypriot/flash&#34;&gt;flash command line tool&lt;/a&gt; to prepare the three SD cards with these simple commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ flash --hostname pi1 http://downloads.hypriot.com/hypriot-rpi-20150416-201537.img.zip
$ flash --hostname pi2 http://downloads.hypriot.com/hypriot-rpi-20150416-201537.img.zip
$ flash --hostname pi3 http://downloads.hypriot.com/hypriot-rpi-20150416-201537.img.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now insert the SD cards into all Raspberry Pi&amp;rsquo;s and boot them. They will come up with different host names after a while.&lt;/p&gt;

&lt;h2 id=&#34;retrieve-ip-addresses:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Retrieve IP addresses&lt;/h2&gt;

&lt;p&gt;Our SD card image also starts the avahi-daemon to announce the hostname through mDNS, so each Pi is reachable with &lt;code&gt;pi1.local&lt;/code&gt;, &lt;code&gt;pi2.local&lt;/code&gt; and &lt;code&gt;pi3.local&lt;/code&gt;.
Docker Machine cannot resolve these hostnames at the moment, so we have to retrieve the IP addresses for the Raspberry Pi&amp;rsquo;s manually.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ping -c 1 pi1.local
$ ping -c 1 pi2.local
$ ping -c 1 pi3.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this example we assume that the three IP adresses are &lt;code&gt;192.168.1.101&lt;/code&gt;, &lt;code&gt;102&lt;/code&gt; and &lt;code&gt;103&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;insert-ssh-public-key:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Insert SSH public key&lt;/h2&gt;

&lt;p&gt;Docker Machine connects to each Raspberry Pi through SSH. You have to insert your public SSH key to avoid entering the password of the &lt;code&gt;root&lt;/code&gt; user.
To insert the SSH public key into a remote machine there is a tool called &lt;code&gt;ssh-copy-id&lt;/code&gt;. You might have to install it first.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ssh-copy-id root@192.168.1.101
$ ssh-copy-id root@192.168.1.102
$ ssh-copy-id root@192.168.1.103
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For each of the above commands you have to enter the password &lt;code&gt;hypriot&lt;/code&gt; for the user &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-docker-machines:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Create Docker Machines&lt;/h2&gt;

&lt;p&gt;For the next step we use our Docker Machine driver to connect to the Raspberry Pi Hypriot devices.
Our hypriot driver is not yet integrated into the official Docker Machine binary.
So we have to download the &lt;code&gt;docker-machine&lt;/code&gt; binary with our hypriot machine driver.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -o docker-machine http://downloads.hypriot.com/docker-machine_0.4.0-dev_darwin-amd64
$ chmod +x ./docker-machine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download the binary into the current directory and make it executable. You may move it
into another directory in your PATH to use it from other directories.&lt;/p&gt;

&lt;h3 id=&#34;create-swarm-token:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Create Swarm Token&lt;/h3&gt;

&lt;p&gt;A Docker Swarm cluster uses a unique Cluster ID which allows the individual swarm agents to find each other.
We need such a Cluster ID to build our Docker Swarm.&lt;/p&gt;

&lt;p&gt;This can be done in your shell with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export TOKEN=$(for i in $(seq 1 32); do echo -n $(echo &amp;quot;obase=16; $(($RANDOM % 16))&amp;quot; | bc); done; echo)
$ echo $TOKEN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this example we use&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export TOKEN=babb1eb00bdecadedec0debabb1eb00b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you already have a Docker swarm container up and running, you also can create a new Cluster ID
with &lt;code&gt;docker run --rm hypriot/rpi-swarm create&lt;/code&gt;.
We simply used the shell commands above to skip this chicken or egg problem.&lt;/p&gt;

&lt;h3 id=&#34;create-the-swarm-master:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Create the Swarm Master&lt;/h3&gt;

&lt;p&gt;Now we create the Docker Swarm Master on the first Raspberry Pi with our generated Cluster ID&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./docker-machine create -d hypriot --swarm --swarm-master --swarm-discovery token://$TOKEN --hypriot-ip-address 192.168.1.101 pi1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command connects to the Raspberry Pi &amp;ldquo;pi1&amp;rdquo;, secures the Docker daemon with TLS and pulls the Docker image &lt;code&gt;hypriot/rpi-swarm:latest&lt;/code&gt; from the Docker Hub.
It starts both the Swarm Master as well as a Swarm Agent in a container.&lt;/p&gt;

&lt;p&gt;To check if everything works we can connect to the newly started Swarm Master by using the following command.
It retrieves all environment variables needed for the Docker client to communicate with the Swarm.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ eval $(./docker-machine env --swarm pi1)
$ docker info
Containers: 2
Strategy: spread
Filters: affinity, health, constraint, port, dependency
Nodes: 1
 pi1: 192.168.1.202:2376
  └ Containers: 2
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.3 MiB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have successfully set up a lonely Swarm Manager. Let&amp;rsquo;s start some more Raspberry Pi&amp;rsquo;s to prevent the Swarm Manager from feeling lonely.&lt;/p&gt;

&lt;h3 id=&#34;create-the-swarm-agents:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Create the Swarm agents&lt;/h3&gt;

&lt;p&gt;For the rest of the Raspberry Pi&amp;rsquo;s we also create Docker Machine connections with the same Cluster ID.
This time we run docker-machine without the &lt;code&gt;--swarm-master&lt;/code&gt; option to just spin up a Swarm Agent container in each Pi.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./docker-machine create -d hypriot --swarm --swarm-discovery token://$TOKEN --hypriot-ip-address 192.168.1.102 pi2
$ ./docker-machine create -d hypriot --swarm --swarm-discovery token://$TOKEN --hypriot-ip-address 192.168.1.103 pi3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s check what the swarm looks like now&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker info
Containers: 4
Strategy: spread
Filters: affinity, health, constraint, port, dependency
Nodes: 3
 pi1: 192.168.1.101:2376
  └ Containers: 2
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.3 MiB
 pi2: 192.168.1.102:2376
  └ Containers: 1
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.3 MiB
 pi3: 192.168.1.103:2376
  └ Containers: 1
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.3 MiB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also can list all containers in the whole swarm as usual with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker ps
CONTAINER ID        IMAGE                      COMMAND                CREATED             STATUS              PORTS                                    NAMES
5effaa7de4a3        hypriot/rpi-swarm:latest   &amp;quot;/swarm join --addr    2 minutes ago       Up About a minute   2375/tcp                                 pi3/swarm-agent
6b73003b7246        hypriot/rpi-swarm:latest   &amp;quot;/swarm join --addr    4 minutes ago       Up 3 minutes        2375/tcp                                 pi2/swarm-agent
5e00fbf7b9f6        hypriot/rpi-swarm:latest   &amp;quot;/swarm join --addr    7 minutes ago       Up 7 minutes        2375/tcp                                 pi1/swarm-agent
02c905ec25a0        hypriot/rpi-swarm:latest   &amp;quot;/swarm manage --tls   7 minutes ago       Up 7 minutes        2375/tcp, 192.168.1.101:3376-&amp;gt;3376/tcp   pi1/swarm-agent-master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After setting up the Docker Swarm you now can use the normal Docker commands through port 3376.
Have a look at the &lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;official Docker Swarm documentation&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;Just remember to set up the environment correctly to communicate with the Swarm Master before using the Docker client by&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ eval $(docker-machine env --swarm pi1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then you can remotely manage your Raspberry Pi Swarm from your Mac. See - this was not really difficult, was it?&lt;/p&gt;

&lt;p&gt;We hope you enjoyed this little tour of Docker Swarm!&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Stefan&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
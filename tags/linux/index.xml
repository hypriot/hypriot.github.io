<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Docker Pirates ARMed with explosive stuff</title>
    <link>https://blog.hypriot.com/tags/linux/index.xml</link>
    <description>Recent content in Linux on Docker Pirates ARMed with explosive stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://blog.hypriot.com/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docker Engine on Intel Linux runs Arm Containers</title>
      <link>https://blog.hypriot.com/post/docker-intel-runs-arm-containers/</link>
      <pubDate>Sat, 27 Apr 2019 10:48:50 -0700</pubDate>
      
      <guid>https://blog.hypriot.com/post/docker-intel-runs-arm-containers/</guid>
      <description>&lt;p&gt;Did you read the latest news from Docker about their newly announced technology partnership together with Arm, &lt;a href=&#34;https://twitter.com/Docker/status/1121054608795688963&#34;&gt;&amp;ldquo;Docker and Arm Partner to Deliver Frictionless Cloud-Native Software Development and Delivery Model for Cloud, Edge, and IoT&amp;rdquo;&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.hypriot.com/images/docker-intel-runs-arm-containers/arm-docker-logo.jpg&#34; alt=&#34;arm-docker-logo.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is really a great ground-breaking news, as it will enable an improved development workflow. Build and test all your Arm containers on your Intel-based laptop or workstation. These new Arm capabilities will be available in &lt;a href=&#34;https://www.docker.com/products/docker-desktop&#34;&gt;Docker Desktop&lt;/a&gt; products from Docker, both for MacOs and Windows, and for Dockerâ€™s commercial enterprise offerings. First technical details and roadmap will be announced next week at &lt;a href=&#34;https://www.docker.com/dockercon/&#34;&gt;DockerCon 2019&lt;/a&gt; in San Francisco, so please stay tuned.&lt;/p&gt;

&lt;p&gt;But wait, what about all the users who are directly working on a pure Linux environment? Well, here is the good news, the basic technology you need is already available and ready-to-use for you.&lt;/p&gt;

&lt;p&gt;Yes, you could use it right away! Let&amp;rsquo;s start it now&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;run-an-arm-container-with-docker-engine-on-intel&#34;&gt;Run an Arm Container with Docker Engine on Intel&lt;/h3&gt;

&lt;p&gt;I don&amp;rsquo;t want to hold you back and bore you with a lot of background details, so I&amp;rsquo;m going to show you how easy it is today.&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s start with a default Docker Engine installed on an Intel-based Linux system. For the sake of simplicity I&amp;rsquo;d like to show it directly on the &lt;a href=&#34;https://www.katacoda.com&#34;&gt;Katacoda Training Platform&lt;/a&gt;, then you are able to replay it without spending too much time. It just takes you a few seconds to spin up a complete Linux Docker environment, just a few click away.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Start the &lt;a href=&#34;https://www.katacoda.com/contino/courses/docker/basics&#34;&gt;Docker Tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next you have to click on &amp;ldquo;START SCENARIO&amp;rdquo; and the Linux Docker environment is ready for you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.hypriot.com/images/docker-intel-runs-arm-containers/katacoda-docker-tutorial-start.jpg&#34; alt=&#34;katacoda-docker-tutorial-start.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Run an Arm-based Container&lt;/p&gt;

&lt;p&gt;In the bottom right box you&amp;rsquo;ll find a Linux Terminal window where you can issue your CLI commands. It&amp;rsquo;s a real Linux bash shell you can control through your browser and Docker is already installed on this machine.&lt;/p&gt;

&lt;p&gt;As soon as we try to start an Arm-based Docker container,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -it dieterreuter/alpine-arm64:3.9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we&amp;rsquo;ll get an cryptic error message &lt;code&gt;exec user process caused &amp;quot;exec format error&amp;quot;&lt;/code&gt;, which basically tells us that this Docker Image tries to start a binary/executable which can&amp;rsquo;t be run on the provided Intel processor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.hypriot.com/images/docker-intel-runs-arm-containers/katacoda-docker-tutorial-runarm1.jpg&#34; alt=&#34;katacoda-docker-tutorial-runarm1.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Run the magic command to enable Arm/Arm64 on Intel&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm --privileged hypriot/qemu-register
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This registers a few Qemu emulators inside of our Linux kernel with the help of the &lt;code&gt;binfmt&lt;/code&gt; tool. This instructs the Linux loader to start the specific Qemu emulator program to run the binary/executable if it&amp;rsquo;s not based on Intel. Here we register &lt;code&gt;/qemu-arm&lt;/code&gt; for Arm 32-bit and &lt;code&gt;/qemu-aarch64&lt;/code&gt; for Arm 64-bit.&lt;/p&gt;

&lt;p&gt;Just to be precise, these emulators will be registered through a privileged Docker container. This is possible for all Linux kernel versions 4.9 and later. The emulators will be uploaded into memory, registered in the kernel and stay there persistent until you reboot your machine. This means you don&amp;rsquo;t have to change anything inside of your Docker Images, all magic will be done by the Linux kernel on the host system!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm --privileged hypriot/qemu-register
Unable to find image &#39;hypriot/qemu-register:latest&#39; locally
latest: Pulling from hypriot/qemu-register
fc1a6b909f82: Pull complete
247c87d40120: Pull complete
1e300bd4bcdc: Pull complete
79c54222eda0: Pull complete
7d0efdace32f: Pull complete
Digest: sha256:17931ba1f5362c6fbf7f364b32bec7e06e0c376571a9e3b2849dea18ce887c91
Status: Downloaded newer image for hypriot/qemu-register:latest
---
Installed interpreter binaries:
-rwxr-xr-x    3 root     root       6192520 Apr 27 17:17 /qemu-aarch64
-rwxr-xr-x    4 root     root       5606984 Apr 27 17:17 /qemu-arm
-rwxr-xr-x    2 root     root       5987464 Apr 27 17:17 /qemu-ppc64le
---
Registered interpreter=qemu-aarch64
enabled
interpreter /qemu-aarch64
flags: OCF
offset 0
magic 7f454c460201010000000000000000000200b700
mask ffffffffffffff00fffffffffffffffffeffffff
---
Registered interpreter=qemu-arm
enabled
interpreter /qemu-arm
flags: OCF
offset 0
magic 7f454c4601010100000000000000000002002800
mask ffffffffffffff00fffffffffffffffffeffffff
---
Registered interpreter=qemu-ppc64le
enabled
interpreter /qemu-ppc64le
flags: OCF
offset 0
magic 7f454c4602010100000000000000000002001500
mask ffffffffffffff00fffffffffffffffffeffff00
---
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Run an Arm-based Container successfully on Intel&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s start the same Arm-based Docker container again, but this time it actually works successfully.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -it dieterreuter/alpine-arm64:3.9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.hypriot.com/images/docker-intel-runs-arm-containers/katacoda-docker-tutorial-runarm2.jpg&#34; alt=&#34;katacoda-docker-tutorial-runarm2.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When we run the command &lt;code&gt;uname -a&lt;/code&gt; it tell us, we&amp;rsquo;re running a Linux kernel 4.14.29 on Arm 64-bit architecture indicated as &lt;code&gt;aarch64&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;SUCCESS, our Arm 64-bit Docker Container even works on Intel CPU&amp;rsquo;s !!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt; The source code of this magic registration Docker Image is fully open source and can be found at &lt;a href=&#34;https://github.com/hypriot/qemu-register&#34;&gt;https://github.com/hypriot/qemu-register&lt;/a&gt;. I also updated it today to the latest available Qemu 4.0.0 release.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;As you could see, it&amp;rsquo;s damn easy to configure your Intel-based Linux Docker Engine to run 32 or 64-bit Arm Containers in an emulation mode seemlessly. As long as you run a recent Linux kernel 4.9 or later it just works.&lt;/p&gt;

&lt;p&gt;Basically this is the same emulation technology how &lt;a href=&#34;https://www.docker.com/products/docker-desktop&#34;&gt;Docker Desktop&lt;/a&gt; is doing this behind the scenes on MacOS and Windows. BTW, this binfmt feature is already built-in in Docker Desktop since about April 2017.&lt;/p&gt;

&lt;p&gt;In the end it&amp;rsquo;s possible for a user to develop, build and test his/her Arm-based Docker Containers easily on a Intel-based Linux machine. And with the upcoming new features built-in into the Docker Engine this multi-architecture development workflow will get better and better over time.&lt;/p&gt;

&lt;p&gt;For Linux users we can use at least all these basic features. And for Mac and Windows users, Docker will present an even better user experience, so stay tuned for &lt;a href=&#34;https://www.docker.com/dockercon/&#34;&gt;DockerCon 2019&lt;/a&gt; in San Francisco next week.&lt;/p&gt;

&lt;h3 id=&#34;feedback-please&#34;&gt;Feedback, please&lt;/h3&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Please send us your feedback on our &lt;a href=&#34;https://gitter.im/hypriot/talk&#34;&gt;Gitter channel&lt;/a&gt; or tweet your thoughts and ideas on this project at &lt;a href=&#34;https://twitter.com/HypriotTweets&#34;&gt;@HypriotTweets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dieter &lt;a href=&#34;https://twitter.com/Quintus23M&#34;&gt;@Quintus23M&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to get Docker running on your Raspberry Pi using Linux</title>
      <link>https://blog.hypriot.com/getting-started-with-docker-and-linux-on-the-raspberry-pi/</link>
      <pubDate>Fri, 15 May 2015 20:16:11 +0200</pubDate>
      
      <guid>https://blog.hypriot.com/getting-started-with-docker-and-linux-on-the-raspberry-pi/</guid>
      <description>

&lt;p&gt;This guide shows you how to get Docker running on your Raspberry Pi using a &lt;strong&gt;Linux workstation&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you have not read the getting started guide about Docker on the Raspberry Pi yet you might wanna check it out first: &lt;a href=&#34;https://blog.hypriot.com/getting-started-with-docker-on-your-arm-device&#34;&gt;Getting started on your ARM device&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We tried to make this guide as concise as possible. Make sure that you know the basics about the command line and you should be ready to go.
If you don&amp;rsquo;t you can learn the basics in &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/an-introduction-to-the-linux-terminal&#34;&gt;An Introduction to the Linux Terminal&lt;/a&gt; and come back afterwards.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;hardware&lt;/strong&gt; you gonna need to follow along is a Raspberry Pi 1 or 2 and one SD card.&lt;br /&gt;
If you are going to use a Raspberry 2 you will have to use a microSD card - otherwise a normal SD card is sufficient.
We recommend a size of at least 4 GB.&lt;br /&gt;
The SD card contains all the software which we are going to use on our Raspberry Pi.
With software we basically mean two things: first an operating system for your Raspberry Pi and second the software you as user would like to use - e.g. a browser or a word processing program.
In our case the software we wanna use is Docker.&lt;/p&gt;

&lt;p&gt;We - from Hypriot - created a preconfigured &lt;a href=&#34;https://blog.hypriot.com/downloads/&#34;&gt;SD card image&lt;/a&gt; which contains everything you need to run Docker on your Raspberry Pi.
To use the image you first have to download and transfer it to your SD card. Transferring an image to an SD card is often referred to as &lt;em&gt;flashing&lt;/em&gt;.
Afterwards you just have to insert the flashed SD card into your Raspberry Pi and start it up.&lt;/p&gt;

&lt;h3 id=&#34;download-the-hypriot-docker-sd-card-image&#34;&gt;Download the Hypriot Docker SD card image&lt;/h3&gt;

&lt;p&gt;Download our latest SD card image from the &lt;a href=&#34;https://blog.hypriot.com/downloads/&#34;&gt;download page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After the download is completed open a terminal window. To do this use the search function of your Linux distribution and type &lt;em&gt;terminal&lt;/em&gt; and press &lt;em&gt;Enter&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now we will extract the downloaded zip file. Go to your &lt;em&gt;Download&lt;/em&gt; folder first by typing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/Downloads
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Extract the zip file with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unzip hypriot-rpi-201???.img.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the file is unzipped you will have a new file with an &lt;strong&gt;.img&lt;/strong&gt; extension.
In the next step we will flash this file onto your SD card.&lt;/p&gt;

&lt;h3 id=&#34;flash-the-downloaded-image-to-your-sd-card&#34;&gt;Flash the downloaded image to your SD card&lt;/h3&gt;

&lt;p&gt;First put your SD card into the computer. Then in the terminal type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lsblk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see a list of all your disks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.hypriot.com/images/blog_post_getting-started/linux-screenies/lsblk.png&#34; alt=&#34;lsblk&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now identify the SD Card. Look at the fourth column which shows the size of the devices of your workstation.
One item in the list should have a size that is very close to the size of your SD card.
From there get the identifier which is shown in the first column.
In this case the identifier is &lt;code&gt;mmcblk0&lt;/code&gt; and 29,5G refers to a 32 GB sized SD card.&lt;/p&gt;

&lt;p&gt;Next you need to make sure that the partitions of the SD card are &lt;strong&gt;not&lt;/strong&gt; mounted.
Check the column &lt;em&gt;MOUNTPOINT&lt;/em&gt; â€“ if you have any entries in the row of your SD card you need to unmount them.
If not you can skip the unmount command.&lt;/p&gt;

&lt;p&gt;As you can see in the last screenshot we have to unmount one partition.
Copy and paste the path you see in your own &lt;em&gt;MOUNTPOINT&lt;/em&gt; column behind the &lt;code&gt;unmount&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;umount /run/media/mac/8734-1E4C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are ready to flash the SD card. We are going to use the &lt;code&gt;dd&lt;/code&gt; command for this.&lt;/p&gt;

&lt;p&gt;Before we start make sure you&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;replace the parameter &lt;code&gt;if=hypriot-rpi...&lt;/code&gt; with the path to the downloaded image&lt;/li&gt;
&lt;li&gt;replace the parameter &lt;code&gt;of=/dev/mmcblk0&lt;/code&gt; with the identifier of your SD card&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo dd if=hypriot-rpi-201???.img of=/dev/mmcblk0 bs=1M
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While this command is executed you won&amp;rsquo;t get any information about its progress.
Depending on your hardware and the performance of your SD card it will take up to five minutes to flash the image.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;dd&lt;/code&gt; is finished you should get an output like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.hypriot.com/images/blog_post_getting-started/linux-screenies/after-dd.png&#34; alt=&#34;after-dd&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Finally unmount the SD card again in the same way as before.&lt;/p&gt;

&lt;h3 id=&#34;start-your-raspberry-pi-with-the-sd-card&#34;&gt;Start your Raspberry Pi with the SD card&lt;/h3&gt;

&lt;p&gt;Boot your Raspberry Pi by&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;connecting the Raspberry Pi to your local network via an ethernet cable&lt;/li&gt;
&lt;li&gt;putting the SD card into the designated slot&lt;/li&gt;
&lt;li&gt;plugging in the power adapter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After finishing the last step your Raspberry Pi will boot and the LEDs should start blinking.
The very first boot will take one to three minutes as the file system will be resized.&lt;/p&gt;

&lt;h3 id=&#34;ensure-everything-works&#34;&gt;Ensure everything works&lt;/h3&gt;

&lt;p&gt;To check if Docker is actually running we need to log into the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;To do this we need to find out the IP address of your Raspberry Pi first.
If you are not sure what the IP-Address of your PI is, there are different ways of finding it out.
One way is to use the tool &lt;code&gt;nmap&lt;/code&gt; which you might need to install first.&lt;/p&gt;

&lt;p&gt;Depending on the Linux distribution you are using you need one of the following commands to install &lt;code&gt;nmap&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install nmap   # for debian based distros
yum install nmap       # for red hat based distros
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First identify the IP address of your own workstation. Type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hostname -I
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see in the following screenshot our IP address is &lt;code&gt;192.168.0.101&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.hypriot.com/images/blog_post_getting-started/linux-screenies/hostname-i.png&#34; alt=&#34;hostname-i&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then replace the IP address in front of the &lt;code&gt;/24&lt;/code&gt; with yours and type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nmap -sP 192.168.0.101/24 | grep black-pearl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.hypriot.com/images/blog_post_getting-started/linux-screenies/nmap.png&#34; alt=&#34;nmap result of query&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The output of the &lt;code&gt;nmap&lt;/code&gt; command should show you the IP address of your Raspberry Pi.
If you get a blank line without an IP address your Raspberry Pi is probably not connected to the network.
Or there is a problem with the SD card which prevents the Raspberry Pi from booting.&lt;/p&gt;

&lt;p&gt;After you found out the IP address establish a connection to the Raspberry Pi with the ssh command.
Replace the IP address after the &lt;code&gt;@&lt;/code&gt; with the one of your Raspberry Pi.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh pirate@192.168.0.27
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you are asked for the password type &lt;code&gt;hypriot&lt;/code&gt; and hit &lt;em&gt;Enter&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The first time you establish the connection you will be asked if you are sure that you want to connect to the Raspberry Pi - answer with &lt;code&gt;yes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If everything went fine you should now see the &lt;em&gt;HypriotOS&lt;/em&gt; command line prompt waiting for your input.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.hypriot.com/images/blog_post_getting-started/linux-screenies/rpi-first-connect.png&#34; alt=&#34;screenshot docker first connection&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Finally check if the Docker service is running by typing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker info
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of the &lt;code&gt;docker info&lt;/code&gt; command should look similar to:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.hypriot.com/images/blog_post_getting-started/linux-screenies/docker-info.png&#34; alt=&#34;screenshot docker info&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations! You have succeeded in getting Docker running on your Raspberry Pi!&lt;/strong&gt; :)&lt;/p&gt;

&lt;p&gt;You are now ready to continue your exploration of Docker with our &lt;a href=&#34;https://blog.hypriot.com/getting-started-with-docker-on-your-arm-device#going-wild-with-docker-what-can-you-actually-do-with-it:397c66ef19f9f061b6711d2e296cb276&#34;&gt;Getting Started Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker Pirates ARMed with explosive stuff</title>
    <link>http://blog.hypriot.com/</link>
    <description>Recent content on Docker Pirates ARMed with explosive stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Jul 2015 20:37:38 +0200</lastBuildDate>
    <atom:link href="http://blog.hypriot.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Moving Docker from Wheezy to Jessie</title>
      <link>http://blog.hypriot.com/post/moving-docker-from-wheezy-to-jessie/</link>
      <pubDate>Mon, 27 Jul 2015 20:37:38 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/moving-docker-from-wheezy-to-jessie/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;What’s even better then Wheezy? Yes, your right - that’s Jessie.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And that’s not only because we very much like what crazy stuff &lt;em&gt;&lt;a href=&#34;https://blog.jessfraz.com/&#34;&gt;Jessie&lt;/a&gt;&lt;/em&gt; is doing with Docker.
No, it’s because &lt;em&gt;Jessie&lt;/em&gt; is &lt;a href=&#34;http://arstechnica.com/information-technology/2015/05/debian-8-linuxs-most-reliable-distro-makes-its-biggest-change-since-1993/&#34;&gt;the next version of the Debian operating system&lt;/a&gt; that forms the foundation of our SD card image.&lt;/p&gt;

&lt;p&gt;Jessie updates all the included software to much more recent versions. And most notably it switches the old sys-v-init startup system to systemd.&lt;/p&gt;

&lt;h3 id=&#34;battle-tested-docker-jessie-with-some-sugar:4fe06647c823b8256063c23fed15f529&#34;&gt;Battle-Tested Docker-Jessie with some sugar&lt;/h3&gt;

&lt;p&gt;On top of that we added all the battle-tested ingredients of our previous Get-Docker-Running-in-under-5-Minutes SD card image:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a kernel optimised for Docker-awesomeness: &lt;strong&gt;Kernel 3.18.11 with support for OverlayFS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;the most recent &lt;strong&gt;Docker 1.7.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Pi 1 &amp;amp; 2&lt;/strong&gt; with the same image&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;network hotplugging&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;out of the box support for &lt;strong&gt;Wifi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Avahi&lt;/strong&gt; (aka Apple Bonjour)&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Open vSwitch&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We consider this new version of our SD card image still as &lt;strong&gt;beta quality&lt;/strong&gt;.
During the next two weeks we want to improve it step by step and gather feedback to make it a great out-of-the-box experience for our users.&lt;/p&gt;

&lt;h3 id=&#34;get-it-while-it-is-still-hot:4fe06647c823b8256063c23fed15f529&#34;&gt;Get it while it is still hot&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150727-151455.img.zip&#34;&gt;hypriot-rpi-20150727-151455.img.zip&lt;/a&gt; (~ 424 MB)&lt;br /&gt;
&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150727-151455.img.zip.sha256&#34;&gt;SHA256 checksum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started-Guide&lt;/a&gt; on how to get this SD card image running on our Pi.&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Govinda&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let Docker Swarm all over your Raspberry Pi Cluster</title>
      <link>http://blog.hypriot.com/post/let-docker-swarm-all-over-your-raspberry-pi-cluster/</link>
      <pubDate>Fri, 03 Jul 2015 00:30:45 +0100</pubDate>
      
      <guid>http://blog.hypriot.com/post/let-docker-swarm-all-over-your-raspberry-pi-cluster/</guid>
      <description>

&lt;p&gt;In this blog post we show you how easy it is to install Swarm on your Raspberry Pi and how to set up a Raspberry Pi Swarm cluster with the help of Docker Machine.&lt;/p&gt;

&lt;p&gt;We have built a little &amp;ldquo;Pi Tower&amp;rdquo; with three Raspberry Pi 2 model B and combined them into a Docker Swarm cluster.&lt;/p&gt;

&lt;p&gt;As you can see in the pictures below we have mounted the three Raspberry Pi&amp;rsquo;s on top of a 5-port D-Link GBit switch. All four devices get their power from an Anker 4-port USB charger.
This makes a very solid but portable &amp;ldquo;Pi Tower&amp;rdquo; with only one power plug and one external network connector.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;gallery clearfix&#34; itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Pi Tower&lt;/div&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/docker-swarm/d-link_mounting_holes.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/docker-swarm/thumbnails/thumb_d-link_mounting_holes.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;The Making of Pi Tower&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    The Making of Pi Tower
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/docker-swarm/d-link_rpi2_cluster.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/docker-swarm/thumbnails/thumb_d-link_rpi2_cluster.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Pi Tower with D-Link Switch&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Pi Tower with D-Link Switch
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/docker-swarm/d-link_rpi2_cluster02.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/docker-swarm/thumbnails/thumb_d-link_rpi2_cluster02.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Pi Tower with D-Link Switch&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Pi Tower with D-Link Switch
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/docker-swarm/d-link_rpi2_cluster_lights.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/docker-swarm/thumbnails/thumb_d-link_rpi2_cluster_lights.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Pi Tower at night&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Pi Tower at night
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/photoswipe.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/default-skin/default-skin.css&#34;&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe-ui-default.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/initphotoswipe.js&#34;&gt;&lt;/script&gt;



&lt;div class=&#34;pswp&#34; tabindex=&#34;-1&#34; role=&#34;dialog&#34; aria-hidden=&#34;true&#34;&gt;

&lt;div class=&#34;pswp__bg&#34;&gt;&lt;/div&gt;

&lt;div class=&#34;pswp__scroll-wrap&#34;&gt;
    
    &lt;div class=&#34;pswp__container&#34;&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    
    &lt;div class=&#34;pswp__ui pswp__ui--hidden&#34;&gt;
    &lt;div class=&#34;pswp__top-bar&#34;&gt;
      
      &lt;div class=&#34;pswp__counter&#34;&gt;&lt;/div&gt;
      &lt;button class=&#34;pswp__button pswp__button--close&#34; title=&#34;Close (Esc)&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--share&#34; title=&#34;Share&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--fs&#34; title=&#34;Toggle fullscreen&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--zoom&#34; title=&#34;Zoom in/out&#34;&gt;&lt;/button&gt;
      
      
      &lt;div class=&#34;pswp__preloader&#34;&gt;
        &lt;div class=&#34;pswp__preloader__icn&#34;&gt;
          &lt;div class=&#34;pswp__preloader__cut&#34;&gt;
            &lt;div class=&#34;pswp__preloader__donut&#34;&gt;&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;pswp__share-modal pswp__share-modal--hidden pswp__single-tap&#34;&gt;
      &lt;div class=&#34;pswp__share-tooltip&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--left&#34; title=&#34;Previous (arrow left)&#34;&gt;
    &lt;/button&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--right&#34; title=&#34;Next (arrow right)&#34;&gt;
    &lt;/button&gt;
    &lt;div class=&#34;pswp__caption&#34;&gt;
      &lt;div class=&#34;pswp__caption__center&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;style&gt;
    .gallery {  }
    .gallery img { width: 100%; height: auto; }
    .gallery figure { display: block; float: left; margin: 0 5px 5px 0; width: 200px; }
    .gallery figcaption { display: none; }
    .gallery div.title { font-weight: bold; }
    span[itemprop=&#34;copyrightHolder&#34;] { color : #888; float: right; }
    span[itemprop=&#34;copyrightHolder&#34;]:before { content: &#34;Foto: &#34;; }
    img[itemprop=&#34;thumbnail&#34;]{ width: 200px; }
&lt;/style&gt;


&lt;script&gt;initPhotoSwipeFromDOM(&#39;.gallery&#39;);&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;For your convenience we have prepared a &lt;a href=&#34;http://www.amazon.de/gp/registry/wishlist/BCGEW9W3V8GM/ref=cm_wl_rlist_go_o&#34;&gt;small shopping list&lt;/a&gt; of all the components we used at Amazon.&lt;/p&gt;

&lt;h2 id=&#34;pre-requisites:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Pre-requisites&lt;/h2&gt;

&lt;p&gt;For this tutorial we will run all steps from a Mac. To do this we need three tools.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A flash tool to write the SD card images for all the Raspberry Pi&amp;rsquo;s.&lt;/li&gt;
&lt;li&gt;The Docker client, which is only a &lt;code&gt;brew install docker&lt;/code&gt; away.&lt;/li&gt;
&lt;li&gt;The Docker Machine binary with the hypriot driver&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;flash-all-sd-cards:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Flash all SD cards&lt;/h2&gt;

&lt;p&gt;First we want to install the SD cards with Docker preinstalled.
On a Mac or Linux machine we can use our little &lt;a href=&#34;https://github.com/hypriot/flash&#34;&gt;flash command line tool&lt;/a&gt; to prepare the three SD cards with these simple commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ flash --hostname pi1 http://downloads.hypriot.com/hypriot-rpi-20150416-201537.img.zip
$ flash --hostname pi2 http://downloads.hypriot.com/hypriot-rpi-20150416-201537.img.zip
$ flash --hostname pi3 http://downloads.hypriot.com/hypriot-rpi-20150416-201537.img.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now insert the SD cards into all Raspberry Pi&amp;rsquo;s and boot them. They will come up with different host names after a while.&lt;/p&gt;

&lt;h2 id=&#34;retrieve-ip-addresses:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Retrieve IP addresses&lt;/h2&gt;

&lt;p&gt;Our SD card image also starts the avahi-daemon to announce the hostname through mDNS, so each Pi is reachable with &lt;code&gt;pi1.local&lt;/code&gt;, &lt;code&gt;pi2.local&lt;/code&gt; and &lt;code&gt;pi3.local&lt;/code&gt;.
Docker Machine cannot resolve these hostnames at the moment, so we have to retrieve the IP addresses for the Raspberry Pi&amp;rsquo;s manually.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ping -c 1 pi1.local
$ ping -c 1 pi2.local
$ ping -c 1 pi3.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this example we assume that the three IP adresses are &lt;code&gt;192.168.1.101&lt;/code&gt;, &lt;code&gt;102&lt;/code&gt; and &lt;code&gt;103&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;insert-ssh-public-key:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Insert SSH public key&lt;/h2&gt;

&lt;p&gt;Docker Machine connects to each Raspberry Pi through SSH. You have to insert your public SSH key to avoid entering the password of the &lt;code&gt;root&lt;/code&gt; user.
To insert the SSH public key into a remote machine there is a tool called &lt;code&gt;ssh-copy-id&lt;/code&gt;. You might have to install it first.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ssh-copy-id root@192.168.1.101
$ ssh-copy-id root@192.168.1.102
$ ssh-copy-id root@192.168.1.103
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For each of the above commands you have to enter the password &lt;code&gt;hypriot&lt;/code&gt; for the user &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-docker-machines:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Create Docker Machines&lt;/h2&gt;

&lt;p&gt;For the next step we use our Docker Machine driver to connect to the Raspberry Pi Hypriot devices.
Our hypriot driver is not yet integrated into the official Docker Machine binary.
So we have to download the &lt;code&gt;docker-machine&lt;/code&gt; binary with our hypriot machine driver.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -o docker-machine http://downloads.hypriot.com/docker-machine_0.4.0-dev_darwin-amd64
$ chmod +x ./docker-machine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download the binary into the current directory and make it executable. You may move it
into another directory in your PATH to use it from other directories.&lt;/p&gt;

&lt;h3 id=&#34;create-swarm-token:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Create Swarm Token&lt;/h3&gt;

&lt;p&gt;A Docker Swarm cluster uses a unique Cluster ID which allows the individual swarm agents to find each other.
We need such a Cluster ID to build our Docker Swarm.&lt;/p&gt;

&lt;p&gt;This can be done in your shell with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export TOKEN=$(for i in $(seq 1 32); do echo -n $(echo &amp;quot;obase=16; $(($RANDOM % 16))&amp;quot; | bc); done; echo)
$ echo $TOKEN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this example we use&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export TOKEN=babb1eb00bdecadedec0debabb1eb00b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you already have a Docker swarm container up and running, you also can create a new Cluster ID
with &lt;code&gt;docker run --rm hypriot/rpi-swarm create&lt;/code&gt;.
We simply used the shell commands above to skip this chicken or egg problem.&lt;/p&gt;

&lt;h3 id=&#34;create-the-swarm-master:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Create the Swarm Master&lt;/h3&gt;

&lt;p&gt;Now we create the Docker Swarm Master on the first Raspberry Pi with our generated Cluster ID&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./docker-machine create -d hypriot --swarm --swarm-master --swarm-discovery token://$TOKEN --hypriot-ip-address 192.168.1.101 pi1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command connects to the Raspberry Pi &amp;ldquo;pi1&amp;rdquo;, secures the Docker daemon with TLS and pulls the Docker image &lt;code&gt;hypriot/rpi-swarm:latest&lt;/code&gt; from the Docker Hub.
It starts both the Swarm Master as well as a Swarm Agent in a container.&lt;/p&gt;

&lt;p&gt;To check if everything works we can connect to the newly started Swarm Master by using the following command.
It retrieves all environment variables needed for the Docker client to communicate with the Swarm.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ eval $(./docker-machine env --swarm pi1)
$ docker info
Containers: 2
Strategy: spread
Filters: affinity, health, constraint, port, dependency
Nodes: 1
 pi1: 192.168.1.202:2376
  └ Containers: 2
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.3 MiB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have successfully set up a lonely Swarm Manager. Let&amp;rsquo;s start some more Raspberry Pi&amp;rsquo;s to prevent the Swarm Manager from feeling lonely.&lt;/p&gt;

&lt;h3 id=&#34;create-the-swarm-agents:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Create the Swarm agents&lt;/h3&gt;

&lt;p&gt;For the rest of the Raspberry Pi&amp;rsquo;s we also create Docker Machine connections with the same Cluster ID.
This time we run docker-machine without the &lt;code&gt;--swarm-master&lt;/code&gt; option to just spin up a Swarm Agent container in each Pi.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./docker-machine create -d hypriot --swarm --swarm-discovery token://$TOKEN --hypriot-ip-address 192.168.1.102 pi2
$ ./docker-machine create -d hypriot --swarm --swarm-discovery token://$TOKEN --hypriot-ip-address 192.168.1.103 pi3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s check what the swarm looks like now&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker info
Containers: 4
Strategy: spread
Filters: affinity, health, constraint, port, dependency
Nodes: 3
 pi1: 192.168.1.101:2376
  └ Containers: 2
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.3 MiB
 pi2: 192.168.1.102:2376
  └ Containers: 1
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.3 MiB
 pi3: 192.168.1.103:2376
  └ Containers: 1
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.3 MiB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also can list all containers in the whole swarm as usual with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker ps
CONTAINER ID        IMAGE                      COMMAND                CREATED             STATUS              PORTS                                    NAMES
5effaa7de4a3        hypriot/rpi-swarm:latest   &amp;quot;/swarm join --addr    2 minutes ago       Up About a minute   2375/tcp                                 pi3/swarm-agent
6b73003b7246        hypriot/rpi-swarm:latest   &amp;quot;/swarm join --addr    4 minutes ago       Up 3 minutes        2375/tcp                                 pi2/swarm-agent
5e00fbf7b9f6        hypriot/rpi-swarm:latest   &amp;quot;/swarm join --addr    7 minutes ago       Up 7 minutes        2375/tcp                                 pi1/swarm-agent
02c905ec25a0        hypriot/rpi-swarm:latest   &amp;quot;/swarm manage --tls   7 minutes ago       Up 7 minutes        2375/tcp, 192.168.1.101:3376-&amp;gt;3376/tcp   pi1/swarm-agent-master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After setting up the Docker Swarm you now can use the normal Docker commands through port 3376.
Have a look at the &lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;official Docker Swarm documentation&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;Just remember to set up the environment correctly to communicate with the Swarm Master before using the Docker client by&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ eval $(docker-machine env --swarm pi1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then you can remotely manage your Raspberry Pi Swarm from your Mac. See - this was not really difficult, was it?&lt;/p&gt;

&lt;p&gt;We hope you enjoyed this little tour of Docker Swarm!&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Stefan&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Static Website Generation on Steriods with Docker</title>
      <link>http://blog.hypriot.com/post/static-website-generation-on-steriods-with-docker/</link>
      <pubDate>Tue, 30 Jun 2015 09:03:12 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/static-website-generation-on-steriods-with-docker/</guid>
      <description>

&lt;p&gt;Within the blogging community static site generators have been an exceptional hot topic in the last couple of years (at least before Docker appeared).
There are even &lt;a href=&#34;https://www.staticgen.com/&#34;&gt;whole projects&lt;/a&gt; dedicated to giving an overview of the most popular static site generators.&lt;/p&gt;

&lt;p&gt;One of the first static site generators that got really popular was &lt;a href=&#34;https://github.com/jekyll/jekyll/commits/master&#34;&gt;Jekyll&lt;/a&gt;, which was conceived by &lt;a href=&#34;http://tom.preston-werner.com/&#34;&gt;Tom Preston-Werner&lt;/a&gt; of Github fame.
Typically static site generators transform input (e.g. text in a lightweight markup language such as Markdown or reStructuredText) to static HTML with the help of templates and filters.&lt;/p&gt;

&lt;p&gt;There are several advantages to this approach - to name just a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;as the input is text it can easily be managed in a version control system like Git&lt;/li&gt;
&lt;li&gt;as the output is just static HTML it can easily deployed with a cheap webhoster or even for free with a service like &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;static HTML is much faster than dynamic HTML&lt;/li&gt;
&lt;li&gt;there is neither a server-side web-framework nor a database necessary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While Jekyll is still the most popular static site generator there are some new contenders, which are gaining traction very fast.&lt;/p&gt;

&lt;p&gt;Out of these static site generators &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; is our favorite. Hugo is written in &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt; and is focused on speed and performance.
We are using Hugo to generate this very blog&amp;hellip; :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/hugo/hugo-logo.png&#34; alt=&#34;hugo-logo&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;What we like most is that Hugo is basically just one binary. That makes it really easy to use Hugo in a Docker container.
And - surprise - that is exactly what we did. You can find the prepared image on the &lt;a href=&#34;https://registry.hub.docker.com/u/hypriot/rpi-hugo/&#34;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-hugo:208d73d31f997ec1e4befc58fff83e1c&#34;&gt;Setting up Hugo&lt;/h2&gt;

&lt;p&gt;To get started with Hugo you need a Raspberry Pi with a running Docker engine.
The best way to get there is with our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting Started Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After logging into your Rasberry Pi via SSH do a&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker pull hypriot/rpi-hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, create a directory for your awesome new blogging project at a location of your choice.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir awesome-blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change into the new directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd awesome-blog
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-a-new-site:208d73d31f997ec1e4befc58fff83e1c&#34;&gt;Create a new site&lt;/h2&gt;

&lt;p&gt;First create a new site by&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -v `pwd`:/www hypriot/rpi-hugo new site .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Afterwards you will find a basic directory layout which was created by Hugo.
Next we need to download some nifty themes for our new site.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone --recursive --depth 1 https://github.com/spf13/hugoThemes themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you execute &lt;code&gt;ls&lt;/code&gt; you should see a folder structure similar to the one in the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/hugo/hugo-files-after-new-site.png&#34; alt=&#34;hugo-files-after-new-site&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;create-a-new-article:208d73d31f997ec1e4befc58fff83e1c&#34;&gt;Create a new article&lt;/h2&gt;

&lt;p&gt;To create a new article run the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -v `pwd`:/www hypriot/rpi-hugo new post/viral-hit.md
echo &#39;# Hello World from Hypriot!&#39; &amp;gt;&amp;gt; content/post/viral-hit.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create and start a new container based on the &amp;lsquo;hypriot/rpi-hugo&amp;rsquo; image.
It will also mount the current directory into the container at &lt;code&gt;/www&lt;/code&gt; and run &lt;code&gt;hugo new post/viral-hit.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hugo new&lt;/code&gt; creates a new markdown document in the subfolder &lt;code&gt;post&lt;/code&gt;. With the &lt;code&gt;echo&lt;/code&gt; command we add a Hello-World message to our blog post.
You can further edit this document with the editor of your choice.&lt;/p&gt;

&lt;h2 id=&#34;live-preview:208d73d31f997ec1e4befc58fff83e1c&#34;&gt;Live preview&lt;/h2&gt;

&lt;p&gt;To see a live preview of your new awesome blog run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 1313:1313 -v `pwd`:/www hypriot/rpi-hugo server --bind=0.0.0.0 -w -D --theme=hyde
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now open your browser and go to &lt;code&gt;http://&amp;lt;ip of your pi&amp;gt;:1313&lt;/code&gt; to preview your new blog.
Whenever you change any of your documents, Hugo will regenerate the HTML and reload the resulting webpage in your browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/hugo/preview.png&#34; alt=&#34;preview&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;build-the-final-html-pages:208d73d31f997ec1e4befc58fff83e1c&#34;&gt;Build the final HTML pages&lt;/h2&gt;

&lt;p&gt;To get the final HTML pages for publication you just need to run Hugo without any options.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -v `pwd`:/www hypriot/rpi-hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Afterwards you can find the generated static HTML pages in a folder called &lt;code&gt;public&lt;/code&gt; in your project folder.
Now you can just open &lt;code&gt;public/index.html&lt;/code&gt; with a browser or upload the contents of the &lt;code&gt;public&lt;/code&gt; folder to a webhoster of your preference.&lt;/p&gt;

&lt;p&gt;You can learn more about Hugo and how to use it on it&amp;rsquo;s &lt;a href=&#34;http://gohugo.io/overview/introduction/&#34;&gt;documentation website&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;how-we-use-hugo:208d73d31f997ec1e4befc58fff83e1c&#34;&gt;How we use Hugo&lt;/h2&gt;

&lt;p&gt;Right at the beginning when we started blogging about Docker on ARM we were faced with several challenges.
We failed to address these challenges with our first blogging platform - Posthaven - and soon switched to Hugo.
We wrote about this false start with Posthaven in &lt;a href=&#34;http://blog.hypriot.com/post/moved-from-posthaven-to-hugo/&#34;&gt;We moved our blog from Posthaven to Hugo after only three posts. Why?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But we did not tell you everything in that blog post. We held some bits back&amp;hellip; :)&lt;br /&gt;
Hugo in Docker really starts to make a lot of sense when it is used together with some other tools in a &lt;strong&gt;team publishing workflow&lt;/strong&gt;.
Our publishing workflow is based on Git, Github, Drone, Hugo and GitHub Pages.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://drone.io/&#34;&gt;Drone&lt;/a&gt; is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;Continuous Integration&lt;/a&gt; server written in Go (surprise!) that runs exceptionally well in a Docker container.
Drone can be used to &amp;ldquo;listen&amp;rdquo; for changes in a Git-Repository - in this case the sources of our Hugo blog project. Drone can then be configured to generate the static HTML of your blog in another Hugo container and publish it to Github Pages.
But describing this setup in detail is for another day.&lt;/p&gt;

&lt;p&gt;Two days ago we introduced Gogs, today Hugo - next will be a blog post about Drone.
After that we will have all the ingredients together to describe how to integrate everything for an &lt;strong&gt;ultimate Docker and Raspberry Pi based blogging platform&lt;/strong&gt;.
What else would you wanna use for instant Blogger-(ähm Docker-) Bliss?&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Govinda &amp;amp; Andreas&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Run your own GitHub-like service with the help of Docker</title>
      <link>http://blog.hypriot.com/post/run-your-own-github-like-service-with-docker/</link>
      <pubDate>Sat, 27 Jun 2015 22:19:55 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/run-your-own-github-like-service-with-docker/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; and &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; have taken the world by storm.
No serious developer today can afford not to &lt;a href=&#34;https://www.atlassian.com/git/tutorials/&#34;&gt;know how to work with Git&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But what if you do not want to have your code in the cloud? What if you want to host your code repositories yourself?&lt;/p&gt;

&lt;p&gt;For most of us this meant to go with &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;Gitlab&lt;/a&gt;. The biggest downside in the past was that Gitlab had so many different parts that the installation could be very tedious.
With the &lt;a href=&#34;https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md&#34;&gt;Omnibus Gitlab Installer&lt;/a&gt; the installation did get a lot easier but this does not change the fact that Gitlab is compromised of so many different parts.&lt;/p&gt;

&lt;p&gt;Why does this matter?&lt;/p&gt;

&lt;p&gt;It really starts to matter when you want to put your apps/services into something like Docker.
Putting all parts of Gitlab (Postgres, Ruby, Ruby on Rails, Redis, Git, etc.) into one container is certainly not the Docker way of doing things, but puttings these parts into different containers makes it really complicated and involved to set up, too.&lt;/p&gt;

&lt;p&gt;Fortunately we did find another solution for your Git needs - one that really works well with Docker.
It is called &lt;a href=&#34;http://gogs.io/&#34;&gt;Gogs&lt;/a&gt; and is written in Go and has no additional dependencies with the exception of a SSH server.
Gogs is such a lightweight solution that it only needs about 5 MB of RAM and very few CPU resources while running.
This makes it a perfect candidate for a home-grown GitHub alternative that can easily run on a - you guessed it - Raspberry Pi.&lt;/p&gt;

&lt;p&gt;In this post, we show you how to set up &lt;em&gt;Gogs&lt;/em&gt; in just a couple of minutes. Thanks to Docker it will be fast and easy.&lt;/p&gt;

&lt;p&gt;To follow along you gonna need a Raspberry Pi with Docker.
In case you do not have Docker running on your Raspberry Pi our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started guide&lt;/a&gt; will cover everything you need to know to get up and running in a snap.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gogs.qiniudn.com/gogs_demo.gif&#34; alt=&#34;Gogs Screenshots&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;If you wanna dive more deeply into &lt;em&gt;Gogs&lt;/em&gt; there is a &lt;a href=&#34;http://gogs.io/docs/intro/&#34;&gt;official &lt;em&gt;Gogs&lt;/em&gt; documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;how-to-set-up-gogs:dc7018a7890c20895bf31528a8ab5dea&#34;&gt;How to set up Gogs&lt;/h2&gt;

&lt;p&gt;First, log into your Raspberry Pi via SSH.
Please refer to our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started guide&lt;/a&gt; if you are not sure about how to do this.&lt;/p&gt;

&lt;p&gt;After logging in successfully pull and run &lt;em&gt;Gogs&lt;/em&gt; by executing the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d --name my-go-git-server --publish 8022:22 --publish 3000:3000 --volume `pwd`/gogs-data/:/data hypriot/rpi-gogs-raspbian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s see what each of these options means&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;ndash;name&lt;/strong&gt; gives the Docker container a name&lt;br /&gt;
  &lt;strong&gt;&amp;ndash;publish&lt;/strong&gt; (first) instructs Docker to open port &lt;code&gt;8022&lt;/code&gt;. We will use this port to access Gogs via git/ssh.&lt;br /&gt;
  &lt;strong&gt;&amp;ndash;publish&lt;/strong&gt; (second) defines &lt;code&gt;3000&lt;/code&gt; as the port at which you will be able to access the web interface of &lt;em&gt;Gogs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When the &lt;em&gt;Gogs&lt;/em&gt; container is running you can point your browser to the IP address of your Pi. Make sure you use the port you defined in the &lt;code&gt;docker run&lt;/code&gt; command.
In our example we have to type the following address into the browser:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://172.16.254.149:3000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a result you should see the setup page of &lt;em&gt;Gogs&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/frist-run-gogs.png&#34; alt=&#34;hypriot-ssh-prompt-after-login&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;In this setup page we need to adapt the default settings to the settings we defined in the &lt;code&gt;docker run&lt;/code&gt; command we executed previously. Thus, please change the input fields according to this table:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Input field&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Domain&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Replace &lt;code&gt;localhost&lt;/code&gt; with the IP address of your Raspberry Pi&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Application URL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;In the predefined string, replace only &lt;code&gt;localhost&lt;/code&gt; with the IP address of your Raspberry Pi, such that you have e.g. &lt;code&gt;http://172.16.254.149:3000/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Username&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set an your username&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Password&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set an your password with at least 8 characters&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E-mail&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set your email adress&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;After you filled all required fields, it should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/frist-run-gogs_user-input-combined.png&#34; alt=&#34;frist-run-gogs_user-input-combined.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;To finish the setup, click on &lt;strong&gt;install&lt;/strong&gt; at the bottom of the page. Afterwards you will be forwarded to the login page of &lt;em&gt;Gogs&lt;/em&gt;.
Please login with the credentials you just specified.&lt;/p&gt;

&lt;p&gt;After logging in you should see the start page of the &lt;em&gt;Gogs&lt;/em&gt; service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nice, you successfully installed Gogs!&lt;/strong&gt; Now let&amp;rsquo;s start using it! Please continue with the next section to learn &lt;em&gt;how&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;how-to-create-a-git-repository-in-gogs:dc7018a7890c20895bf31528a8ab5dea&#34;&gt;How to create a Git repository in &lt;em&gt;Gogs&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Before we will be able to &lt;code&gt;git push&lt;/code&gt;, we need to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a Git repository in &lt;em&gt;Gogs&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;configure your public SSH key in &lt;em&gt;Gogs&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;clone the Git repository in &lt;em&gt;Gogs&lt;/em&gt; to your local workstation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s start by creating a new repository. Click on the &lt;strong&gt;green button&lt;/strong&gt; in the top right corner of the page and choose &lt;strong&gt;New Repository&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/start-with-green-button_with-marker.png&#34; alt=&#34;start-with-green-button&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;You should see a setup page for your new repository. Please fill out the two text input fields.&lt;/p&gt;

&lt;p&gt;At the bottom of the page you will find a checkbox. We recommend to enable this checkbox since it automatically will initialize this repository with a &lt;em&gt;README.md&lt;/em&gt;.
The following screenshot shows an example of how the setup page might look like after you provided all the necessary information.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/new-repo.png&#34; alt=&#34;new-repo&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Finish the setup by clicking on &lt;strong&gt;Create Repository&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Before you can actually use the new repository, you need to add your SSH key. Click on The &lt;strong&gt;settings button&lt;/strong&gt; in the top right corner of the page. Then, go to &lt;strong&gt;SSH Keys&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Add Key&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/add-private-key2_with-markers.png&#34; alt=&#34;add-private-key2&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Paste your public SSH key into this field and set an arbitrary &lt;em&gt;Key Name&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t know where to find your SSH key, execute the following command in your terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat ~/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see in the following screenshot, you should see your SSH key as result.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/ssh-key-export.png&#34; alt=&#34;ssh-key-export.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Finally, back in the &lt;em&gt;Gogs&lt;/em&gt; website, click the green button &lt;strong&gt;Add Key&lt;/strong&gt; to add your public SSH key. Afterwards you should see a message confirming that the key has been added successfully.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At this point, &lt;em&gt;Gogs&lt;/em&gt; should be set up properly to receive your first commit!&lt;/strong&gt; As a last step, we will &lt;code&gt;git clone&lt;/code&gt; the new repo to your workstation.&lt;/p&gt;

&lt;h2 id=&#34;start-using-git-with-the-new-repository:dc7018a7890c20895bf31528a8ab5dea&#34;&gt;Start using Git with the new repository&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gogs&lt;/em&gt; helps us in constructing the proper &lt;code&gt;git clone&lt;/code&gt; command.
Navigate inside your new repository in the Gogs Web-GUI and click on the &lt;strong&gt;black cloud symbol&lt;/strong&gt;.
Make sure that the &lt;strong&gt;SSH&lt;/strong&gt; button in front of the command is activated and copy the string in the text field via the &lt;strong&gt;black copy button&lt;/strong&gt; on the right edge.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/in-repo-get-ssh-link-for-git-remote_with-markers.png&#34; alt=&#34;in-repo-get-ssh-link-for-git-remote&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Now open a terminal at your workstation and navigate to the location where you want to create the folder for the repository.&lt;/p&gt;

&lt;p&gt;Paste the command you just copied from Gogs Web-GUI. Before executing add &lt;code&gt;git clone ssh://&lt;/code&gt; in front of the command and put port &lt;code&gt;8022&lt;/code&gt; in front of your user name.
In our case &lt;code&gt;8022&lt;/code&gt; is the port Gogs listens on for SSH.&lt;/p&gt;

&lt;p&gt;In the end the command should look similar to this one:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone ssh://git@172.16.254.149:8022/my-name/demo-hypriot.git

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this command has been executed confirm the fingerprint prompt and navigate into the new directory that has been created by this command.&lt;/p&gt;

&lt;p&gt;Within the repository folder execute a &lt;code&gt;git pull&lt;/code&gt;. If the command returns &lt;code&gt;Already up-to-date&lt;/code&gt; the repository is properly set up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations!! You now have your own Git service running on your Raspberry Pi!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Gogs will only be available within your local network.
To make your Git service available outside of your home you need to do use a Dynamic DNS service like &lt;a href=&#34;http://www.noip.com/&#34;&gt;no-ip&lt;/a&gt; and configure some port forwarding in your router.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We hope setting up your own Gogs has been a painless experience for you.&lt;br /&gt;
As always use the comments below to give us feedback and share the blog post on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Mathias, Andreas &amp;amp; Govinda&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hypriot-Demo and challenge at DockerCon 2015</title>
      <link>http://blog.hypriot.com/post/dockercon2015/</link>
      <pubDate>Wed, 24 Jun 2015 01:30:34 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/dockercon2015/</guid>
      <description>

&lt;p&gt;Hypriot had a short demo session (16:45 - 17:15 PDT) on the second day of the DockerCon 2015 in San Francisco,CA (USA).
The goal of the demo was to show that Docker is a really lightweight &amp;ldquo;virtualization&amp;rdquo; solution that can be easily run on small IoT devices.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;gallery clearfix&#34; itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Dieter Reuter from the Hypriot team at DockerCon 2015&lt;/div&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/dieter_at_dockercon/dieter_hypriot_dockercon_2015_1.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1426x804&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/dieter_at_dockercon/thumbnails/thumb_dieter_hypriot_dockercon_2015_1.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;It&amp;#39;s fun because the demo actually works fine :-)&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    It&amp;#39;s fun because the demo actually works fine :-)
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Docker Inc.&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/dieter_at_dockercon/dieter_hypriot_dockercon_2015_2.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1430x802&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/dieter_at_dockercon/thumbnails/thumb_dieter_hypriot_dockercon_2015_2.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;7 minutes have passed and 250 container have been started...&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    7 minutes have passed and 250 container have been started...
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Docker Inc.&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/dieter_at_dockercon/dieter_hypriot_dockercon_2015_3.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1428x806&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/dieter_at_dockercon/thumbnails/thumb_dieter_hypriot_dockercon_2015_3.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Get on our blog and start with the #hypriot_docker_challenge!&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Get on our blog and start with the #hypriot_docker_challenge!
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Docker Inc.&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/photoswipe.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/default-skin/default-skin.css&#34;&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe-ui-default.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/initphotoswipe.js&#34;&gt;&lt;/script&gt;



&lt;div class=&#34;pswp&#34; tabindex=&#34;-1&#34; role=&#34;dialog&#34; aria-hidden=&#34;true&#34;&gt;

&lt;div class=&#34;pswp__bg&#34;&gt;&lt;/div&gt;

&lt;div class=&#34;pswp__scroll-wrap&#34;&gt;
    
    &lt;div class=&#34;pswp__container&#34;&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    
    &lt;div class=&#34;pswp__ui pswp__ui--hidden&#34;&gt;
    &lt;div class=&#34;pswp__top-bar&#34;&gt;
      
      &lt;div class=&#34;pswp__counter&#34;&gt;&lt;/div&gt;
      &lt;button class=&#34;pswp__button pswp__button--close&#34; title=&#34;Close (Esc)&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--share&#34; title=&#34;Share&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--fs&#34; title=&#34;Toggle fullscreen&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--zoom&#34; title=&#34;Zoom in/out&#34;&gt;&lt;/button&gt;
      
      
      &lt;div class=&#34;pswp__preloader&#34;&gt;
        &lt;div class=&#34;pswp__preloader__icn&#34;&gt;
          &lt;div class=&#34;pswp__preloader__cut&#34;&gt;
            &lt;div class=&#34;pswp__preloader__donut&#34;&gt;&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;pswp__share-modal pswp__share-modal--hidden pswp__single-tap&#34;&gt;
      &lt;div class=&#34;pswp__share-tooltip&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--left&#34; title=&#34;Previous (arrow left)&#34;&gt;
    &lt;/button&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--right&#34; title=&#34;Next (arrow right)&#34;&gt;
    &lt;/button&gt;
    &lt;div class=&#34;pswp__caption&#34;&gt;
      &lt;div class=&#34;pswp__caption__center&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;style&gt;
    .gallery {  }
    .gallery img { width: 100%; height: auto; }
    .gallery figure { display: block; float: left; margin: 0 5px 5px 0; width: 200px; }
    .gallery figcaption { display: none; }
    .gallery div.title { font-weight: bold; }
    span[itemprop=&#34;copyrightHolder&#34;] { color : #888; float: right; }
    span[itemprop=&#34;copyrightHolder&#34;]:before { content: &#34;Foto: &#34;; }
    img[itemprop=&#34;thumbnail&#34;]{ width: 200px; }
&lt;/style&gt;


&lt;script&gt;initPhotoSwipeFromDOM(&#39;.gallery&#39;);&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;https://player.vimeo.com/video/131966874&#34; width=&#34;600&#34; height=&#34;450&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt; &lt;p&gt;&lt;a href=&#34;https://vimeo.com/131966874&#34;&gt;DockerCon2015 - Scale down to the minimum&lt;/a&gt; from &lt;a href=&#34;https://vimeo.com/user38425431&#34;&gt;hypriot&lt;/a&gt; on &lt;a href=&#34;https://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;As preparation for this demo we only had to make some small &lt;a href=&#34;https://github.com/docker/docker/compare/master...hypriot:optional_userland_proxy&#34;&gt;tweaks&lt;/a&gt; to Docker and its environment.
These changes allowed us to start up hundreds of containers on a Raspberry Pi in just a couple of minutes. How awesome is that?
If that is possible on a small device imagine how Docker runs on a big server&amp;hellip; :)&lt;/p&gt;

&lt;h3 id=&#34;the-hypriot-dockercon-challenge:08dbaaf64a7259b7390848cf1e42575f&#34;&gt;The Hypriot-DockerCon-Challenge&lt;/h3&gt;

&lt;p&gt;Even with this jaw-dropping result we think there is room for improvement.
That is why &lt;strong&gt;we challenge you&lt;/strong&gt; to help us to improve the performance even more and remove remaining roadblocks!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prize:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The person who successfully manage to get the highest number of these &lt;a href=&#34;https://registry.hub.docker.com/u/hypriot/rpi-busybox-httpd/&#34;&gt;Docker containers&lt;/a&gt; to run concurrently on a Raspberry Pi 2 will be awarded a &lt;a href=&#34;http://europe.dockercon.com&#34;&gt;DockerCon Europe&lt;/a&gt; ticket and a speaking / demo slot during the conference.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rules:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use a single Raspberry Pi 2 with a HypriotOS release (a Raspi 1 would work too, but you’ll have a big disadvantage with 512MByte only)&lt;/li&gt;
&lt;li&gt;Use Docker Engine to start the containers (see technical hint #3 below)&lt;/li&gt;
&lt;li&gt;Use the webserver container “hypriot/rpi-busybox-httpd” as a starting point – you can use whatever webserver you like, but you have to serve the static website with the same index.html + .jpg&lt;/li&gt;
&lt;li&gt;Challenge ends on Monday, October 19th, 2015 at 17:00 PDT – winner will be announced on Tuesday, October 20th&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Technical Hints:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reduce the stack size used for starting Docker subprocesses (see /etc/init.d/docker)&lt;/li&gt;
&lt;li&gt;Optimize the httpd container in order to use less memory&lt;/li&gt;
&lt;li&gt;Optimize the Docker daemon itself (Participants must submit any changes made to docker engine with appropriate tests back to the docker project or must be independently reproducible with the stock docker engine release.) Optimizations must be general optimizations, useful outside of the scope of this specific benchmark.&lt;/li&gt;
&lt;li&gt;Ask Hypriot for help, they’ll offer new hints and tips publicly through comments on the blog and &lt;a href=&#34;https://twitter.com/HypriotTweets&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To get you started for this challenge we prepared a couple of links for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.hypriot.com/getting-started&#34;&gt;Getting started with our Docker Hypriot SD-card image on Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hypriot/rpi-busybox-httpd&#34;&gt;Raspberry Pi Docker Image for HTTPd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hypriot/rpi-busybox-httpd/blob/master/start-webservers.sh&#34;&gt;Start-Script for running lots of containers on the Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope we did wet your appetite. Happy hacking and have fun!&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to get Docker running on your Raspberry Pi using Mac OS X</title>
      <link>http://blog.hypriot.com/getting-started-with-docker-and-mac-on-the-raspberry-pi/</link>
      <pubDate>Fri, 15 May 2015 20:16:11 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/getting-started-with-docker-and-mac-on-the-raspberry-pi/</guid>
      <description>

&lt;p&gt;This guide shows you how to get Docker running on your Raspberry Pi using a &lt;strong&gt;Mac OS X workstation&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you have not read the getting started guide about Docker on the Raspberry Pi yet you might wanna check it out first: &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device&#34;&gt;Getting started with Docker on your ARM Device&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We tried to make this guide as concise as possible. Make sure that you know the basics about the command line and you should be ready to go.
If you don&amp;rsquo;t you can learn the basics in &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/an-introduction-to-the-linux-terminal&#34;&gt;An Introduction to the Linux Terminal&lt;/a&gt; and come back afterwards.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;hardware&lt;/strong&gt; you gonna need to follow along is a Raspberry Pi 1 or 2 and one SD card.
If you are going to use a Raspberry 2 you will have to use a microSD card - otherwise a normal SD card is sufficient.
We recommend a size of at least 4 GB.&lt;/p&gt;

&lt;p&gt;The SD card contains all the software which we are going to use on our Raspberry Pi.
With software we basically mean two things: first an operating system for your Raspberry Pi and second the software you as user would like to use - e.g. a browser or a word processing program.
In our case the software we wanna use is Docker.&lt;/p&gt;

&lt;p&gt;We - from Hypriot - created a preconfigured &lt;a href=&#34;http://blog.hypriot.com/downloads/&#34;&gt;SD card image&lt;/a&gt; which contains everything you need to run Docker on your Raspberry Pi.
To use the image you first have to download and transfer it to your SD card. Transferring an image to an SD card is often referred to as &lt;em&gt;flashing&lt;/em&gt;.
Afterwards you just have to insert the flashed SD card into your Raspberry Pi and start it up.&lt;/p&gt;

&lt;h3 id=&#34;download-the-hypriot-docker-sd-card-image:ca4b4a19668a2ec6a58c5af490c910c5&#34;&gt;Download the Hypriot Docker SD card image&lt;/h3&gt;

&lt;p&gt;Download our current SD card image using your browser by clicking &lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150416-201537.img.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After the download is completed open a terminal window. To do this press &lt;strong&gt;CMD&lt;/strong&gt; + &lt;strong&gt;Whitespace&lt;/strong&gt; and type &lt;em&gt;terminal&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now we will extract the downloaded zip file. Go to your &lt;em&gt;Download&lt;/em&gt; folder first by typing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/Downloads
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now extract the zip file with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unzip hypriot-rpi-20150416-201537.img.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the file is unzipped you will have a new file with an &lt;strong&gt;.img&lt;/strong&gt; extension.
In the next step we will flash this file onto your SD card.&lt;/p&gt;

&lt;h3 id=&#34;flash-the-downloaded-image-to-your-sd-card:ca4b4a19668a2ec6a58c5af490c910c5&#34;&gt;Flash the downloaded image to your SD card&lt;/h3&gt;

&lt;p&gt;First put your SD card into the computer. Then in the terminal type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;diskutil list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see a list of all your disks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/mac-screenies/diskutil-list.png&#34; alt=&#34;disktuil-list&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Now identify the SD card. Look at the fourth column which shows the size of the devices of your workstation.
One item in the list should have a size that is very close to the size of your SD card.
From there get the identifier which is shown in the first column.
Here the identifier is &lt;code&gt;/dev/disk5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now unmount the SD card. Make sure to replace &lt;code&gt;/dev/disk5&lt;/code&gt; with the identifier of your sd card.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;diskutil unmountdisk /dev/disk5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a result you should see&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/mac-screenies/unmount.png&#34; alt=&#34;Screenshot unmounted&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Now we are ready to flash the SD card. We are going to use the &lt;code&gt;dd&lt;/code&gt; command for this.&lt;/p&gt;

&lt;p&gt;Before you execute the command below, make sure to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;replace the parameter after &lt;code&gt;if=&lt;/code&gt; with the path to the downloaded image&lt;/li&gt;
&lt;li&gt;replace the parameter after &lt;code&gt;of=&lt;/code&gt; with the identifier of your SD card. Make sure you put a &lt;code&gt;r&lt;/code&gt; in front of &lt;code&gt;disk&lt;/code&gt; as you can see in the example&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo dd if=hypriot-rpi-20150416-201537.img of=/dev/rdisk5 bs=1m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While this command is executed you won&amp;rsquo;t get any information about its progress.
Depending on your hardware and the performance of your SD card it can take up to five minutes to flash the image.
When the &lt;code&gt;dd&lt;/code&gt; is finished, you should get an output like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/mac-screenies/dd-success.png&#34; alt=&#34;after-dd-success&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Finally unmount the SD card again in the same way as before.&lt;/p&gt;

&lt;h3 id=&#34;start-your-raspberry-pi-with-the-sd-card:ca4b4a19668a2ec6a58c5af490c910c5&#34;&gt;Start your Raspberry Pi with the SD card&lt;/h3&gt;

&lt;p&gt;Boot your Raspberry Pi by&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;connecting the Raspberry Pi to your local network via an ethernet cable&lt;/li&gt;
&lt;li&gt;putting the SD card into the designated slot&lt;/li&gt;
&lt;li&gt;plugging in the power adapter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After finishing the last step your Raspberry Pi will boot and the LEDs should start blinking.
The very first boot will take one to three minutes as the file system will be resized.&lt;/p&gt;

&lt;h3 id=&#34;ensure-everything-works:ca4b4a19668a2ec6a58c5af490c910c5&#34;&gt;Ensure everything works&lt;/h3&gt;

&lt;p&gt;To check if Docker is actually running we need to log into the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;To do this we need to find out the IP address of your Raspberry Pi first.
If you are not sure what the IP-Address of your PI is, there are different ways of finding it out.
One way is to use the &lt;code&gt;nmap&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;First identify the IP address of your own workstation. Type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ipconfig getifaddr en1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it does not report back an IP address, you are probably connected via cable to your network. Try &lt;code&gt;en0&lt;/code&gt; instead of &lt;code&gt;en1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you can see in the following screenshot our IP address is &lt;code&gt;192.168.0.101&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/mac-screenies/own-ip-address.png&#34; alt=&#34;own-ip-address&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Then replace the IP address in front of the &lt;code&gt;/24&lt;/code&gt; with yours and type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nmap -sP 192.168.0.100/24 | grep black-pearl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of the &lt;code&gt;nmap&lt;/code&gt; command should show you the IP address of your Raspberry Pi.
If you get a blank line without an IP address your Raspberry Pi is probably not connected to the network.
Or there is a problem with the SD card which prevents the Raspberry Pi from booting.&lt;/p&gt;

&lt;p&gt;After you found out the IP address establish a connection to the Raspberry Pi with the ssh command.
Replace the IP address after the &lt;code&gt;@&lt;/code&gt; with the one of your Raspberry Pi.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh root@192.168.178.10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you are asked for the password type &lt;code&gt;hypriot&lt;/code&gt; and hit &lt;em&gt;Enter&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The first time you establish the connection you will be asked if you are sure that you want to connect to the Raspberry Pi - answer with &lt;code&gt;yes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If everything went fine you should now see the &lt;em&gt;HypriotOS&lt;/em&gt; command line prompt waiting for your input.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/mac-screenies/hypriot-ssh-prompt-after-login.png&#34; alt=&#34;hypriot-ssh-prompt-after-login&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Finally check if the Docker Service is running by typing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker info
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of the &lt;code&gt;docker info&lt;/code&gt; command should look similar to:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/mac-screenies/docker-info.png&#34; alt=&#34;docker-info&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations! You have succeeded in getting Docker running on your Raspberry Pi!&lt;/strong&gt; :)&lt;/p&gt;

&lt;p&gt;You are now ready to continue your exploration of Docker with our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device#going-wild-with-docker-what-can-you-actually-do-with-it:397c66ef19f9f061b6711d2e296cb276&#34;&gt;Getting Started Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to get Docker running on your Raspberry Pi using Linux</title>
      <link>http://blog.hypriot.com/getting-started-with-docker-and-linux-on-the-raspberry-pi/</link>
      <pubDate>Fri, 15 May 2015 20:16:11 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/getting-started-with-docker-and-linux-on-the-raspberry-pi/</guid>
      <description>

&lt;p&gt;This guide shows you how to get Docker running on your Raspberry Pi using a &lt;strong&gt;Linux workstation&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you have not read the getting started guide about Docker on the Raspberry Pi yet you might wanna check it out first: &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device&#34;&gt;Getting started on your ARM device&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We tried to make this guide as concise as possible. Make sure that you know the basics about the command line and you should be ready to go.
If you don&amp;rsquo;t you can learn the basics in &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/an-introduction-to-the-linux-terminal&#34;&gt;An Introduction to the Linux Terminal&lt;/a&gt; and come back afterwards.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;hardware&lt;/strong&gt; you gonna need to follow along is a Raspberry Pi 1 or 2 and one SD card.&lt;br /&gt;
If you are going to use a Raspberry 2 you will have to use a microSD card - otherwise a normal SD card is sufficient.
We recommend a size of at least 4 GB.&lt;br /&gt;
The SD card contains all the software which we are going to use on our Raspberry Pi.
With software we basically mean two things: first an operating system for your Raspberry Pi and second the software you as user would like to use - e.g. a browser or a word processing program.
In our case the software we wanna use is Docker.&lt;/p&gt;

&lt;p&gt;We - from Hypriot - created a preconfigured &lt;a href=&#34;http://blog.hypriot.com/downloads/&#34;&gt;SD card image&lt;/a&gt; which contains everything you need to run Docker on your Raspberry Pi.
To use the image you first have to download and transfer it to your SD card. Transferring an image to an SD card is often referred to as &lt;em&gt;flashing&lt;/em&gt;.
Afterwards you just have to insert the flashed SD card into your Raspberry Pi and start it up.&lt;/p&gt;

&lt;h3 id=&#34;download-the-hypriot-docker-sd-card-image:8814904f208dcaade82991443c7514e0&#34;&gt;Download the Hypriot Docker SD card image&lt;/h3&gt;

&lt;p&gt;Download our current SD card image using your browser by clicking &lt;a href=&#34;http://assets.hypriot.com/hypriot-rpi-20150416-201537.img.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After the download is completed open a terminal window. To do this use the search function of your Linux distribution and type &lt;em&gt;terminal&lt;/em&gt; and press &lt;em&gt;Enter&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now we will extract the downloaded zip file. Go to your &lt;em&gt;Download&lt;/em&gt; folder first by typing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/Downloads
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Extract the zip file with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unzip hypriot-rpi-20150416-201537.img.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the file is unzipped you will have a new file with an &lt;strong&gt;.img&lt;/strong&gt; extension.
In the next step we will flash this file onto your SD card.&lt;/p&gt;

&lt;h3 id=&#34;flash-the-downloaded-image-to-your-sd-card:8814904f208dcaade82991443c7514e0&#34;&gt;Flash the downloaded image to your SD card&lt;/h3&gt;

&lt;p&gt;First put your SD card into the computer. Then in the terminal type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lsblk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see a list of all your disks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/linux-screenies/lsblk.png&#34; alt=&#34;lsblk&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Now identify the SD Card. Look at the fourth column which shows the size of the devices of your workstation.
One item in the list should have a size that is very close to the size of your SD card.
From there get the identifier which is shown in the first column.
In this case the identifier is &lt;code&gt;mmcblk0&lt;/code&gt; and 29,5G refers to a 32 GB sized SD card.&lt;/p&gt;

&lt;p&gt;Next you need to make sure that the partitions of the SD card are &lt;strong&gt;not&lt;/strong&gt; mounted.
Check the column &lt;em&gt;MOUNTPOINT&lt;/em&gt; – if you have any entries in the row of your SD card you need to unmount them.
If not you can skip the unmount command.&lt;/p&gt;

&lt;p&gt;As you can see in the last screenshot we have to unmount one partition.
Copy and paste the path you see in your own &lt;em&gt;MOUNTPOINT&lt;/em&gt; column behind the &lt;code&gt;unmount&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;umount /run/media/mac/8734-1E4C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are ready to flash the SD card. We are going to use the &lt;code&gt;dd&lt;/code&gt; command for this.&lt;/p&gt;

&lt;p&gt;Before we start make sure you&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;replace the parameter &lt;code&gt;if=hypriot-rpi...&lt;/code&gt; with the path to the downloaded image&lt;/li&gt;
&lt;li&gt;replace the parameter &lt;code&gt;of=/dev/mmcblk0&lt;/code&gt; with the identifier of your SD card&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo dd if=hypriot-rpi-20150416-201537.img of=/dev/mmcblk0 bs=1M
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While this command is executed you won&amp;rsquo;t get any information about its progress.
Depending on your hardware and the performance of your SD card it will take up to five minutes to flash the image.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;dd&lt;/code&gt; is finished you should get an output like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/linux-screenies/after-dd.png&#34; alt=&#34;after-dd&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Finally unmount the SD card again in the same way as before.&lt;/p&gt;

&lt;h3 id=&#34;start-your-raspberry-pi-with-the-sd-card:8814904f208dcaade82991443c7514e0&#34;&gt;Start your Raspberry Pi with the SD card&lt;/h3&gt;

&lt;p&gt;Boot your Raspberry Pi by&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;connecting the Raspberry Pi to your local network via an ethernet cable&lt;/li&gt;
&lt;li&gt;putting the SD card into the designated slot&lt;/li&gt;
&lt;li&gt;plugging in the power adapter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After finishing the last step your Raspberry Pi will boot and the LEDs should start blinking.
The very first boot will take one to three minutes as the file system will be resized.&lt;/p&gt;

&lt;h3 id=&#34;ensure-everything-works:8814904f208dcaade82991443c7514e0&#34;&gt;Ensure everything works&lt;/h3&gt;

&lt;p&gt;To check if Docker is actually running we need to log into the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;To do this we need to find out the IP address of your Raspberry Pi first.
If you are not sure what the IP-Address of your PI is, there are different ways of finding it out.
One way is to use the tool &lt;code&gt;nmap&lt;/code&gt; which you might need to install first.&lt;/p&gt;

&lt;p&gt;Depending on the Linux distribution you are using you need one of the following commands to install &lt;code&gt;nmap&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install nmap   # for debian based distros
yum install nmap       # for red hat based distros
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First identify the IP address of your own workstation. Type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hostname -I
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see in the following screenshot our IP address is &lt;code&gt;192.168.0.101&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/linux-screenies/hostname-i.png&#34; alt=&#34;hostname-i&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Then replace the IP address in front of the &lt;code&gt;/24&lt;/code&gt; with yours and type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nmap -sP 192.168.0.101/24 | grep black-pearl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/linux-screenies/nmap.png&#34; alt=&#34;nmap result of query&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The output of the &lt;code&gt;nmap&lt;/code&gt; command should show you the IP address of your Raspberry Pi.
If you get a blank line without an IP address your Raspberry Pi is probably not connected to the network.
Or there is a problem with the SD card which prevents the Raspberry Pi from booting.&lt;/p&gt;

&lt;p&gt;After you found out the IP address establish a connection to the Raspberry Pi with the ssh command.
Replace the IP address after the &lt;code&gt;@&lt;/code&gt; with the one of your Raspberry Pi.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh root@192.168.0.27
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you are asked for the password type &lt;code&gt;hypriot&lt;/code&gt; and hit &lt;em&gt;Enter&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The first time you establish the connection you will be asked if you are sure that you want to connect to the Raspberry Pi - answer with &lt;code&gt;yes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If everything went fine you should now see the &lt;em&gt;HypriotOS&lt;/em&gt; command line prompt waiting for your input.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/linux-screenies/rpi-first-connect.png&#34; alt=&#34;screenshot docker first connection&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Finally check if the Docker service is running by typing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker info
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of the &lt;code&gt;docker info&lt;/code&gt; command should look similar to:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/linux-screenies/docker-info.png&#34; alt=&#34;screenshot docker info&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations! You have succeeded in getting Docker running on your Raspberry Pi!&lt;/strong&gt; :)&lt;/p&gt;

&lt;p&gt;You are now ready to continue your exploration of Docker with our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device#going-wild-with-docker-what-can-you-actually-do-with-it:397c66ef19f9f061b6711d2e296cb276&#34;&gt;Getting Started Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to get Docker running on your Raspberry Pi using Windows</title>
      <link>http://blog.hypriot.com/getting-started-with-docker-and-windows-on-the-raspberry-pi/</link>
      <pubDate>Fri, 15 May 2015 20:16:11 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/getting-started-with-docker-and-windows-on-the-raspberry-pi/</guid>
      <description>

&lt;p&gt;This guide shows you how to get Docker running on your Raspberry Pi using a &lt;strong&gt;Windows workstation&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you have not read the getting started guide about Docker on the Raspberry Pi yet you might wanna check it out first: &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device&#34;&gt;Getting started on your ARM device&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;strong&gt;hardware&lt;/strong&gt; you gonna need to follow along is a Raspberry Pi 1 or 2 and one SD card.
If you are going to use a Raspberry 2 you will have to use a microSD card - otherwise a normal SD card is sufficient.
We recommend a size of at least 4 GB.&lt;/p&gt;

&lt;p&gt;The SD card contains all the software which we are going to use on our Raspberry Pi.
With software we basically mean two things: first an operating system for your Raspberry Pi and second the software you as user would like to use - e.g. a browser or a word processing program.
In our case the software we wanna use is Docker.&lt;/p&gt;

&lt;p&gt;We - from Hypriot - created a preconfigured &lt;a href=&#34;http://blog.hypriot.com/downloads/&#34;&gt;SD card image&lt;/a&gt; which contains everything you need to run Docker on your Raspberry Pi.
To use the image you first have to download and transfer it to your SD card. Transferring an image to an SD card is often referred to as &lt;em&gt;flashing&lt;/em&gt;.
Afterwards you just have to insert the flashed SD card into your Raspberry Pi and start it up.&lt;/p&gt;

&lt;p&gt;For this tutorial you will need to install four applications which we are going to use later. Please follow the download links and install them. Note the installation remarks.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Application&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.7-zip.de&#34;&gt;7-Zip&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;For extracting the compressed SD card image. &lt;/br&gt; &lt;em&gt;Make sure you choose the download file that fits your workstations&amp;rsquo;s architecture (x32 vs. x64)!&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://sourceforge.net/projects/win32diskimager/&#34;&gt;Win32 Disk Imager&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;For flashing the SD card image to the SD card. &lt;/br&gt; &lt;em&gt;During installation you will find a checkbox called &amp;ldquo;Start Pcap-Service at startup&amp;rdquo;. We recommend to disable it.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe&#34;&gt;Putty&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;For establishing a connection to the Raspberry Pi &lt;/br&gt; &lt;em&gt;Just download it. No installation needed.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://sourceforge.net/projects/nmap.mirror/?source=typ_redirect&#34;&gt;Zenmap&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;For identifying the IP address of your Raspberry Pi&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;download-the-hypriot-docker-sd-card-image:f9c6c9c0ab05c0ca238dff8f082f6e17&#34;&gt;Download the Hypriot Docker SD card image&lt;/h3&gt;

&lt;p&gt;Download our current SD card image using your browser by clicking &lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150416-201537.img.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next go to your &lt;strong&gt;Download&lt;/strong&gt; folder and extract the downloaded zip file by right-clicking on the file and then clicking on &lt;strong&gt;7-zip&lt;/strong&gt; -&amp;gt; &lt;strong&gt;extract here&amp;hellip;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After 7-zip is finished with extracting you will have a file with a &lt;strong&gt;.img&lt;/strong&gt; extension.
In the next step we will flash this file onto your SD card.&lt;/p&gt;

&lt;h3 id=&#34;flash-the-downloaded-image-to-your-sd-card:f9c6c9c0ab05c0ca238dff8f082f6e17&#34;&gt;Flash the downloaded image to your SD card&lt;/h3&gt;

&lt;p&gt;To start the flashing process right-click on the &lt;em&gt;Win32 Disk Imager&lt;/em&gt; application which we installed earlier and click on &lt;em&gt;Run as administrator&lt;/em&gt;. You will see a window asking for permissions. Grant them.&lt;/p&gt;

&lt;p&gt;Now, with the &lt;em&gt;Win32 Disk Imager&lt;/em&gt;&amp;rsquo;s window opened, click on the blue folder icon and choose the Hypriot SD card image in your &lt;em&gt;Download&lt;/em&gt; folder.&lt;/p&gt;

&lt;p&gt;Next to the blue folder button, you will find a dropdown menu in which you can select your SD card.
To double check the device letter open your Windows Explorer and locate the SD card drive.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/windows-screenies/image-writer-opened.png&#34; alt=&#34;image-writer&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Finally click on &lt;strong&gt;write&lt;/strong&gt; which will flash the SD card image to the SD card.&lt;/p&gt;

&lt;p&gt;Upon completion close &lt;em&gt;Win32 Disk Imager&lt;/em&gt; and eject the SD card before removing it from its slot.
In order to eject the SD card use the &lt;em&gt;secure eject&lt;/em&gt; function in the menu next to your system clock.
This is usually in the very bottom right corner of your screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/windows-screenies/eject-sd-card.png&#34; alt=&#34;eject-sd&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;start-your-raspberry-pi-with-the-sd-card:f9c6c9c0ab05c0ca238dff8f082f6e17&#34;&gt;Start your Raspberry Pi with the SD card&lt;/h3&gt;

&lt;p&gt;Boot your Raspberry Pi by&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;connecting the Raspberry Pi to your local network via an ethernet cable&lt;/li&gt;
&lt;li&gt;putting the SD card into the designated slot&lt;/li&gt;
&lt;li&gt;plugging in the power adapter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After finishing the last step your Raspberry Pi will boot and the LEDs should start blinking.
The very first boot will take one to three minutes as the file system will be resized.&lt;/p&gt;

&lt;h3 id=&#34;ensure-everything-works:f9c6c9c0ab05c0ca238dff8f082f6e17&#34;&gt;Ensure everything works&lt;/h3&gt;

&lt;p&gt;To check if Docker is actually running we need to log into the Raspberry Pi via &lt;em&gt;PuTTY&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To do this we need to find out the IP address of your Raspberry Pi first.
This can be done with &lt;em&gt;Zenmap&lt;/em&gt; which we installed earlier.&lt;/p&gt;

&lt;p&gt;After starting &lt;em&gt;Zenmap&lt;/em&gt; look for the field &lt;em&gt;Command&lt;/em&gt;.
Type the following command into this field but replace the IP address in front of &lt;code&gt;/24&lt;/code&gt; with your own and hit &lt;em&gt;Enter&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nmap -sP 192.168.0.100/24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a result you should see this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/windows-screenies/zenmap-scan-result.PNG&#34; alt=&#34;zenmap-scan-result&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Zenmap&lt;/em&gt; list all active hosts within your local network.
In order to find the Raspberry Pi click the button &lt;em&gt;filter hosts&lt;/em&gt; at the bottom of the &lt;em&gt;Zenmap&lt;/em&gt; and type in &lt;em&gt;black&lt;/em&gt;.
Now the first line of the list should show the IP address of your Raspberry Pi.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/windows-screenies/zenmap-with-filter-with-marker.png&#34; alt=&#34;zenmap-with-filter-with-marker&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Since we now know where to find the Raspberry Pi within your network it is time to start &lt;em&gt;PuTTY&lt;/em&gt; to establish a SSH connection to your Raspberry Pi.&lt;/p&gt;

&lt;p&gt;After starting &lt;em&gt;PuTTY&lt;/em&gt; type in the IP address we determined into the field &lt;em&gt;Host Name&lt;/em&gt;. With a click on the button &lt;em&gt;Open&lt;/em&gt; the connection will be established.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/windows-screenies/putty-window-settings.png&#34; alt=&#34;Screenshot-putty-login&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;In the new window which just opened type &lt;code&gt;root&lt;/code&gt; as login name and hit &lt;em&gt;Enter&lt;/em&gt;. Next you will be asked for a password. Type &lt;code&gt;hypriot&lt;/code&gt; and hit &lt;em&gt;Enter&lt;/em&gt; again.&lt;/p&gt;

&lt;p&gt;If everything went fine you should now see the &lt;em&gt;HypriotOS&lt;/em&gt; command line prompt waiting for your input. It should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/windows-screenies/putty-window-login.png&#34; alt=&#34;putty-window-login&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Finally to check if the Docker service is running type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker info
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of the &lt;code&gt;docker info&lt;/code&gt; command should look similar to:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/windows-screenies/putty-window-docker-info.png&#34; alt=&#34;docker-info&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations! You have succeeded in getting Docker running on your Raspberry Pi!&lt;/strong&gt; :)&lt;/p&gt;

&lt;p&gt;You are now ready to continue your exploration of Docker with our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device#going-wild-with-docker-what-can-you-actually-do-with-it:397c66ef19f9f061b6711d2e296cb276&#34;&gt;Getting Started Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with Docker on your Raspberry Pi</title>
      <link>http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/</link>
      <pubDate>Fri, 15 May 2015 20:16:11 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/</guid>
      <description>

&lt;p&gt;Docker is a new technology that emerged in the last two years and took the software world by storm. What exactly is Docker and why did it became so popular in such short time?&lt;/p&gt;

&lt;p&gt;The goal of this guide is to answer these questions and to get you started with Docker on a Raspberry Pi in no time.
We are going to cover the procedure for Windows, OS X and Linux users.&lt;/p&gt;

&lt;h2 id=&#34;what-the-heck-is-docker-and-why-would-i-use-it:397c66ef19f9f061b6711d2e296cb276&#34;&gt;What the heck is Docker and why would I use it?&lt;/h2&gt;

&lt;p&gt;Docker simplifies the packaging, distribution, installation and execution of (complex) applications.&lt;/p&gt;

&lt;p&gt;In this context, applications are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;blogging platforms like &lt;a href=&#34;https://wordpress.com&#34;&gt;Wordpress &lt;/a&gt; or &lt;a href=&#34;https://ghost.org/&#34;&gt;Ghost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;tools for software collaboration like &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;Gitlab&lt;/a&gt; or &lt;a href=&#34;http://gogs.io/&#34;&gt;Gogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;file synchronization platforms like &lt;a href=&#34;https://owncloud.org/&#34;&gt;OwnCloud&lt;/a&gt; or &lt;a href=&#34;http://seafile.com/en/home/&#34;&gt;Seafile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These kinds of applications usually consist of many components which need to be installed and configured. This is often a time consuming and frustrating experience for users.&lt;/p&gt;

&lt;p&gt;Docker allows administrators or developers to package these applications into something called containers.
Containers are self-contained, preconfigured packages that a user can fetch and run with just a single command.
By keeping different software components separated in containers they can also be easily updated or removed without influencing each other.
There are many more advantages of using Docker; the details of which can be found in the official &lt;a href=&#34;https://docs.docker.com&#34;&gt;Docker Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;the-raspberry-pi-an-easy-low-cost-way-of-getting-started-with-docker:397c66ef19f9f061b6711d2e296cb276&#34;&gt;The Raspberry Pi: An easy, low cost way of getting started with Docker&lt;/h2&gt;

&lt;p&gt;If we piqued your curiosity and you would like to dive into the magic world of Docker one of the easiest ways is by using Docker on a &lt;a href=&#34;https://www.raspberrypi.org/help/what-is-a-raspberry-pi/&#34;&gt;Raspberry Pi&lt;/a&gt;.
According to the creators of the Raspberry Pi it is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a low cost, credit-card sized computer that plugs into a computer monitor or TV, and uses a standard keyboard and mouse.
It is a capable little device that enables people of all ages to explore computing, and to learn how to program in languages like Scratch and Python.
It’s capable of doing everything you’d expect a desktop computer to do, from browsing the internet and playing high-definition video, to making spreadsheets, word-processing, and playing games.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The goal of this guide is to show you the necessary steps to get you started with Docker on a Raspberry Pi. Please follow the guide that covers your operating system and continue below once you have finished.&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-and-windows-on-the-raspberry-pi&#34;&gt;The Windows guide for setting up Docker on a Raspberry Pi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-and-mac-on-the-raspberry-pi&#34;&gt;The Mac OS X guide for setting up Docker on a Raspberry Pi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-and-linux-on-the-raspberry-pi&#34;&gt;The Linux guide for setting up Docker on a Raspberry Pi&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;going-wild-with-docker-what-can-you-actually-do-with-it:397c66ef19f9f061b6711d2e296cb276&#34;&gt;Going wild with Docker! What can you actually do with it?&lt;/h2&gt;

&lt;p&gt;As stated in the beginning Docker simplifies the way software is distributed and run. We even said that you would only need one command for that. It is time to prove it.&lt;/p&gt;

&lt;p&gt;Just type &lt;code&gt;docker run&lt;/code&gt; into the terminal of your Raspberry Pi:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 80:80 hypriot/rpi-busybox-httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will download and start the Docker image &lt;em&gt;hypriot/rpi-busybox-httpd&lt;/em&gt; which contains a tiny webserver. Once an image is started it is called a &lt;em&gt;container&lt;/em&gt;. An image can also be used to start multiple containers.
You can check if your container is running by typing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see the container you just started in the container list.&lt;/p&gt;

&lt;p&gt;Now you can open up your browser on your workstation and type in the IP address of your Raspberry Pi to see that it really works!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/browser-pi-hypriot-logo.png&#34; alt=&#34;hypriot-logo&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;One great aspect of running a Docker-based app is, you can be sure that it works on every machine running Docker with one exception.&lt;/p&gt;

&lt;p&gt;Here we run Docker on a Raspberry Pi. So the CPU architecture here is &lt;strong&gt;ARM&lt;/strong&gt; rather than x86/x64 by Intel or AMD. Thus, Docker-based apps you use have to be packaged specifically for ARM architecture! Docker-based apps packaged for x86/x64 will not work and will result in an error such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FATA[0003] Error response from daemon: Cannot start container 0f0fa3f8e510e53908e6a459e817d600b9649e621e7dede974d6a65761ad39e5: exec format error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keep this in mind when searching for apps on the &lt;a href=&#34;https://registry.hub.docker.com/search?q=library&#34;&gt;Docker Hub&lt;/a&gt; - &lt;strong&gt;the source&lt;/strong&gt; for Docker apps/images. If you see the keyword &lt;em&gt;RPI&lt;/em&gt; or &lt;em&gt;ARM&lt;/em&gt; in the heading or description, this app can usually be used for the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;We prepared a couple of &lt;a href=&#34;https://registry.hub.docker.com/search?q=hypriot&amp;amp;searchfield=&#34;&gt;Raspberry Pi ready images&lt;/a&gt; for your convenience. Try them out now and have fun!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://registry.hub.docker.com/search?q=hypriot&amp;searchfield=&#34;&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/dockerhub-hypriot-search.png&#34; alt=&#34;dockerhub-hypriot-search&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brand new Getting-Started guide for Docker on the Rasberry Pi</title>
      <link>http://blog.hypriot.com/post/brand-new-getting-started-guide/</link>
      <pubDate>Fri, 15 May 2015 12:35:44 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/brand-new-getting-started-guide/</guid>
      <description>&lt;p&gt;The last couple of days Mathias Renner and I were busy creating a comprehensive &lt;a href=&#34;http://blog.hypriot.com/getting-started&#34;&gt;Getting Started guide for Docker on the Raspberry Pi&lt;/a&gt;.
Our goal was to give users easy to understand step by step instructions on how to get Docker running on a Raspberry Pi.&lt;/p&gt;

&lt;p&gt;Actually - in the end - we came up with three guides. :)&lt;/p&gt;

&lt;p&gt;Based on our HypriotOS SD card image we show Mac, Linux and Windows users individually how to use it on their operating system.
Downloading, flashing and booting up the SD card image on your Raspberry Pi is now easy as pie.&lt;/p&gt;

&lt;p&gt;There are no excuses anymore not to try it - even for novice Raspberry Pi &amp;amp; Docker users.&lt;/p&gt;

&lt;p&gt;Hopefully we get lots of feedback to make the guides even better!&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;

&lt;p&gt;Govinda &amp;amp; Mathias&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker 1.6.0 is finally released into the wild</title>
      <link>http://blog.hypriot.com/post/docker-1-6-is-finally-released-into-the-wild/</link>
      <pubDate>Thu, 16 Apr 2015 22:06:11 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/docker-1-6-is-finally-released-into-the-wild/</guid>
      <description>

&lt;p&gt;After nearly two months of development Docker 1.6.0 was finally released into the wild.
Being right on the heels of the Docker team we were able to create an ARM compatible version within minutes and of course you can download it here as a Debian package.&lt;/p&gt;

&lt;p&gt;Our Docker Debian packages are battle-tested only with our HypriotOS Docker SD card image.
Use it to get the best Docker experience available for the Raspberry Pi. It is ridiculous easy to get up and running. Under 5 minutes - promised!&lt;/p&gt;

&lt;p&gt;The image can be downloaded here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150416-201537.img.zip&#34;&gt;Docker-Pi Image&lt;/a&gt; (~369MB)&lt;br /&gt;
&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150416-201537.img.zip.sha256&#34;&gt;SHA256 checksum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For everybody else use our Docker Debian package at your own peril&amp;hellip; :)&lt;/p&gt;

&lt;h2 id=&#34;all-new-shiny-docker-1-6-0:d3971ee1212b5cb8ba1d048eadd8bf0e&#34;&gt;All new shiny Docker 1.6.0&lt;/h2&gt;

&lt;p&gt;Alright back to Docker&amp;hellip; version 1.6.0 will bring a couple of new features, changes and bugfixes.&lt;/p&gt;

&lt;p&gt;The ones that stand out the most are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;syslog support for the Docker logs&lt;/li&gt;
&lt;li&gt;setting of ulimits for container&lt;/li&gt;
&lt;li&gt;building images from an image id&lt;/li&gt;
&lt;li&gt;pulling images based on id&lt;/li&gt;
&lt;li&gt;Windows client support (&lt;a href=&#34;https://kitematic.com&#34;&gt;Kitematic&lt;/a&gt; - &lt;em&gt;I finally see it coming together!&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Labels for container and images&lt;/li&gt;
&lt;li&gt;ability to set constraints on images - memory, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find out more details in the &lt;a href=&#34;https://github.com/docker/docker/blob/v1.6.0/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt; yourself.&lt;/p&gt;

&lt;p&gt;Read some more details on the official Docker blog
&lt;a href=&#34;https://blog.docker.com/2015/04/docker-release-1-6/&#34;&gt;DOCKER 1.6: ENGINE &amp;amp; ORCHESTRATION UPDATES, REGISTRY 2.0, &amp;amp; WINDOWS CLIENT PREVIEW&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;get-it-while-it-is-still-hot:d3971ee1212b5cb8ba1d048eadd8bf0e&#34;&gt;Get it while it is still hot&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://downloads.hypriot.com/docker-hypriot_1.6.0-1_armhf.deb&#34;&gt;docker-hypriot_1.6.0-1_armhf.deb&lt;/a&gt; (~ 6MB)&lt;br /&gt;
&lt;a href=&#34;http://downloads.hypriot.com/docker-hypriot_1.6.0-1_armhf.deb.sha256&#34;&gt;SHA256 checksum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All you have to do is to start up your Pi with our SD card image, download the prepared Docker package and install it with dpkg.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;HypriotOS: root@black-pearl in ~
$ wget http://downloads.hypriot.com/docker-hypriot_1.6.0-1_armhf.deb

HypriotOS: root@black-pearl in ~
$ dpkg -i docker-hypriot_1.6.0-1_armhf.deb
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Afterwards you should be able to quench your curiosity by playing with the latest and greatest Docker Engine.&lt;/p&gt;

&lt;p&gt;And if you are especially daring today you might wanna try it together with Docker Compose:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.hypriot.com/post/docker-compose-nodejs-haproxy&#34;&gt;http://blog.hypriot.com/post/docker-compose-nodejs-haproxy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and like this post on Twitter or Facebook.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Connecting Kitematic to an external Docker Engine running on a Raspberry Pi</title>
      <link>http://blog.hypriot.com/post/connect-kitematic-to-external-docker-engine/</link>
      <pubDate>Wed, 15 Apr 2015 06:35:55 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/connect-kitematic-to-external-docker-engine/</guid>
      <description>

&lt;p&gt;In this post we show you the first steps how easy it is using Kitematic to control a Docker engine running on a Raspberry Pi. Finally we demostrate in a small screencast how to run an unbelievable amount of 101 web servers on a single Raspberry Pi 2.&lt;/p&gt;

&lt;h3 id=&#34;intro-and-background:90fd682791be4b8b148459904d1205f8&#34;&gt;Intro and Background&lt;/h3&gt;

&lt;p&gt;At Hypriot we recently built and released our own OS image to run the Docker Engine on a low-cost Raspberry Pi and labeled it HypriotOS.  A user can download this pre-compiled Raspbian based SD card image, which includes a Linux 3.18.10 kernel with all Docker related kernel options included, and Docker 1.5.0 is already enabled with Overlay filesystem.  Just download, extract, flash to a SD card and boot your Raspberry Pi - and within minutes you have Docker up and running and you can instantly start using it.&lt;/p&gt;

&lt;p&gt;You can read more details and find the download links in our blog post &lt;a href=&#34;http://blog.hypriot.com/heavily-armed-after-major-upgrade-raspberry-pi-with-docker-1-dot-5-0&#34;&gt;Heavily ARMed after major upgrade: Raspberry Pi with Docker 1.5.0&lt;/a&gt; and recently updated post &lt;a href=&#34;http://blog.hypriot.com/post/hypriotos-back-again-with-docker-on-arm/&#34;&gt;HypriotOS: Back Again and Better then Ever&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As developers and geeks, we&amp;rsquo;re really comfortable using SSH and a bash shell to control the Docker CLI.  It&amp;rsquo;s also not a problem to connect a Linux or Mac OSX host via a native Docker CLI over the network, even a Windows client works well.  But what about the normal end users?  Wouldn&amp;rsquo;t it be great to have a more convinient way to use a graphical frontend via web or a specific app.  A GUI would be really cool, but this would take a long time to develop.&lt;/p&gt;

&lt;h3 id=&#34;kitematic-to-the-rescue:90fd682791be4b8b148459904d1205f8&#34;&gt;Kitematic to the Rescue&lt;/h3&gt;

&lt;p&gt;Even the fact that our OS image works pretty much out of the box, and everybody can use Docker within minutes we&amp;rsquo;ve received a lot of feedback, whether we could build and deliver a graphical application to control Docker and deploying apps/containers with it.  And here comes Kitematic to the rescue - what a great timing.  We&amp;rsquo;ve just read the announcement on the Docker blog and were extremely impressed but also a little bit frustrated, it&amp;rsquo;s only meant to be used on a Mac running it&amp;rsquo;s own Boot2Docker VM through a newly created Docker Machine.&lt;/p&gt;

&lt;p&gt;We were fascinated immediately about the simplicity and the seamless GUI, instantly installing Kitematic on a MacBookPro and it was running within 10 minutes only.  Really impressed and hooked!  Another 15 minutes later, we had cloned the source code repo from GitHub, then a &amp;ldquo;npm install&amp;rdquo; and a &amp;ldquo;npm start&amp;rdquo; and WOW, we&amp;rsquo;re running our personal dev version!  And we even were able to create our own Mac App with a &amp;ldquo;npm run release&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Imagine now what could be even better for an end user?  What if we could use Kitematic to control a remote Docker Host running on that cute little Raspberry Pi.&lt;/p&gt;

&lt;h3 id=&#34;connecting-the-dots:90fd682791be4b8b148459904d1205f8&#34;&gt;Connecting the Dots&lt;/h3&gt;

&lt;p&gt;We quickly read through the docs and studied the source code and found out that Kitematic is based upon Docker Machine to control the backend Docker Host, hey cool - that&amp;rsquo;s the key.  Within a couple of hours we had the first rough hack and were able to actively control a Raspberry Pi 2 running Docker 1.5.0 with a brand new graphical user interface.  Just selecting one of our favorite Docker Images from the Docker Hub and pushed it seamlessly to a RPi!&lt;br /&gt;
&lt;img src=&#34;http://blog.hypriot.com/images/kitematic/rpi-docker-images-at-the-hub.png&#34; alt=&#34;image1&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;But until now, it was just a hack and far away from being used in production or by end users.  All settings were done with some source code changes within Kitematic itself.&lt;/p&gt;

&lt;p&gt;Here are the details of that quick hack.  You only have to change these three lines in &lt;code&gt;src/Docker.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;16:      protocol: &#39;http&#39;,
17:      host: 192.168.2.114,
18:      port: 2375,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just use an unencrypted connection for the first step, change the protocol from &lt;code&gt;https&lt;/code&gt; to &lt;code&gt;http&lt;/code&gt;, use the IP address of the Raspberry Pi, and don&amp;rsquo;t forget to change the port number to &lt;code&gt;2375&lt;/code&gt;.  With the last change, Kitematic don&amp;rsquo;t use any cert or key file to connect to the remote Docker Host.&lt;/p&gt;

&lt;p&gt;For the next day we scheduled a short online meeting with Mike from Kitematic, and to our surprise the whole team joined us, including Jeff and Sean.  Everybody was so happy and surprised how easy we could merge both ideas and concepts together.  Right now, we&amp;rsquo;re able to offer a Docker optimized OS for the Raspberry Pi which one could install and use within a few minutes only, and within the same amount of time, installing the app from Kitematic to control your Raspberry Pi with a great user experience.&lt;/p&gt;

&lt;h3 id=&#34;switch-to-a-better-system-design:90fd682791be4b8b148459904d1205f8&#34;&gt;Switch to a better System Design&lt;/h3&gt;

&lt;p&gt;Thanks to the fact, that Kitematic uses Docker Machine under the hood to connect to it&amp;rsquo;s Docker VM, it must be able to use this concept for a better system design to communicate with an external Docker Host.  Our first try was just looking for a standard driver available which supports our needs.  We quickly tested the &lt;code&gt;none&lt;/code&gt; driver and were able to control the Raspberry Pi from within Docker Machine.  For this case it was necessary to reconfigure Docker to use a TLS encrypted connection.  But we had absolute no luck to get it work together with Kitematic.&lt;/p&gt;

&lt;p&gt;Ok, let&amp;rsquo;s dig deeper and just use the Docker Machine GitHub repo to get familiar with the driver concept.  And learn what has to be done, to build your own Docker Machine Driver specifically for connecting a Docker Engine running on an external Linux machine.  Within a day only, we got it working, our very first driver implementation for Docker Machine.  Our goal was to keep it super-simple and ready-to-use together with Kitematic, and hopefully don&amp;rsquo;t change anything within the app&amp;rsquo;s source code.&lt;/p&gt;

&lt;p&gt;All changes are already documented in a few pull-requests which are available for further improvement and testing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hypriot/kitematic/pull/1&#34;&gt;hypriot/kitematic#1, Connect to externel docker host through docker-machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hypriot/machine/pull/1&#34;&gt;hypriot/machine#1, Add driver &amp;lsquo;hypriot&amp;rsquo;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To use this improved Kitematic version from Hypriot, you have to clone the GitHub repo &lt;a href=&#34;https://github.com/hypriot/kitematic/tree/connect-to-externel-docker-host&#34;&gt;hypriot/kitematic&lt;/a&gt;, use the branch &lt;code&gt;connect-to-externel-docker-host&lt;/code&gt; and build it with &amp;ldquo;npm run install&amp;rdquo;, it will also download and use our specifically built version of Docker Machine with the &lt;code&gt;hypriot&lt;/code&gt; driver included.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/kitematic/Kitematic-and-HypriotOS-just-works.png&#34; alt=&#34;image2&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;mission-accomplished:90fd682791be4b8b148459904d1205f8&#34;&gt;Mission accomplished&lt;/h3&gt;

&lt;p&gt;At the end, we&amp;rsquo;ve now built our own basic Docker Machine driver for the HypriotOS to use it for controlling a Raspberry Pi with the Kitematic app, and we&amp;rsquo;ll improve it over the next few days and weeks to get it production ready.  To our surprise, we only had to change a single line of code within Kitematic itself.&lt;/p&gt;

&lt;p&gt;Here is a short 4 minute screencast to demonstrate the running system as &lt;a href=&#34;https://www.youtube.com/watch?v=yHytb1k3TfM&#34;&gt;Docker Kitematic controls Raspberry Pi 2 running Docker 1.5.0&lt;/a&gt;. Watch out the number of web servers we started simultaneously on the Raspberry Pi 2, all as separate Docker containers. Can you imagine how cool this Linux container technology from Docker is, even on such a small device?&lt;/p&gt;

&lt;p&gt;And the best thing is, it could be used to connect any other external Docker Host to Kitematic, not only the Raspberry Pi.  In the PR we included a short description how to connect an already running Boot2Docker VM to Kitematic.  And if anyone is interested to help, please feel free to join.  As soon as we&amp;rsquo;re done with the development we&amp;rsquo;ll create an upstream PR to get the changes back into Kitematic and Docker Machine.&lt;/p&gt;

&lt;h3 id=&#34;next-steps:90fd682791be4b8b148459904d1205f8&#34;&gt;Next Steps&lt;/h3&gt;

&lt;p&gt;We do have a lot of things on our roadmap, maybe too much to share in this blog post.  Here are at least the next important things we&amp;rsquo;re planing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;new Linux kernel 3.18.10 (DONE)&lt;/li&gt;
&lt;li&gt;support for Open vSwitch (we&amp;rsquo;d love to use SocketPlane on the RPi) (DONE)

&lt;ul&gt;
&lt;li&gt;include kernel options for Open vSwitch (DONE)&lt;/li&gt;
&lt;li&gt;natively compiled packages for Open vSwitch (DONE)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;support for Docker Machine (WIP)

&lt;ul&gt;
&lt;li&gt;production ready driver for HypriotOS and the Raspberry Pi&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;support for Docker Compose (WIP)&lt;/li&gt;
&lt;li&gt;support for Docker Swarm (WIP)&lt;/li&gt;
&lt;li&gt;&amp;hellip; (depending on user feedback)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/kitematic/pi_armed_with_docker.jpg&#34; alt=&#34;image3&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;send-us-your-feedback-please:90fd682791be4b8b148459904d1205f8&#34;&gt;Send us your Feedback, please!&lt;/h3&gt;

&lt;p&gt;We really love feedback and would like to get some new ideas and thoughts from all of you.  So, if you&amp;rsquo;re liking our ideas and the way to find and break the limits, please send us your comments via email, twitter or drop us a line.  We&amp;rsquo;d be more than happy to answer and talk directly to share our experiences.&lt;/p&gt;

&lt;h4 id=&#34;note:90fd682791be4b8b148459904d1205f8&#34;&gt;Note&lt;/h4&gt;

&lt;p&gt;This post was originally posted at the &lt;a href=&#34;http://blog.kitematic.com&#34;&gt;Kitematic Blog&lt;/a&gt;, and is slightly updated to recent download links and version numbers.&lt;/p&gt;

&lt;p&gt;&amp;ndash;
Dieter Reuter&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Drive NeoPixels in Docker on Raspberry Pi</title>
      <link>http://blog.hypriot.com/post/drive-neopixels-in-docker/</link>
      <pubDate>Tue, 14 Apr 2015 13:25:33 +0100</pubDate>
      
      <guid>http://blog.hypriot.com/post/drive-neopixels-in-docker/</guid>
      <description>

&lt;p&gt;In our &lt;a href=&#34;http://blog.hypriot.com/post/lets-get-physical/&#34;&gt;last blog post&lt;/a&gt; we showed you how to interact with the GPIO ports and how to turn on one LED. Now for some more magic lights we create a little Node.js application that drives a NeoPixel LED strip from Adafruit in a Docker container.&lt;/p&gt;

&lt;p&gt;Thanks to the latest improvements now both Raspberry Pi B/B+ and the new Pi 2 B can  drive the NeoPixel LED strips from Adafruit with just a level shifter. So it&amp;rsquo;s time to put this into Docker for easier deployment.&lt;/p&gt;

&lt;p&gt;The NeoPixel (or WS2812) LED&amp;rsquo;s are programmable RGB LED&amp;rsquo;s that receive their RGB value with a single serial wire.&lt;/p&gt;

&lt;h2 id=&#34;wiring:463cf4b0db949da92d2a7ea79ab0611f&#34;&gt;Wiring&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s have a look at the wiring first. The Raspberry Pi can create the serial signal on GPIO Pin 18 trough PWM/DMA. But the signal level has to be shifted from 3.3V to 5V for the LED strip. I have used a Adafruit Level Shifter Breakout Board, but a 74AHCT125 level converter could be used as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/neopixel/rpi-levelshifter-neopixel_Steckplatine.png&#34; alt=&#34;wiring diagram&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do not power the NeoPixels directly from your Raspberry Pi as the 5V output could not source enough current to light many pixels. This could damage your Raspberry Pi!&lt;/strong&gt; For my tests with only eight pixels it is ok to use the 5V from the Pi, but be warned!&lt;/p&gt;

&lt;h2 id=&#34;the-code:463cf4b0db949da92d2a7ea79ab0611f&#34;&gt;The code&lt;/h2&gt;

&lt;p&gt;First we create the &lt;code&gt;package.json&lt;/code&gt; file with a dependency to the &lt;code&gt;rpi-ws281x-native&lt;/code&gt; Node.js module that supports all Raspberry Pi versions to drive the NeoPixels.&lt;/p&gt;

&lt;h3 id=&#34;package-json:463cf4b0db949da92d2a7ea79ab0611f&#34;&gt;package.json&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;rpi-node-neopixel-example&amp;quot;,
  &amp;quot;private&amp;quot;: true,
  &amp;quot;version&amp;quot;: &amp;quot;0.0.1&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Node.js NeoPixel app in docker&amp;quot;,
  &amp;quot;author&amp;quot;: &amp;quot;hypriot.com&amp;quot;,
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;rpi-ws281x-native&amp;quot;: &amp;quot;0.4.0&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;server-js:463cf4b0db949da92d2a7ea79ab0611f&#34;&gt;server.js&lt;/h3&gt;

&lt;p&gt;Now we implement a Node.js sample that does some color magic. We have reduced the brightness of the LED&amp;rsquo;s a little bit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var ws281x = require(&#39;rpi-ws281x-native&#39;);

var NUM_LEDS = parseInt(process.argv[2], 10) || 8,
    pixelData = new Uint32Array(NUM_LEDS);

var brightness = 128;

ws281x.init(NUM_LEDS);


var lightsOff = function () {
  for (var i = 0; i &amp;lt; NUM_LEDS; i++) {
    pixelData[i] = color(0, 0, 0);
  }
  ws281x.render(pixelData);
  ws281x.reset();
}

var signals = {
  &#39;SIGINT&#39;: 2,
  &#39;SIGTERM&#39;: 15
};

function shutdown(signal, value) {
  console.log(&#39;Stopped by &#39; + signal);
  lightsOff();
  process.nextTick(function () { process.exit(0); });
}

Object.keys(signals).forEach(function (signal) {
  process.on(signal, function () {
    shutdown(signal, signals[signal]);
  });
});

// ---- animation-loop
var offset = 0;
setInterval(function () {
  for (var i = 0; i &amp;lt; NUM_LEDS; i++) {
    pixelData[i] = wheel(((i * 256 / NUM_LEDS) + offset) % 256);
  }

  offset = (offset + 1) % 256;
  ws281x.render(pixelData);
}, 1000 / 30);

console.log(&#39;Rainbow started. Press &amp;lt;ctrl&amp;gt;+C to exit.&#39;);

// generate rainbow colors accross 0-255 positions.
function wheel(pos) {
  pos = 255 - pos;
  if (pos &amp;lt; 85) { return color(255 - pos * 3, 0, pos * 3); }
  else if (pos &amp;lt; 170) { pos -= 85; return color(0, pos * 3, 255 - pos * 3); }
  else { pos -= 170; return color(pos * 3, 255 - pos * 3, 0); }
}

// generate integer from RGB value
function color(r, g, b) {
  r = r * brightness / 255;
  g = g * brightness / 255;
  b = b * brightness / 255;
  return ((r &amp;amp; 0xff) &amp;lt;&amp;lt; 16) + ((g &amp;amp; 0xff) &amp;lt;&amp;lt; 8) + (b &amp;amp; 0xff);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dockerfile:463cf4b0db949da92d2a7ea79ab0611f&#34;&gt;Dockerfile&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; is very simple here as we use the &lt;code&gt;onbuild&lt;/code&gt; version of our &lt;a href=&#34;https://registry.hub.docker.com/u/hypriot/rpi-iojs/&#34;&gt;hypriot/rpi-iojs&lt;/a&gt; Docker image.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM hypriot/rpi-iojs:onbuild
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;build-the-docker-image:463cf4b0db949da92d2a7ea79ab0611f&#34;&gt;Build the Docker image&lt;/h2&gt;

&lt;p&gt;We now have all parts together and are ready to build the docker image with this command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build -t node-neopixel .
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;run-the-docker-container:463cf4b0db949da92d2a7ea79ab0611f&#34;&gt;Run the Docker container&lt;/h2&gt;

&lt;p&gt;Now it is time to turn on the NeoPixel LED&amp;rsquo;s by running the container&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --cap-add SYS_RAWIO --device /dev/mem -d node-neopixel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On a Raspberry Pi 2 you have to give the container more privileges. So you have to use this command instead&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --privileged -d node-neopixel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/neopixel/neopixel640.gif&#34; alt=&#34;Let there be lights!&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;You can find the complete Node.js example on GitHub at &lt;a href=&#34;https://github.com/hypriot/rpi-node-neopixel-example&#34;&gt;https://github.com/hypriot/rpi-node-neopixel-example&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:463cf4b0db949da92d2a7ea79ab0611f&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now you are ready to start your NeoPixel project on your Raspberry Pi and deploy it with Docker.&lt;/p&gt;

&lt;p&gt;To learn more about NeoPixels head over to the excellent &lt;a href=&#34;https://learn.adafruit.com/adafruit-neopixel-uberguide/overview&#34;&gt;Adafruit&amp;rsquo;s NeoPixel Überguide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s get physical with Docker on the Raspberry Pi</title>
      <link>http://blog.hypriot.com/post/lets-get-physical/</link>
      <pubDate>Thu, 09 Apr 2015 16:49:33 +0100</pubDate>
      
      <guid>http://blog.hypriot.com/post/lets-get-physical/</guid>
      <description>

&lt;p&gt;With Docker on the Raspberry Pi we are able to connect cloud tools with IoT devices. So how can we interact with the real world from inside a Docker container? Let&amp;rsquo;s see and get physical&amp;hellip;&lt;/p&gt;

&lt;p&gt;To keep the tutorial simple we will use the binary from the &lt;a href=&#34;http://wiringpi.com&#34;&gt;wiringPi&lt;/a&gt; project within a Docker container. This command line tool can be used to read and write the GPIO (General Purpose Input/Output) pins of the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve dockerized the wiringPi binary &lt;code&gt;gpio&lt;/code&gt; in a very tiny Docker image of about 2 MByte, so pulling this image even on a Raspberry Pi B is still a fast experience.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull hypriot/rpi-gpio
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;turn-an-led-on-and-off:ea2b0cf3ad09b4d9c9d4cc88763964bd&#34;&gt;Turn an LED on and off&lt;/h2&gt;

&lt;p&gt;In a first little example we just want to turn an LED on and off. You need only a few components to try it yourself.&lt;/p&gt;

&lt;p&gt;See the wiring diagram on how to connect the LED and the 220Ω resistor to your Raspberry Pi for the following examples. We use the 11th (BCM GPIO 17 / wiringPi Pin 0) and 9th (Ground) Pin of the Raspberry Pi B/B+ or Pi 2 B.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gpio/wiringPi-LED-Pin0_Steckplatine.svg&#34; alt=&#34;wiringPi LED Pin 0&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;And here is the circuit diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gpio/wiringPi-LED-Pin0_Schaltplan.svg&#34; alt=&#34;wiringPi LED Pin 0 circuit&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Now you can use these commands:&lt;/p&gt;

&lt;h3 id=&#34;get-status-of-all-gpios:ea2b0cf3ad09b4d9c9d4cc88763964bd&#34;&gt;Get status of all GPIOs&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm --cap-add SYS_RAWIO --device /dev/mem hypriot/rpi-gpio readall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of this command shows a table with all pins and modes as well as the current states.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; +-----+-----+---------+------+---+---Pi 2---+---+------+---------+-----+-----+
 | BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |
 +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+
 |     |     |    3.3v |      |   |  1 || 2  |   |      | 5v      |     |     |
 |   2 |   8 |   SDA.1 | ALT0 | 1 |  3 || 4  |   |      | 5V      |     |     |
 |   3 |   9 |   SCL.1 | ALT0 | 1 |  5 || 6  |   |      | 0v      |     |     |
 |   4 |   7 | GPIO. 7 |   IN | 1 |  7 || 8  | 1 | ALT0 | TxD     | 15  | 14  |
 |     |     |      0v |      |   |  9 || 10 | 1 | ALT0 | RxD     | 16  | 15  |
 |  17 |   0 | GPIO. 0 |   IN | 0 | 11 || 12 | 0 | ALT5 | GPIO. 1 | 1   | 18  |
 |  27 |   2 | GPIO. 2 |   IN | 0 | 13 || 14 |   |      | 0v      |     |     |
 |  22 |   3 | GPIO. 3 |   IN | 0 | 15 || 16 | 0 | IN   | GPIO. 4 | 4   | 23  |
 |     |     |    3.3v |      |   | 17 || 18 | 0 | IN   | GPIO. 5 | 5   | 24  |
 |  10 |  12 |    MOSI | ALT0 | 0 | 19 || 20 |   |      | 0v      |     |     |
 |   9 |  13 |    MISO | ALT0 | 0 | 21 || 22 | 0 | IN   | GPIO. 6 | 6   | 25  |
 |  11 |  14 |    SCLK | ALT0 | 0 | 23 || 24 | 1 | ALT0 | CE0     | 10  | 8   |
 |     |     |      0v |      |   | 25 || 26 | 1 | ALT0 | CE1     | 11  | 7   |
 |   0 |  30 |   SDA.0 |   IN | 1 | 27 || 28 | 1 | IN   | SCL.0   | 31  | 1   |
 |   5 |  21 | GPIO.21 |   IN | 1 | 29 || 30 |   |      | 0v      |     |     |
 |   6 |  22 | GPIO.22 |   IN | 1 | 31 || 32 | 0 | IN   | GPIO.26 | 26  | 12  |
 |  13 |  23 | GPIO.23 |   IN | 0 | 33 || 34 |   |      | 0v      |     |     |
 |  19 |  24 | GPIO.24 |   IN | 0 | 35 || 36 | 0 | IN   | GPIO.27 | 27  | 16  |
 |  26 |  25 | GPIO.25 |   IN | 0 | 37 || 38 | 0 | IN   | GPIO.28 | 28  | 20  |
 |     |     |      0v |      |   | 39 || 40 | 0 | IN   | GPIO.29 | 29  | 21  |
 +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+
 | BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |
 +-----+-----+---------+------+---+---Pi 2---+---+------+---------+-----+-----+
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;set-mode-to-output:ea2b0cf3ad09b4d9c9d4cc88763964bd&#34;&gt;Set mode to output&lt;/h3&gt;

&lt;p&gt;To turn on LED&amp;rsquo;s or switch other outputs you have to set the corresponding GPIO pin to output mode with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm --cap-add SYS_RAWIO --device /dev/mem hypriot/rpi-gpio mode 0 out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This has to be done only once after reboot.&lt;/p&gt;

&lt;h3 id=&#34;turn-on-the-led:ea2b0cf3ad09b4d9c9d4cc88763964bd&#34;&gt;Turn on the LED&lt;/h3&gt;

&lt;p&gt;Now we can turn on the LED with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm --cap-add SYS_RAWIO --device /dev/mem hypriot/rpi-gpio write 0 on
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;turn-off-the-led:ea2b0cf3ad09b4d9c9d4cc88763964bd&#34;&gt;Turn off the LED&lt;/h3&gt;

&lt;p&gt;or off with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm --cap-add SYS_RAWIO --device /dev/mem hypriot/rpi-gpio write 0 off
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;read-a-button-from-gpio:ea2b0cf3ad09b4d9c9d4cc88763964bd&#34;&gt;Read a button from GPIO&lt;/h2&gt;

&lt;p&gt;In another example we attach a button to the Raspberry Pi and read the state from the 12th pin (BCM GPIO 18, wiringPi Pin 1).
The button is also connected to the 2nd Pin (3.3 V) and the pull down resistor is connected to 9th Pin (Ground).&lt;/p&gt;

&lt;p&gt;The wiring diagram shows how to connect all parts. You need a push button, a 1kΩ resistor for pull down and a 10kΩ resistor to connect to the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gpio/wiringPi-Button-Pin1_Steckplatine.svg&#34; alt=&#34;wiringPi Button on Pin 1&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;And here is the corresponding circuit diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gpio/wiringPi-Button-Pin1_Schaltplan.svg&#34; alt=&#34;wiringPi Button on Pin 1 circuit&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;read-button-state:ea2b0cf3ad09b4d9c9d4cc88763964bd&#34;&gt;Read button state&lt;/h3&gt;

&lt;p&gt;To get the status of just the 1th GPIO use this command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm --cap-add SYS_RAWIO --device /dev/mem hypriot/rpi-gpio read 1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The command returns &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; as a result of the input state.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:ea2b0cf3ad09b4d9c9d4cc88763964bd&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this blog post we showed you how easily you can use the GPIO ports of the Raspberry Pi from a Docker container with a simple command line tool.&lt;/p&gt;

&lt;p&gt;There also is a more complete Docker image &lt;a href=&#34;https://registry.hub.docker.com/u/acencini/rpi-python-serial-wiringpi/&#34;&gt;acencini/rpi-python-serial-wiringpi&lt;/a&gt; on the Docker Hub that contains Python and the complete wiringPi2 library to play with.&lt;/p&gt;

&lt;p&gt;If you want to learn more about the GPIO pins you can use the excellent &lt;a href=&#34;http://pi.gadgetoid.com/pinout&#34;&gt;interactive Raspberry Pi Pinout guide&lt;/a&gt; from Gadgetoid.&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share the blog post on Twitter or Facebook.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to use Docker Compose to run complex multi container apps on your Raspberry Pi</title>
      <link>http://blog.hypriot.com/post/docker-compose-nodejs-haproxy/</link>
      <pubDate>Mon, 06 Apr 2015 00:18:47 +0100</pubDate>
      
      <guid>http://blog.hypriot.com/post/docker-compose-nodejs-haproxy/</guid>
      <description>

&lt;p&gt;In this blog post we gonna walk you through the different steps that are necessary to get you started with Docker Compose and show how to use it.&lt;/p&gt;

&lt;p&gt;To demonstrate the benefits of Docker Compose we are going to create a simple Node.js &amp;ldquo;Hello World&amp;rdquo; application which will run on three Docker Node.js containers.
HTTP requests will be distributed to these Node.js nodes by an HAProxy instance running on another Docker container.&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t heard about Docker Compose its docs have a neat description of what it is all about:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Compose is a tool for defining and running complex applications with Docker.
With Compose, you define a multi-container application in a single file,
then spin your application up in a single command which does everything that needs to be done to get it running.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;a-hello-world-application:63a2807194fcdb5e829ff92f8506efa0&#34;&gt;A Hello-World application&lt;/h2&gt;

&lt;p&gt;We start by creating a simple Hello-World &lt;a href=&#34;https://nodejs.org&#34;&gt;Node.js&lt;/a&gt; web application based on &lt;a href=&#34;http://expressjs.com/&#34;&gt;Express.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To keep it simple we are only going to show a &amp;ldquo;Hello World&amp;rdquo; message and the hostname of the container.  This will be useful later on.&lt;/p&gt;

&lt;h3 id=&#34;src-index-js:63a2807194fcdb5e829ff92f8506efa0&#34;&gt;src/index.js&lt;/h3&gt;

&lt;p&gt;First we create a &lt;code&gt;src/index.js&lt;/code&gt; file for the web application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var express = require(&#39;express&#39;);
var os = require(&amp;quot;os&amp;quot;);

var app = express();
var hostname = os.hostname();

app.get(&#39;/&#39;, function (req, res) {
  res.send(&#39;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Hello from Node.js container &#39; + hostname + &#39;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#39;);
});

app.listen(80);
console.log(&#39;Running on http://localhost&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;src-package-json:63a2807194fcdb5e829ff92f8506efa0&#34;&gt;src/package.json&lt;/h3&gt;

&lt;p&gt;Then we need to create a &lt;code&gt;src/package.json&lt;/code&gt; file with the dependencies we need to build and start the Node.js application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;node-hello-world&amp;quot;,
  &amp;quot;private&amp;quot;: true,
  &amp;quot;version&amp;quot;: &amp;quot;0.0.1&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Node.js Hello world app on docker&amp;quot;,
  &amp;quot;author&amp;quot;: &amp;quot;hypriot.com&amp;quot;,
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;express&amp;quot;: &amp;quot;4.12.0&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that is all that is need to set up this small Hello-World application from the nods.js side of things.&lt;/p&gt;

&lt;h3 id=&#34;dockerfile:63a2807194fcdb5e829ff92f8506efa0&#34;&gt;Dockerfile&lt;/h3&gt;

&lt;p&gt;As we want to run our web application in a Docker container we now need to create a &lt;code&gt;Dockerfile&lt;/code&gt; for that.
The Dockerfile is simple and straightforward.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# use our prepared Raspberry Pi compatible Docker base image with Node.js
FROM hypriot/rpi-node:0.12.0

# make the src folder available in the docker image
ADD src/ /src
WORKDIR /src

# install the dependencies from the package.json file
RUN npm install

# make port 80 available outside of the image
EXPOSE 80

# start node with the index.js file of our hello-world application
CMD [&amp;quot;node&amp;quot;, &amp;quot;index.js&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;running-one-container:63a2807194fcdb5e829ff92f8506efa0&#34;&gt;Running one container&lt;/h2&gt;

&lt;p&gt;We can now test if our Node.js web server works by building a Docker application image first and then spinning it up as a new container.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build -t node-hello .

$ docker run -p 80:80 --name web -d node-hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can check if the server is running with the following command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl http://localhost
&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Hello from Node.js container 38f69acbdf13&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we have published the port 80 to the host we also can access our web application from another machine.&lt;/p&gt;

&lt;h3 id=&#34;benchmarking-our-web-application:63a2807194fcdb5e829ff92f8506efa0&#34;&gt;Benchmarking our web application&lt;/h3&gt;

&lt;p&gt;As we are curious guys we want to know how well our Hello-World application performs on a Docker-Raspberry-Pi-Combo.&lt;/p&gt;

&lt;p&gt;So we are going to use &lt;a href=&#34;http://httpd.apache.org/docs/2.2/programs/ab.html&#34;&gt;Apache Bench&lt;/a&gt; to do some benchmarking from another machine in the network.
To install Apache Bench on Debian/Ubuntu use &lt;code&gt;sudo apt-get install apache2-utils&lt;/code&gt;. On Mac OS X &lt;code&gt;ab&lt;/code&gt; usually comes preinstalled.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ab -n 10000 -c 10 http://ip-of-your-rpi/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This runs 10.000 HTTP requests with a concurrency of 10. The CPU load while running the benchmark test shows that only one CPU core of the Raspberry Pi 2 is used. The reason is that Node.js is a single threaded process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/rpi-node-haproxy/htop-1-webserver.png&#34; alt=&#34;htop with 1 webserver&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;And here are the results of the Apache Bench test. As you can see a single web server can handle &lt;strong&gt;338&lt;/strong&gt; Requests per second.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ab -n 10000 -c 10 http://192.168.33.200/
This is ApacheBench, Version 2.3 &amp;lt;$Revision: 655654 $&amp;gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 192.168.33.200 (be patient)
Completed 1000 requests
Completed 2000 requests
Completed 3000 requests
Completed 4000 requests
Completed 5000 requests
Completed 6000 requests
Completed 7000 requests
Completed 8000 requests
Completed 9000 requests
Completed 10000 requests
Finished 10000 requests


Server Software:
Server Hostname:        192.168.33.200
Server Port:            80

Document Path:          /
Document Length:        67 bytes

Concurrency Level:      10
Time taken for tests:   29.499 seconds
Complete requests:      10000
Failed requests:        0
Write errors:           0
Total transferred:      2480000 bytes
HTML transferred:       670000 bytes
Requests per second:    338.99 [#/sec] (mean)
Time per request:       29.499 [ms] (mean)
Time per request:       2.950 [ms] (mean, across all concurrent requests)
Transfer rate:          82.10 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        1    1   2.0      1      78
Processing:    10   28   5.6     26     108
Waiting:        9   28   5.4     26     106
Total:         13   29   5.8     27     109

Percentage of the requests served within a certain time (ms)
  50%     27
  66%     27
  75%     28
  80%     28
  90%     38
  95%     39
  98%     47
  99%     53
 100%    109 (longest request)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cleaning-up:63a2807194fcdb5e829ff92f8506efa0&#34;&gt;Cleaning up&lt;/h3&gt;

&lt;p&gt;That&amp;rsquo;s it for our first test drive. We can now stop the web server container.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker stop web
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;running-multiple-container-with-docker-compose:63a2807194fcdb5e829ff92f8506efa0&#34;&gt;Running multiple container with Docker Compose&lt;/h2&gt;

&lt;p&gt;To run more of these web servers we now use Docker Compose to create a farm of web servers which are running behind a &lt;a href=&#34;http://www.haproxy.org&#34;&gt;HAProxy&lt;/a&gt; load balancer.&lt;/p&gt;

&lt;p&gt;As our mission is to make Docker and its toolset available on ARM we created a &lt;code&gt;docker-compose&lt;/code&gt; binary ready to run on your Raspberry Pi.&lt;/p&gt;

&lt;h3 id=&#34;installation:63a2807194fcdb5e829ff92f8506efa0&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;First we have to install Docker Compose for the ARM-based Raspberry Pi from our fork at &lt;a href=&#34;https://github.com/hypriot/compose&#34;&gt;https://github.com/hypriot/compose&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo sh -c &amp;quot;curl -L https://github.com/hypriot/compose/releases/download/1.1.0-raspbian/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose; chmod +x /usr/local/bin/docker-compose&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;docker-compose-yml:63a2807194fcdb5e829ff92f8506efa0&#34;&gt;docker-compose.yml&lt;/h3&gt;

&lt;p&gt;To get our four container configuration set up we first need to create a &lt;code&gt;docker-compose.yml&lt;/code&gt; file.
We will need three containers &lt;code&gt;weba&lt;/code&gt;, &lt;code&gt;webb&lt;/code&gt; and &lt;code&gt;webc&lt;/code&gt; based on our web application image and one &lt;code&gt;haproxy&lt;/code&gt; container.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;weba:
  build: .
  expose:
    - 80

webb:
  build: .
  expose:
    - 80

webc:
  build: .
  expose:
    - 80

haproxy:
  image: hypriot/rpi-haproxy
  volumes:
   - haproxy:/haproxy-override
  links:
   - weba
   - webb
   - webc
  ports:
   - &amp;quot;80:80&amp;quot;
   - &amp;quot;70:70&amp;quot;

  expose:
   - &amp;quot;80&amp;quot;
   - &amp;quot;70&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each of the three web application containers exposes port 80.
Additionally the HAProxy container will have (network) links to each of the three web application containers.
Furthermore the HAProxy container will exposes port 80 as a central entry point to our Hello-World application webserver farm and its admin interface on port 70.&lt;/p&gt;

&lt;h3 id=&#34;haproxy-haproxy-cfg:63a2807194fcdb5e829ff92f8506efa0&#34;&gt;haproxy/haproxy.cfg&lt;/h3&gt;

&lt;p&gt;HAProxy needs a configuration file that is mapped into the container. Create a file &lt;code&gt;haproxy/haproxy.cfg&lt;/code&gt; with the following content.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;global
  log 127.0.0.1 local0
  log 127.0.0.1 local1 notice

defaults
  log global
  mode http
  option httplog
  option dontlognull
  timeout connect 5000
  timeout client 10000
  timeout server 10000

listen stats :70
  stats enable
  stats uri /

frontend balancer
  bind 0.0.0.0:80
  mode http
  default_backend aj_backends

backend aj_backends
  mode http
  option forwardfor
  # http-request set-header X-Forwarded-Port %[dst_port]
  balance roundrobin
  server weba weba:80 check
  server webb webb:80 check
  server webc webc:80 check
  # option httpchk OPTIONS * HTTP/1.1\r\nHost:\ localhost
  option httpchk GET /
  http-check expect status 200
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HAProxy does a health check for each of our three web servers.&lt;/p&gt;

&lt;h3 id=&#34;running-our-webserver-farm:63a2807194fcdb5e829ff92f8506efa0&#34;&gt;Running our webserver farm&lt;/h3&gt;

&lt;p&gt;Now that we have set up all the necessary parts it is time to spin up all our Docker containers at once. Just run the command &lt;code&gt;docker-compose up&lt;/code&gt; interactively to see what is happening or use option &lt;code&gt;-d&lt;/code&gt; to start all containers in the background.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose up -d
Recreating rpinodehaproxyexample_webb_1...
Recreating rpinodehaproxyexample_webc_1...
Recreating rpinodehaproxyexample_weba_1...
Recreating rpinodehaproxyexample_haproxy_1...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will spin up all of our three web application servers and one HAProxy instance. Only the HAProxy container can be reached from the outside and each request will be load balanced by HAProxy to one of our web servers.&lt;/p&gt;

&lt;p&gt;You can watch the logs of all our containers by running the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose logs
Attaching to rpinodehaproxyexample_haproxy_1, rpinodehaproxyexample_weba_1, rpinodehaproxyexample_webc_1, rpinodehaproxyexample_webb_1
weba_1    | Running on http://localhost
webc_1    | Running on http://localhost
webb_1    | Running on http://localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can use &lt;code&gt;curl&lt;/code&gt; again to test our Hello-World application farm as whole.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# on your Rasberry Pi
$ curl http://localhost
&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Hello from Node.js container fa05496d9ce7&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;~
$ curl http://localhost
&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Hello from Node.js container 1167459cdacc&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;~
$ curl http://localhost
&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Hello from Node.js container 660840416a84&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;~
$ curl http://localhost
&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Hello from Node.js container fa05496d9ce7&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see the container name is different for each &lt;code&gt;curl&lt;/code&gt; request.
And the fourth request has the same container name as the first one.
The HAProxy container forwards each request in a round robin fashion, so each web server gets only one third of the load.&lt;/p&gt;

&lt;h3 id=&#34;benchmarking-our-web-application-farm:63a2807194fcdb5e829ff92f8506efa0&#34;&gt;Benchmarking our web application farm&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s see how our web server farm fares compared to our single web application container instance from our first benchmark.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ab -n 10000 -c 30 http://ip-or-your-rpi/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we run 10.000 HTTP requests with a concurrency of 30. The CPU load while running the benchmark test now shows that all four CPU cores of the Raspberry Pi 2 are used.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/rpi-node-haproxy/htop-3-webserver-haproxy.png&#34; alt=&#34;htop with 3 webserver and haproxy&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;And here are the results of the benchmark test itself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ab -n 10000 -c 30 http://192.168.33.200/
This is ApacheBench, Version 2.3 &amp;lt;$Revision: 655654 $&amp;gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 192.168.33.200 (be patient)
Completed 1000 requests
Completed 2000 requests
Completed 3000 requests
Completed 4000 requests
Completed 5000 requests
Completed 6000 requests
Completed 7000 requests
Completed 8000 requests
Completed 9000 requests
Completed 10000 requests
Finished 10000 requests


Server Software:
Server Hostname:        192.168.33.200
Server Port:            80

Document Path:          /
Document Length:        67 bytes

Concurrency Level:      30
Time taken for tests:   23.353 seconds
Complete requests:      10000
Failed requests:        0
Write errors:           0
Total transferred:      2480000 bytes
HTML transferred:       670000 bytes
Requests per second:    428.22 [#/sec] (mean)
Time per request:       70.058 [ms] (mean)
Time per request:       2.335 [ms] (mean, across all concurrent requests)
Transfer rate:          103.71 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        1    2   1.4      2      15
Processing:     5   68  59.5     51     259
Waiting:        4   67  59.3     51     259
Total:          5   70  59.5     54     260

Percentage of the requests served within a certain time (ms)
  50%     54
  66%     77
  75%     94
  80%    108
  90%    163
  95%    210
  98%    231
  99%    234
 100%    260 (longest request)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see the cluster can handle &lt;strong&gt;428&lt;/strong&gt; Requests per second. Strangely enough we do not get three times the requests per second that we might have expected.
Right now we are not really sure what the reason for this behaviour is. This may or may not be due to the fact that the NIC of the Raspberry Pi is sharing its IO bandwidth via the USB2 port.&lt;/p&gt;

&lt;p&gt;Stopping our little webfarm is also easily done with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose stop
Killing rpinodehaproxyexample_haproxy_1...
Killing rpinodehaproxyexample_weba_1...
Killing rpinodehaproxyexample_webc_1...
Killing rpinodehaproxyexample_webb_1...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to learn more about Docker Compose, just head over to the official documentation at &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;https://docs.docker.com/compose/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can find the code of this example on GitHub at &lt;a href=&#34;https://github.com/hypriot/rpi-node-haproxy-example&#34;&gt;https://github.com/hypriot/rpi-node-haproxy-example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We hope you enjoyed this little tour of Docker Compose!&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on our &lt;a href=&#34;https://news.ycombinator.com/item?id=9329890&#34;&gt;HackerNews-Thread&lt;/a&gt;, Twitter or Facebook.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
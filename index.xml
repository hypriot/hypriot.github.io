<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker Pirates ARMed with explosive stuff</title>
    <link>http://blog.hypriot.com/</link>
    <description>Recent content on Docker Pirates ARMed with explosive stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Nov 2015 21:30:00 +0100</lastBuildDate>
    <atom:link href="http://blog.hypriot.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Just in time for DockerCon EU: a shipload of new Docker ARM goodies</title>
      <link>http://blog.hypriot.com/post/just-in-time-for-DockerCon-EU-a-shipload-of-new-Docker-ARM-goodies/</link>
      <pubDate>Sun, 15 Nov 2015 21:30:00 +0100</pubDate>
      
      <guid>http://blog.hypriot.com/post/just-in-time-for-DockerCon-EU-a-shipload-of-new-Docker-ARM-goodies/</guid>
      <description>

&lt;p&gt;Hard on the heels of Docker announcing &lt;a href=&#34;https://blog.docker.com/2015/11/docker-1-9-production-ready-swarm-multi-host-networking/&#34;&gt;major changes with Docker 1.9&lt;/a&gt; were are making the newest Docker goodies available on HypriotOS.
We are really happy that we were able to finish our new release called &amp;ldquo;Hector&amp;rdquo; just in time for DockerCon EU.&lt;/p&gt;

&lt;p&gt;If you like a personal demo of what&amp;rsquo;s in store for &amp;ldquo;Hector&amp;rdquo; just ping @Quintus23M on Twitter and meet him in person at DockerCon EU.
Dieter and Andreas brought their treasure chest filled with Raspberry Pi&amp;rsquo;s and are eager to show off a bit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/hector-release/testing.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;And if you are not lucky enough to attend DockerCon you might as well read on.&lt;/p&gt;

&lt;p&gt;To name just a few of the highlights, there is now &lt;a href=&#34;http://blog.docker.com/2015/11/docker-multi-host-networking-ga/&#34;&gt;multi-host networking&lt;/a&gt;, totaly improved volume management and a production-ready &lt;a href=&#34;http://blog.docker.com/2015/11/swarm-1-0/&#34;&gt;Swarm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HypriotOS - the ultimate Docker playground for your Raspberry Pi 1 &amp;amp; 2&lt;/strong&gt; has you covered once again: all the cool &amp;amp; latest Docker tools in one convenient package.&lt;/p&gt;

&lt;p&gt;Compared with HypriotOS &amp;ldquo;Will&amp;rdquo; we updated&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;Linux Kernel&lt;/strong&gt; from 4.1.8 to &lt;strong&gt;4.1.12&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;Docker Engine&lt;/strong&gt; from 1.8.2 to &lt;strong&gt;1.9.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Compose&lt;/strong&gt; from 1.4.2 to &lt;strong&gt;1.5.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Swarm&lt;/strong&gt; from 0.4.0 to &lt;strong&gt;1.0.0&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides that we enabled some missing cgroup kernel settings for better Docker support.
We also added a default /boot/config.txt which for instance allows for a better out-of-the-box HDMI display experience (hdmi_force_hotplug=1).&lt;/p&gt;

&lt;p&gt;There is no easier way to get started with Docker on ARM.
Just give it a try and download our &lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20151115-132854.img.zip&#34;&gt;latest image&lt;/a&gt; and get started in less than 5 minutes.&lt;/p&gt;

&lt;h3 id=&#34;detailed-features-of-hypriotos-hector:02d83c62817c8a33766342f7f05756e9&#34;&gt;Detailed Features of HypriotOS &amp;ldquo;Hector&amp;rdquo;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;a modern operating system based on &lt;strong&gt;Raspbian Jessie&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;a recent Raspberry Pi firmware and Device Tree to &lt;strong&gt;support a huge range of hardware add-ons&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;a kernel optimized for Docker-awesomeness: &lt;strong&gt;Kernel 4.1.12 with support for OverlayFS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Pi 1 &amp;amp; 2&lt;/strong&gt; with the same SD card image&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Engine 1.9.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Compose 1.5.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Machine 0.4.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Swarm 1.0.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;network hotplugging&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;out-of-the-box support for &lt;strong&gt;WiFi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Avahi&lt;/strong&gt; (aka mDNS aka Apple Bonjour)&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Open vSwitch&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;our own package repository to easily update individual components&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;download-get-it-while-it-is-still-hot:02d83c62817c8a33766342f7f05756e9&#34;&gt;Download: Get it while it is still hot&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20151115-132854.img.zip&#34;&gt;hypriot-rpi-20151115-132854.img.zip&lt;/a&gt; (~ 438 MB)
&lt;a href=&#34;hypriot-rpi-20151115-132854.img.zip.sha256&#34;&gt;SHA256 checksum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started-Guide&lt;/a&gt; on how to get this SD card image running on your Pi.&lt;/p&gt;

&lt;p&gt;As always, use the comments below to give us feedback and share this post on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Your Hypriot-Team -
Stefan, Dieter, Mathias, Andreas, Govinda&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A touch of magic: Controlling Kitematic &amp; Docker with a touch display on the Raspberry Pi</title>
      <link>http://blog.hypriot.com/post/a-touch-of-magic-controlling-kitematic-with-a-touch-display-on-the-raspberry-pi/</link>
      <pubDate>Mon, 12 Oct 2015 00:15:00 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/a-touch-of-magic-controlling-kitematic-with-a-touch-display-on-the-raspberry-pi/</guid>
      <description>&lt;p&gt;We have recently released our &lt;a href=&#34;http://blog.hypriot.com/post/get-your-all-in-one-docker-playground-now-hypriotos-reloaded/&#34;&gt;new SD card image&lt;/a&gt; called &lt;strong&gt;Will&lt;/strong&gt;.
It is the ultimate Docker playground with Docker Engine, Docker Compose, Docker Swarm and Docker Machine preinstalled.
This image now also supports the new 7&amp;rdquo; Raspberry Pi Touch Display out-of-the-box. So we thought, wouldn&amp;rsquo;t it be cool to have Kitematic running directly on your Raspberry Pi? And yes, we did it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/teaser.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;While polishing and testing &lt;strong&gt;Will&lt;/strong&gt; the idea came up that it would be awesome to be able to use Kitematic on the new great &lt;a href=&#34;https://www.raspberrypi.org/blog/the-eagerly-awaited-raspberry-pi-display/&#34;&gt;7&amp;rdquo; touch display of the Raspberry Pi foundation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We started using the &lt;a href=&#34;https://github.com/zedtux/kitematic/tree/linux-support&#34;&gt;Linux support branch&lt;/a&gt; of Kitematic (&lt;a href=&#34;https://github.com/kitematic/kitematic/pull/696&#34;&gt;PR #696&lt;/a&gt;) and tried to compile it.
After some fiddling we got the first build working. Still in the team we were not satisfied with installing Kitematic directly on the host - we wanted a better way.
This was the time for the next crazy idea. We thought, let us write a &lt;code&gt;Dockerfile&lt;/code&gt; to build Kitematic and run it within a Docker container.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;gallery clearfix&#34; itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Kitematic running on the Raspberry Pi&lt;/div&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/docker-toolbox.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_docker-toolbox.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Unboxing the Docker Toolbox&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Unboxing the Docker Toolbox
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/display-back.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_display-back.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;The RPi 2 is attached to 7 inch Raspberry Pi Display&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    The RPi 2 is attached to 7 inch Raspberry Pi Display
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/connect-to-docker-hub.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_connect-to-docker-hub.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Connect to the Docker Hub&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Connect to the Docker Hub
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/kitematic.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_kitematic.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;List of Docker Images&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    List of Docker Images
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/create.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_create.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Download and create a Docker Container&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Download and create a Docker Container
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/web-preview.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_web-preview.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;A running a container with web preview&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    A running a container with web preview
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbs-up.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/kitematic-on-pi/thumbnails/thumb_thumbs-up.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Thumbs up! All is running well&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Thumbs up! All is running well
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/photoswipe.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/default-skin/default-skin.css&#34;&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe-ui-default.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/initphotoswipe.js&#34;&gt;&lt;/script&gt;



&lt;div class=&#34;pswp&#34; tabindex=&#34;-1&#34; role=&#34;dialog&#34; aria-hidden=&#34;true&#34;&gt;

&lt;div class=&#34;pswp__bg&#34;&gt;&lt;/div&gt;

&lt;div class=&#34;pswp__scroll-wrap&#34;&gt;
    
    &lt;div class=&#34;pswp__container&#34;&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    
    &lt;div class=&#34;pswp__ui pswp__ui--hidden&#34;&gt;
    &lt;div class=&#34;pswp__top-bar&#34;&gt;
      
      &lt;div class=&#34;pswp__counter&#34;&gt;&lt;/div&gt;
      &lt;button class=&#34;pswp__button pswp__button--close&#34; title=&#34;Close (Esc)&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--share&#34; title=&#34;Share&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--fs&#34; title=&#34;Toggle fullscreen&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--zoom&#34; title=&#34;Zoom in/out&#34;&gt;&lt;/button&gt;
      
      
      &lt;div class=&#34;pswp__preloader&#34;&gt;
        &lt;div class=&#34;pswp__preloader__icn&#34;&gt;
          &lt;div class=&#34;pswp__preloader__cut&#34;&gt;
            &lt;div class=&#34;pswp__preloader__donut&#34;&gt;&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;pswp__share-modal pswp__share-modal--hidden pswp__single-tap&#34;&gt;
      &lt;div class=&#34;pswp__share-tooltip&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--left&#34; title=&#34;Previous (arrow left)&#34;&gt;
    &lt;/button&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--right&#34; title=&#34;Next (arrow right)&#34;&gt;
    &lt;/button&gt;
    &lt;div class=&#34;pswp__caption&#34;&gt;
      &lt;div class=&#34;pswp__caption__center&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;style&gt;
    .gallery {  }
    .gallery img { width: 100%; height: auto; }
    .gallery figure { display: block; float: left; margin: 0 5px 5px 0; width: 200px; }
    .gallery figcaption { display: none; }
    .gallery div.title { font-weight: bold; }
    span[itemprop=&#34;copyrightHolder&#34;] { color : #888; float: right; }
    span[itemprop=&#34;copyrightHolder&#34;]:before { content: &#34;Foto: &#34;; }
    img[itemprop=&#34;thumbnail&#34;]{ width: 200px; }
&lt;/style&gt;


&lt;script&gt;initPhotoSwipeFromDOM(&#39;.gallery&#39;);&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;You can find the &lt;code&gt;Dockerfile&lt;/code&gt; in a new GitHub repo at &lt;a href=&#34;https://github.com/hypriot/rpi-kitematic&#34;&gt;hypriot/rpi-kitematic&lt;/a&gt;. If you like you can follow along and try it out with your own display.&lt;/p&gt;

&lt;p&gt;We made a small video to demonstrate how Kitematic looks and feels controlling your containers with a touch display:&lt;/p&gt;

&lt;div class=&#34;video-container&#34;&gt;&lt;iframe src=&#34;https://www.youtube.com/embed/HVyQeCqE_4A&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;As you can see this is still a work-in-progress. But we believe we can make it available soon in an easy and convenient way to be used by everyone.&lt;/p&gt;

&lt;p&gt;If you are one of the lucky owners of the new Raspberry 7&amp;rdquo; touch screen display, you may wanna try out the following steps to run it on your own Pi as well.&lt;/p&gt;

&lt;p&gt;First log in to your Raspberry Pi and install X11. We have created a small helper script that installs everything you need.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -sSL https://github.com/hypriot/x11-on-HypriotOS/raw/master/install-x11-basics.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you have to enable the X11 server to listen on a TCP socket (port 6000). Just insert the line &lt;code&gt;xserver-allow-tcp=true&lt;/code&gt; in the file &lt;code&gt;/etc/lightdm/lightdm.conf&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;xserver-allow-tcp=true&amp;quot; &amp;gt;&amp;gt; /etc/lightdm/lightdm.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next you have to enable X11 server to accept external TCP access from inside of a Docker container.
This is a network connection coming from another TCP/IP address because the container is running in it&amp;rsquo;s own network name space.&lt;/p&gt;

&lt;p&gt;If you want to automate this step, you can add a start script so the TCP connections are allowed after the next reboot.
If you want to do it manually, just skip this step.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;xhost +&amp;quot; &amp;gt; /etc/X11/Xsession.d/36x11-xhost-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To fix the orientation of the 7&amp;rdquo; touch display we have to add &lt;code&gt;lcd_rotate=2&lt;/code&gt; into the &lt;code&gt;/boot/config.txt&lt;/code&gt;. If you just use an HDMI monitor you should skip this step.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;lcd_rotate=2&amp;quot; &amp;gt;&amp;gt; /boot/config.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now reboot your Pi to start the X11 server on your 7&amp;rdquo; touch display or HDMI monitor.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you haven&amp;rsquo;t enabled the TCP connection yet, run the following command to enable it now.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DISPLAY=:0.0 xhost +
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it works you see a message like &lt;code&gt;access control disabled, clients can connect from any host&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you have to build the Kitematic container.
We haven&amp;rsquo;t uploaded it to the Docker Hub yet as it is still a work-in-progress.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/hypriot/rpi-kitematic
cd rpi-kitematic
docker build -t hypriot/rpi-kitematic .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it&amp;rsquo;s time to run the Kitematic container with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --privileged -v /var/run/docker.sock:/var/run/docker.sock -e DISPLAY=172.17.42.1:0.0 hypriot/rpi-kitematic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The container runs Kitematic in development mode. Because of this the first start-up may take some minutes until the user interface finally shows up.
But once it is started, it feels pretty smooth to use.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this demonstration. We currently think of how to best deploy Kitematic for the Pi - whether we should run it in a container or natively on the host.
But running a GUI application in a Docker container was something we wanted to try out anyhow. :)&lt;/p&gt;

&lt;p&gt;What do you think would be the best approach? How should we provide Kitematic on a Raspberry Pi without putting to much bloat into our SD card image by default?&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.
You also might wanna discuss this article on &lt;a href=&#34;https://news.ycombinator.com/item?id=10374271&#34;&gt;HackerNews&lt;/a&gt; or vote it up if you find it interesting.&lt;/p&gt;

&lt;p&gt;Stefan&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get your all-in-one Docker playground now: HypriotOS reloaded!</title>
      <link>http://blog.hypriot.com/post/get-your-all-in-one-docker-playground-now-hypriotos-reloaded/</link>
      <pubDate>Wed, 07 Oct 2015 17:30:00 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/get-your-all-in-one-docker-playground-now-hypriotos-reloaded/</guid>
      <description>

&lt;p&gt;We are happy to announce that after months of hard work we are now releasing a new major version of HypriotOS called &lt;a href=&#34;https://en.wikipedia.org/wiki/Will_Turner&#34;&gt;&amp;ldquo;Will&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Highlights are the upgrade from Raspberry Wheezy to Jessie, the upgrade of the included Raspberry Pi firmware, support for Device Tree and the addition of the most recent versions of Docker Compose, Docker Swarm and Docker Machine to the image.&lt;/p&gt;

&lt;p&gt;It is - more than ever - &lt;strong&gt;the ultimate Docker playground for the Raspberry Pi 1 &amp;amp; 2&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/jessie-release/one-to-rule-them-all_blog.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;We have been coming a long way since we started in February 2015. Then Docker was not easily available for ARM-based devices.
By following long - often outdated - tutorials, only technically well-versed people had a chance to eventually get Docker running on ARM.
It also didn&amp;rsquo;t help that Docker wasn&amp;rsquo;t offically supported on ARM and 32-bit systems.&lt;/p&gt;

&lt;p&gt;As avid Docker users and owners of various ARM devices our mission from the beginning was to make Docker a first-class citizen in the ARM world.
The most popular ARM device that is easily available at reasonable costs is the &lt;a href=&#34;https://www.raspberrypi.org/help/what-is-a-raspberry-pi/&#34;&gt;Raspberry Pi&lt;/a&gt;. More than 5 millions devices have been sold until now.
Thus it was an obvious choice for us to start our mission on the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;The standard way to provide software for the Raspberry Pi is by using a SD card that includes the operating system with all necessary user software.
So our first step was to provide a SD card image that included an operating system that was optimized for the use of Docker.
And that was exactly what we did when we published the &lt;a href=&#34;http://blog.hypriot.com/post/kick-ass-raspberry-pi-2-having-a-forbidden-love-affair-with-docker-1-dot-4-1/&#34;&gt;first version&lt;/a&gt; of our Get-Docker-Up-And-Running-On-Your-Pi-In-No-Time SD card image.
It allowed even novice users to get a working Docker environment running in minutes.&lt;/p&gt;

&lt;p&gt;Besides the ease of use there was another important &amp;ldquo;feature&amp;rdquo; for us when we started publishing our SD card image.
We wanted to provide our users with new Docker versions as soon as they were available.
And that&amp;rsquo;s exactly what we did: Sometimes within minutes after a new Docker version was released you would find it on our website ready to be downloaded.&lt;/p&gt;

&lt;p&gt;Following this approach we did not only update the Docker Engine on a regular basis, but also the included Linux kernel and various other components that made the work with our image easier or more interesting.
The positive feedback we got, spurred us on to tackle a new challenge at the end of July: upgrading the foundation of our SD card image from Raspbian Wheezy to Jessie.
Since August we had three preview releases and we now have not only upgraded HypriotOS from Raspbian Wheezy to &lt;a href=&#34;http://arstechnica.com/information-technology/2015/05/debian-8-linuxs-most-reliable-distro-makes-its-biggest-change-since-1993/&#34;&gt;Jessie&lt;/a&gt;, but we also have upgraded the Linux kernel from 3.18.11 to 4.1.8.
And that&amp;rsquo;s not all: the most exciting addition is that we now support most of the Docker tools besides the Docker Engine.
This includes the most recent versions of &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt;, &lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;Docker Swarm&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/machine/&#34;&gt;Docker Machine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We believe this makes our SD card image one of the easiest and straightforward ways to get started with Docker and its ecosystem!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We also improved the way how upgrades can be done. In the past, upgrading basically meant to reflash your SD card with the newest version of HypriotOS.
To allow upgrading of individual components, without reflashing the SD card, we now have set up our own package repository.
&lt;code&gt;apt&lt;/code&gt; in our new image is configured to use it by default - thus an upgrade is just an &lt;code&gt;apt-get update &amp;amp;&amp;amp; apt-get install docker-compose&lt;/code&gt; away.&lt;/p&gt;

&lt;p&gt;We also massively improved the out-of-the-box support for different hardware extensions that are available for the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;To achieve that we upgraded to the lastest Raspberry Pi firmware and added support for &lt;a href=&#34;http://www.devicetree.org/&#34;&gt;Device Tree&lt;/a&gt;.
With the help of Device Tree many hardware devices like displays and Pi Hats should just work&amp;trade; now.
One great example is &lt;a href=&#34;https://www.raspberrypi.org/blog/the-eagerly-awaited-raspberry-pi-display/&#34;&gt;The official 7&amp;rdquo; touch display of the Raspberry Pi foundation&lt;/a&gt;.
Just attach it to your Pi and you can use it right away.
Besides adding Device Tree we also added support for more WiFi-Dongles from Ralink, Realtec and Atheros.
We hope that all these measures contribute to a much smoother out-of-the-box hardware experience for our users.&lt;/p&gt;

&lt;p&gt;All in all we think that this release is a major step forward and we hope, you enjoy it as much as we do!
Rest assured that we still have some more major improvements in our release pipeline which we will announce soon.&lt;/p&gt;

&lt;h3 id=&#34;detailed-features-of-hypriotos-will:0ebc29021394a433fb8d656202bccf5e&#34;&gt;Detailed Features of HypriotOS &amp;ldquo;Will&amp;rdquo;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;a modern operating system based on &lt;strong&gt;Raspbian Jessie&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;a recent Raspberry Pi firmware and Device Tree to &lt;strong&gt;support a huge range of hardware add-ons&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;a kernel optimized for Docker-awesomeness: &lt;strong&gt;Kernel 4.1.8 with support for OverlayFS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Pi 1 &amp;amp; 2&lt;/strong&gt; with the same SD card image&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Engine 1.8.2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Compose 1.4.2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Machine 0.4.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Swarm 0.4.0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;network hotplugging&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;out-of-the-box support for &lt;strong&gt;WiFi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Avahi&lt;/strong&gt; (aka mDNS aka Apple Bonjour)&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Open vSwitch&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;our own package repository to easily update individual components&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;download-get-it-while-it-is-still-hot:0ebc29021394a433fb8d656202bccf5e&#34;&gt;Download: Get it while it is still hot&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20151004-132414.img.zip&#34;&gt;hypriot-rpi-20151004-132414.img.zip&lt;/a&gt; (~ 438 MB)
&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20151004-132414.img.zip.sha256&#34;&gt;SHA256 checksum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started-Guide&lt;/a&gt; on how to get this SD card image running on our Pi.&lt;/p&gt;

&lt;p&gt;As always, use the comments below to give us feedback and share this post on Twitter or Facebook.
You also might wanna discuss this release on &lt;a href=&#34;https://news.ycombinator.com/item?id=10351792&#34;&gt;HackerNews&lt;/a&gt; or vote it up if you find it interesting.&lt;/p&gt;

&lt;p&gt;Your Hypriot-Team -
Stefan, Dieter, Mathias, Andreas, Govinda&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RC2: Jessie with upgraded Firmware, Linux Kernel and Docker-Engine</title>
      <link>http://blog.hypriot.com/post/rc2-jessie-with-brand-new-kernel-and-docker-and-display-support/</link>
      <pubDate>Mon, 28 Sep 2015 21:00:00 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/rc2-jessie-with-brand-new-kernel-and-docker-and-display-support/</guid>
      <description>

&lt;p&gt;Here comes &lt;strong&gt;Release Candiate 2&lt;/strong&gt; of our brand new &lt;em&gt;Get-Docker-Running-in-under-5-Minutes Hypriot SD card image&lt;/em&gt;.
It is the ultimate Docker playground for the Raspberry Pi 1 &amp;amp; 2.&lt;/p&gt;

&lt;p&gt;This image builds on the &lt;a href=&#34;http://blog.hypriot.com/post/rc1-jessie-with-brand-new-kernel-and-docker/&#34;&gt;RC1 we released roughly two weeks ago&lt;/a&gt; and fixes a couple of issues that were reported by our community.&lt;/p&gt;

&lt;p&gt;We also upgraded the included firmware as well as the Linux-Kernel- and the Docker-Version.&lt;/p&gt;

&lt;p&gt;We finally managed to add out-of-the-box support for &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker-Compose&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;Docker-Swarm&lt;/a&gt; in our image.
Docker-Compose helps you manage a group of containers that make up your application. And if working on one server/device is not enough for you you might wanna look into Docker-Swarm as it allows you to manage a cluster of Docker-Engines on multiple servers/devices.&lt;/p&gt;

&lt;p&gt;Another noteably thing that we now support is the &lt;a href=&#34;https://www.raspberrypi.org/blog/the-eagerly-awaited-raspberry-pi-display/&#34;&gt;official 7&amp;rdquo; display of the Raspberry PI foundation&lt;/a&gt;.
Just attach it to your PI and you should be able to use Docker together with the awesomeness of a beautiful GUI at once.
That&amp;rsquo;s exactly what one of our users did last week by using &lt;a href=&#34;https://medium.com/@icebob/jessie-on-raspberry-pi-2-with-docker-and-chromium-c43b8d80e7e1&#34;&gt;a beautiful Node.js-App on HypriotOS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Albeit he still had to add support for the 7&amp;rdquo; display manually on his own.&lt;br /&gt;
As of today this is not necessary anymore as we upgraded the included Raspberry PI Firmware to a more recent version that supports a number of new displays.&lt;/p&gt;

&lt;p&gt;And last but not least we updated Docker from version &lt;strong&gt;1.8.1&lt;/strong&gt; to &lt;strong&gt;1.8.2&lt;/strong&gt; and the included Linux Kernel from &lt;strong&gt;4.1.6&lt;/strong&gt; to &lt;strong&gt;4.1.8&lt;/strong&gt;..&lt;/p&gt;

&lt;p&gt;So here comes an overview of all the things that are part of our new Hypriot SD card image&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;battle-tested-docker-jessie-with-some-sugar:ccfb3997a8de6874549db7c1add28f11&#34;&gt;Battle-Tested Docker-Jessie with some sugar&lt;/h3&gt;

&lt;p&gt;On top of &lt;a href=&#34;http://arstechnica.com/information-technology/2015/05/debian-8-linuxs-most-reliable-distro-makes-its-biggest-change-since-1993/&#34;&gt;Jessie&lt;/a&gt; we added all the battle-tested ingredients of our previous &lt;em&gt;Get-Docker-Running-in-under-5-Minutes Hypriot SD card image&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a kernel optimised for Docker-awesomeness: &lt;strong&gt;Kernel 4.1.8 with support for OverlayFS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;the most recent &lt;strong&gt;Docker 1.8.2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Pi 1 &amp;amp; 2&lt;/strong&gt; with the same image&lt;/li&gt;
&lt;li&gt;Docker-Compose &lt;strong&gt;1.4.2&lt;/strong&gt; included&lt;/li&gt;
&lt;li&gt;Docker-Swarm &lt;strong&gt;0.4.0&lt;/strong&gt; included&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;network hotplugging&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for a couple of Raspberry PI displays&lt;/li&gt;
&lt;li&gt;out of the box support for &lt;strong&gt;Wifi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Avahi&lt;/strong&gt; (aka Apple Bonjour)&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Open vSwitch&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During the next two weeks we want to improve the SD card image and gather more feedback to make it a great out-of-the-box experience for our users.&lt;/p&gt;

&lt;h3 id=&#34;get-it-while-it-is-still-hot:ccfb3997a8de6874549db7c1add28f11&#34;&gt;Get it while it is still hot&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150928-174643.img.zip&#34;&gt;hypriot-rpi-20150928-174643.img.zip&lt;/a&gt; (~ 438 MB)
&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150928-174643.img.zip.sha256&#34;&gt;SHA256 checksum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started-Guide&lt;/a&gt; on how to get this SD card image running on our Pi.&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share this post on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Govinda, Stefan &amp;amp; Dieter&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RC1: Jessie with brand new Linux Kernel and Docker</title>
      <link>http://blog.hypriot.com/post/rc1-jessie-with-brand-new-kernel-and-docker/</link>
      <pubDate>Thu, 10 Sep 2015 21:30:00 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/rc1-jessie-with-brand-new-kernel-and-docker/</guid>
      <description>

&lt;p&gt;Here comes &lt;strong&gt;Release Candiate 1&lt;/strong&gt; of our brand new &lt;em&gt;Get-Docker-Running-in-under-5-Minutes Hypriot SD card image&lt;/em&gt;.
It is the ultimate Docker playground for the Raspberry Pi 1 &amp;amp; 2.&lt;/p&gt;

&lt;p&gt;This image builds on the &lt;a href=&#34;http://blog.hypriot.com/post/moving-docker-from-wheezy-to-jessie/&#34;&gt;Beta Version we published six weeks ago&lt;/a&gt; and fixes a couple of issues that were reported by our community.
The positiv feedback we got spurred us on to make this release even better.&lt;/p&gt;

&lt;p&gt;And by the way - keep this kind of positiv feedback coming - it really makes a difference and pushes us to be the best we can&amp;hellip; :)&lt;/p&gt;

&lt;p&gt;So we updated Docker from &lt;strong&gt;1.7.1&lt;/strong&gt; to &lt;strong&gt;1.8.1&lt;/strong&gt;.
We also had the impression that our current version of the Linux Kernel - &lt;strong&gt;3.18.11&lt;/strong&gt; - did need some kind of a refresher - so we added the &lt;strong&gt;4.1.6&lt;/strong&gt; version it.&lt;/p&gt;

&lt;p&gt;So here again the list of features that make this release really awesome.&lt;/p&gt;

&lt;h3 id=&#34;battle-tested-docker-jessie-with-some-sugar:0cbf622673eabe9849be13a37f374c36&#34;&gt;Battle-Tested Docker-Jessie with some sugar&lt;/h3&gt;

&lt;p&gt;On top of &lt;a href=&#34;http://arstechnica.com/information-technology/2015/05/debian-8-linuxs-most-reliable-distro-makes-its-biggest-change-since-1993/&#34;&gt;Jessie&lt;/a&gt; we added all the battle-tested ingredients of our previous &lt;em&gt;Get-Docker-Running-in-under-5-Minutes Hypriot SD card image&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a kernel optimised for Docker-awesomeness: &lt;strong&gt;Kernel 4.1.6 with support for OverlayFS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;the most recent &lt;strong&gt;Docker 1.8.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Pi 1 &amp;amp; 2&lt;/strong&gt; with the same image&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;network hotplugging&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;out of the box support for &lt;strong&gt;Wifi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Avahi&lt;/strong&gt; (aka Apple Bonjour)&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Open vSwitch&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During the next two weeks we want to improve the SD card image and gather more feedback to make it a great out-of-the-box experience for our users.&lt;/p&gt;

&lt;h3 id=&#34;get-it-while-it-is-still-hot:0cbf622673eabe9849be13a37f374c36&#34;&gt;Get it while it is still hot&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150909-070022.img.zip&#34;&gt;hypriot-rpi-20150909-070022.img.zip&lt;/a&gt; (~ 398 MB)
&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150909-070022.img.zip.sha256&#34;&gt;SHA256 checksum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started-Guide&lt;/a&gt; on how to get this SD card image running on our Pi.&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share this post on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Govinda &amp;amp; Stefan&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kitematic meets Windows Docker</title>
      <link>http://blog.hypriot.com/post/kitematic-meets-windows-docker/</link>
      <pubDate>Wed, 09 Sep 2015 00:07:37 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/kitematic-meets-windows-docker/</guid>
      <description>&lt;p&gt;I just want to share some screenshots with you. Today I have played with Kitematic on a Windows Server 2016 TP3 and made it talk to the Windows Docker Engine. Yes, no VirtualBox in between. Just starting native Windows Containers from the Kitematic interface.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/kitematic-meets-windows-docker/kitematic-win2016tp3.png-shadow.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;A closer look at the left column shows a running &lt;strong&gt;mongo&lt;/strong&gt; container. Yes, I know, you cannot pull docker images with the Windows Docker Engine at the moment. But I have built a mongo Docker image for Windows with this &lt;a href=&#34;https://github.com/StefanScherer/dockerfiles-windows/blob/master/mongo/3.0/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; and created the container by pressing the &lt;strong&gt;Create&lt;/strong&gt; button in the Kitematic UI.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/kitematic-meets-windows-docker/kitematic-mongo.png-shadow.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;And to show that this is no fake you can see some windows paths in the container logs view:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/kitematic-meets-windows-docker/kitematic-list.png-shadow.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all for now.&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Stefan&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Better be prepared for the ARMed IoT flood and port Docker apps to ARM</title>
      <link>http://blog.hypriot.com/post/port_dockerfiles_to_arm/</link>
      <pubDate>Wed, 26 Aug 2015 02:55:55 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/port_dockerfiles_to_arm/</guid>
      <description>

&lt;p&gt;The great ARMed flood has begun. Especially for the sake of the IoT, every day new tiny devices pop up all around the world. And since most of these devices are build on top of the ARM architecture, with each new device, ARM gets more important compared to the x86 architecture proposed by Intel/AMD. Maybe you even need to run your next app on ARM! Thus better be prepared and port apps to ARM, it&amp;rsquo;s basically just one step to take.&lt;/p&gt;

&lt;p&gt;In comparison to the x86 CPU architecture, ARM supports low power consumption by design, not just as a feature. When thinking of a sensor network at your home, you don&amp;rsquo;t wanna change the battery of all your sensors every week. Well, think of any device that profits from low power consumption, which does not need the CPU power of a sumo wrestler. As with sumo wrestlers, computers cluttered with resources lack the flexibility needed in today&amp;rsquo;s IT, and the resources of their built in x86 CPU often are barely needed.&lt;/p&gt;

&lt;p&gt;Speaking of the number of devices: Some say we will have 20, some say 50 billion connected IoT devices by 2020, where most of them will be ARMed. Well, least let&amp;rsquo;s conclude: It will be a flooding number of them.&lt;/p&gt;

&lt;p&gt;Fair enough, so let&amp;rsquo;s start making apps compatible to ARM. To do so, you only need to make sure that the binaries of your apps are compiled explicitly for the ARM architecture. Thus, porting an app to ARM basically means to change the binaries to ARM compatible ones. Let&amp;rsquo;s do it!&lt;/p&gt;

&lt;h2 id=&#34;get-started-with-docker-for-an-easy-porting-example:88da4e06b8e93673f9a039fdd642e0cc&#34;&gt;Get started with Docker for an easy porting example&lt;/h2&gt;

&lt;p&gt;Of course, we use &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;. And in the world of Docker, apps are described by Dockerfiles, like recipes for making cakes. Thus, when we wanna ARM an app, we only change its recipe, i.e. its Dockerfile. So make sure you know about the commands in Dockerfiles with the help of the &lt;a href=&#34;https://docs.docker.com/reference/builder/&#34;&gt;Dockerfile reference at Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From now on, let&amp;rsquo;s better refer to an app as a &lt;strong&gt;service&lt;/strong&gt; because often a Dockerfile or a docker-compose file is a recipe for a collection of apps which are combined to a service. Thus a service is described by one or many apps.&lt;/p&gt;

&lt;p&gt;In order to directly apply the necessary steps, we go through an example. In this example, we wanna port the &lt;a href=&#34;http://httpd.apache.org/&#34;&gt;Apache webserver&lt;/a&gt; to ARM.&lt;/p&gt;

&lt;p&gt;As hardware for our example, we use a Raspberry Pi, which is one of the most popular ARM devices for developers. Of course, as operating system we use our &lt;a href=&#34;http://blog.hypriot.com/downloads/&#34;&gt;SD Card image&lt;/a&gt; that provides Docker on the Raspberry Pi by just &lt;a href=&#34;https://github.com/hypriot/flash&#34;&gt;flashing it to a SD card and booting it&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;let-s-arm-it:88da4e06b8e93673f9a039fdd642e0cc&#34;&gt;Let&amp;rsquo;s ARM it!&lt;/h2&gt;

&lt;p&gt;First, search for a Dockerfile that describes the service you wanna ARM. In most cases, Dockerfiles reside on the &lt;a href=&#34;https://hub.docker.com/explore/&#34;&gt;Dockerhub&lt;/a&gt; or on &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When choosing a Dockerfile, make sure you can check the following three prerequisites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take the one with the most stars, the most popular one, or the ones tagged with  &amp;ldquo;official&amp;rdquo;. In addition, prefer the less complex ones if possible.&lt;/li&gt;
&lt;li&gt;Take a Dockerfile that is based on Ubuntu or a Debian based image. To evaluated this, check what&amp;rsquo;s in the Dockerfile after the &lt;code&gt;FROM&lt;/code&gt; command. Any of &lt;code&gt;debian&lt;/code&gt; or &lt;code&gt;ubuntu&lt;/code&gt; is fine.&lt;/li&gt;
&lt;li&gt;Pay attention to the license. Some licenses forbid to copy and change a Dockerfile.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Apache, we found a small and popular Dockerfile &lt;a href=&#34;https://hub.docker.com/r/eboraas/apache/~/dockerfile/&#34;&gt;here&lt;/a&gt;. We check the Dockerfile if the three prerequisites in the list we above are met. Here, the Dockerfile is based on Debian, it seems clean and there&amp;rsquo;s no license given that restricts the usage of this work.&lt;/p&gt;

&lt;p&gt;Note that every now and then there are mistakes in Dockerfiles. Therefore we recommend to test the Docker images on your x86 machine before porting it. In case you encounter any errors, the performance advantage of an x86 machine makes debugging much faster than on your ARM machine. See the &lt;a href=&#34;http://docs.docker.com/installation/&#34;&gt;Docker docs to install Docker&lt;/a&gt; on your machine. It&amp;rsquo;s fast and painless.&lt;/p&gt;

&lt;p&gt;Thus, we test the chosen Dockerfile for Apache on a x86 machine. The &lt;code&gt;docker run&lt;/code&gt; command to do this is given in the repo description on the Dockerhub. In advance we had to add the tag &lt;code&gt;wheezy&lt;/code&gt; (read the next chapter when you are curious about the &lt;code&gt;wheezy&lt;/code&gt; here).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run -p 80:80 -p 443:443 -d eboraas/apache:wheezy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When the Docker command completed, point your browser to &lt;code&gt;http://&amp;lt;IP OF YOUR PI&amp;gt;:80/&lt;/code&gt;. You should see the default page of Apache:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/port_dockerfiles_to_arm/apache_default_x86.png&#34; alt=&#34;port_dockerfiles_to_arm&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Next, let&amp;rsquo;s move to the target machine running on ARM. Copy the content of the Dockerfile as is to your ARM machine.&lt;/p&gt;

&lt;p&gt;In our case, we log into the Raspberry Pi (&lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;get help from our getting started guide&lt;/a&gt;) and copy the content of the Dockerfile to the machine. For this, on the machine, we use the &lt;code&gt;vim&lt;/code&gt; editor by executing&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vim Dockerfile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Paste the content.&lt;/p&gt;

&lt;p&gt;Then make sure that the content is formatted as it is on the website, e.g. any command should be at the beginning of a new line etc.&lt;/p&gt;

&lt;p&gt;After formatting, this is how the Dockerfile should look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM eboraas/debian:stable
MAINTAINER Ed Boraas &amp;lt;ed@boraas.ca&amp;gt;

RUN apt-get update &amp;amp;&amp;amp; apt-get -y install apache2 &amp;amp;&amp;amp; apt-get clean
ENV APACHE_RUN_USER www-data
ENV APACHE_RUN_GROUP www-data
ENV APACHE_LOG_DIR /var/log/apache2

RUN /bin/ln -sf ../sites-available/default-ssl /etc/apache2/sites-enabled/001-default-ssl
RUN /bin/ln -sf ../mods-available/ssl.conf /etc/apache2/mods-enabled/
RUN /bin/ln -sf ../mods-available/ssl.load /etc/apache2/mods-enabled/

EXPOSE 80
EXPOSE 443
CMD [&amp;quot;/usr/sbin/apache2ctl&amp;quot;, &amp;quot;-D&amp;quot;, &amp;quot;FOREGROUND&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to change all binaries that are used in this Dockerfile to ARM compatible ones. In general, there are two locations that need to be adjusted:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;FROM field in the Dockerfile&lt;/strong&gt;, which defines the software layer our service will inherit from. Here we change &lt;code&gt;debian:jessie&lt;/code&gt; to &lt;code&gt;resin/rpi-raspbian:wheezy&lt;/code&gt;. Then of course, replace the &lt;code&gt;MAINTAINER&lt;/code&gt; with your name and email address.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;binaries of the apps that are being downloaded&lt;/strong&gt;. In our case, we do not need to change anything because the binary, which is &lt;code&gt;apache2&lt;/code&gt; is downloaded via the &lt;code&gt;apt-get install&lt;/code&gt; command. This command is already architecture sensitive, i.e. it downloads only compatible binaries to the target machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, save the Dockerfile. Try if the Dockerfile works by creating &amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker build -t rpi-apache .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&amp;hellip; and starting a Docker image:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run -p 80:80 -d rpi-apache&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, when you point your browser to the IP address of your ARM machine, you should see the same default page of Apache&amp;rsquo;s as when you started the image on x86 before.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CONGRATULATIONS! You ARMed your first service!&lt;/strong&gt; Now you have the basic understanding to ARM more services! In case you encounter any error, get help in the next chapter. We cross our fingers for you!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: After you successfully ported a service, you can push it to the Dockerhub, so that other people can use it. In addition make sure to put &lt;code&gt;rpi-&lt;/code&gt; in front of the Docker image&amp;rsquo;s name. This declares it as a Raspberry Pi compatible image and therefore also as an ARM compatible service. It will make the life easier for people looking for ARMed services on the Dockerhub.&lt;/p&gt;

&lt;h2 id=&#34;debugging-hints-to-arm-a-service:88da4e06b8e93673f9a039fdd642e0cc&#34;&gt;Debugging hints to ARM a service&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Remove any command you do not need to run the service&lt;/strong&gt;. In our Apache example, you can delete everything regarding SSL if you do not need it. This already might solve some problems.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make sure, that all binaries used are pointing to ARM compatible ones&lt;/strong&gt;. If there is no compiled ARM binary available, you might need to compile it yourself.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Check other tags&lt;/strong&gt;. You may have noticed that in the porting example above we explicitly defined the tag &lt;code&gt;wheezy&lt;/code&gt; in the &lt;code&gt;Docker run&lt;/code&gt; command. Why? With the tag &lt;code&gt;stable&lt;/code&gt; as it was defined in the original Dockerfile, the Docker image will not work. The reason for this is a common problem, which arises when Dockerfiles are not updated regularly: At the time the author created this Dockerfile, &lt;code&gt;stable&lt;/code&gt; pointed to Debian Wheezy. This worked out fine. However, meanwhile Debian Jessy has been released which ships updated versions of software as well. This invisibly changes the Dockerfile, because &lt;code&gt;apt-get install apache2&lt;/code&gt; now installs the latest version of Apache. This updated version of Apache is controlled by commands other than the ones given in the Dockerfile. This causes Apache to crash. So this Dockerfile simply has not been updated yet to the newer commands of the updated version of Apache. Thus, try other tags in your Dockerfile – they might just work!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search for ADD commands&lt;/strong&gt; that copy files from the host into the container. Sometimes you need to download these files in advance. Refer to the instructions of the repository, especially look for links to the authors code base , e.g. at Github&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Check the &amp;lsquo;docker run&amp;rsquo; command in the Dockerhub repo info&lt;/strong&gt;. If there are any depending containers (defined via &lt;code&gt;--link&lt;/code&gt; parameter), you need porting these images to ARM too. Also check if someone else already ported the depending images you look for.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Try to resolve any other errors by asking an online search engine&lt;/strong&gt;. Often, you are not the first one having this problem.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;optimize-the-dockerfile-optional:88da4e06b8e93673f9a039fdd642e0cc&#34;&gt;Optimize the Dockerfile (optional)&lt;/h2&gt;

&lt;p&gt;Optimizing the Dockerfile does have several advantages: It often makes it smaller, i.e. you need less time to download packages and less disk space on your machine. Further, you gain a better overview over the Dockerfile&amp;rsquo;s structure which simplifies debugging. In the following, we give some recommendations of how to optimize a Dockerfile:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Format it nicely.&lt;/strong&gt; Put commands only at the beginning of a line. Add line breaks with &lt;code&gt;\&lt;/code&gt; and combine commands if possible. See this example:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;RUN  	apt-get update &amp;amp;&amp;amp; \
	apt-get -y install apache2 &amp;amp;&amp;amp; \
	apt-get clean

...

EXPOSE 80,443
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Again, remove any commands that are not needed&lt;/strong&gt;, i.e. avoid downloading and installing packages that will not be used.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;At the end of a Dockerfile, remove any files that are useless&lt;/strong&gt;, e.g. execute &lt;code&gt;apt-get autoremove &amp;amp;&amp;amp; apt-get clean&lt;/code&gt; after installing several packages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Also, refer to these blog posts that provide more hints (advanced)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.xebia.com/2015/06/30/how-to-create-the-smallest-possible-docker-container-of-any-image/&#34;&gt;How to create the smallest possible docker image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you have a service in Go:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.atlassian.com/blog/2015/07/osx-static-golang-binaries-with-docker/&#34;&gt;Static Go binaries with Docker on OSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aerofs/gockerize&#34;&gt;Automatically build static Go binaries and put them into containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://joeshaw.org/smaller-docker-containers-for-go-apps/&#34;&gt;Smaller Docker containers for Go apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use the comments below to share your experiences. Also, join the discussions in the &lt;a href=&#34;https://gitter.im/hypriot/talk&#34;&gt;community channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We wish &lt;strong&gt;happy porting parties&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Mathias &amp;amp; Andreas&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Access your Docker-based Raspberry Pi at home from the internet</title>
      <link>http://blog.hypriot.com/post/access_your_raspberry_pi_from_the_internet/</link>
      <pubDate>Thu, 06 Aug 2015 09:55:55 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/access_your_raspberry_pi_from_the_internet/</guid>
      <description>

&lt;p&gt;If you followed our guides about &lt;a href=&#34;http://blog.hypriot.com/post/run-your-own-github-like-service-with-docker/&#34;&gt;setting up a git service&lt;/a&gt; or about &lt;a href=&#34;http://blog.hypriot.com/post/static-website-generation-on-steriods-with-docker/&#34;&gt;setting up a blog&lt;/a&gt; on your Raspberry Pi, you might want to access these services from the internet. In most cases, this requires three steps to be done. We will show how to take them successfully.&lt;/p&gt;

&lt;p&gt;First check, which of the following two cases match your network environment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you have full access to your router, i.e. if you are able to change your router&amp;rsquo;s configuration, this blog post is exactly what you will need to go through. Please double check and log in into your router&amp;rsquo;s admin panel. If you are able to login, continue reading below.&lt;/li&gt;
&lt;li&gt;Else if you cannot login into your router or if you sit behind a firewall, you need to use solutions that implement the so called &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hole_punching_%28networking%29&#34;&gt;hole punching technique&lt;/a&gt;&lt;/em&gt;. In this case, you may wait for the blog post covering that at some day in the future :-) If you are curious already today, have a look at &lt;a href=&#34;https://ngrok.com/&#34;&gt;ngrok&lt;/a&gt;, &lt;a href=&#34;http://localtunnel.me/&#34;&gt;localtunnel&lt;/a&gt; or &lt;a href=&#34;https://pagekite.net/&#34;&gt;pagekite&lt;/a&gt;, and ping us if you need help to set them up!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since you have access to your router, this prerequisite is met and we can start to make your Raspberry Pi accessible from the internet! There&amp;rsquo;s just one thing more to mention upfront: The instructions we provide are not always as step-by-step as we would like to offer them. It&amp;rsquo;s just that the hardware you use and your network topology probably differ a lot among other readers&amp;rsquo; setup. Thus at some point we rather explain the overall concepts and ask you to adapt the concepts to your environment. We do our best to make it a painless experience for you, of course!&lt;/p&gt;

&lt;p&gt;The three steps we gonna take in the following, are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.hypriot.com/post/access_your_raspberry_pi_from_the_internet/#step-1-setup-dynamic-dns:fb391bf85a6f0a9f03fa40ecb16bfcab&#34;&gt;Step 1: Register at a Dynamic DNS service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.hypriot.com/post/access_your_raspberry_pi_from_the_internet/#step-2-configure-port-forwarding-in-your-router:fb391bf85a6f0a9f03fa40ecb16bfcab&#34;&gt;Step 2: Define port forwarding rules in your router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.hypriot.com/post/access_your_raspberry_pi_from_the_internet/#step-3-docker-run-your-containers-with-published-ports:fb391bf85a6f0a9f03fa40ecb16bfcab&#34;&gt;Step 3: Docker run your containers with published ports&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, hands on!&lt;/p&gt;

&lt;h2 id=&#34;step-1-setup-dynamic-dns:fb391bf85a6f0a9f03fa40ecb16bfcab&#34;&gt;Step 1: Setup Dynamic DNS&lt;/h2&gt;

&lt;p&gt;A Dynamic DNS provider maps a domain to the IP address of the router at your home. For example, if the Dynamic DNS provider offers the domain &lt;em&gt;my-home.domain-of-provider.org&lt;/em&gt; to you, you will reach your home by just typing this domain into your browser - from all over the world. This is useful because your router usually changes its IP address it is accessible from the internet on a daily basis. Thus, you want some automated tracking  of these changes. Moreover it is often easier to remember a domain instead of an IP address. Therefore, first we register a free domain that always routes to your router at home.&lt;/p&gt;

&lt;p&gt;As a Dynamic DNS provider, we recommend &lt;a href=&#34;https://virtual-ip.org/&#34;&gt;virtual-ip.org&lt;/a&gt;, which is free and has no commercial purpose.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/access_service_from_internet/virtual_ip.png&#34; alt=&#34;virtual_ip.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Follow these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Register at &lt;a href=&#34;https://virtual-ip.org/&#34;&gt;virtual-ip.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;After login, on the main page, click on the button &lt;strong&gt;Add Host&lt;/strong&gt;. There, choose a hostname and click the blue button &lt;strong&gt;Add Host&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the list on the main page, you should see a table showing a domain name and an IP address. The domain name will be the one you will reach your home with.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, you need to install &lt;em&gt;virtual-ip.org&lt;/em&gt; as Dynamic DNS provider in your router. First you need to &lt;strong&gt;login to your router&lt;/strong&gt;. To do so, point your browser to the IP address of your router. If you are not sure about the IP address of your router, try to figure out your own IP address, which is e.g. &lt;code&gt;192.168.0.20&lt;/code&gt;. Then, exchange the last number of your own IP address by &lt;code&gt;1&lt;/code&gt;. The resulting IP address is often assigned to your router. Point your browser to this IP address and you should see your router&amp;rsquo;s web interface:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/access_service_from_internet/fritzbox_login.png&#34; alt=&#34;fritzbox_login&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The screenshot is taken of the web interface of a router called &amp;ldquo;Fritz!Box&amp;rdquo;, which we will use to show the steps in the following. If you have a different router, check if your device is listed in the &lt;a href=&#34;https://virtual-ip.org/support.aspx&#34;&gt;documentation of virtual-ip.org about how to configure Dynamic DNS&lt;/a&gt;. If your device is not listed, try to apply the following steps to your device accordingly.&lt;/p&gt;

&lt;p&gt;In our case, using the Fritz!Box, you need to go to &lt;strong&gt;Internet&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Permit Access&lt;/strong&gt; and open the &lt;strong&gt;Dynamic DNS&lt;/strong&gt; tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/access_service_from_internet/fritz_box_dyn-dns-settings.png&#34; alt=&#34;fritz_box_dyn-dns-settings.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Here, &lt;strong&gt;Activate the checkbox and fill the fields with your credentials of virtual-ip.org&lt;/strong&gt;. If the Update URL is not provided in the &lt;em&gt;virtual-ip.org&lt;/em&gt; documenation, try the following one. In advance, replace &lt;code&gt;&amp;lt;your-domain&amp;gt;&lt;/code&gt; with the domain you just registered at &lt;em&gt;virtual-ip.org&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://update.virtual-ip.org/nic/update?system=dyndns&amp;amp;hostname=&amp;lt;your-domain&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After you have set the configuration for Dynamic DNS in your router, &lt;strong&gt;login to virtual-ip.org&lt;/strong&gt;. Now, the IP address of your router should be displayed in the column &lt;strong&gt;IP Address&lt;/strong&gt; next to your new domain as in the following screenshot. You can double check if this really is your IP address with a service like &lt;a href=&#34;https://www.whatismyip.com/&#34;&gt;whatismyip.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/access_service_from_internet/virtual_ip_domain-list.png&#34; alt=&#34;virtual_ip_domain-list.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations!&lt;/strong&gt; At this point you can reach your router at home by a domain in the internet. However, your requests won&amp;rsquo;t reach the Raspberry Pi yet because the router is not configured to forward requests from your router to the Raspberry Pi. Continue with the following section to configure this.&lt;/p&gt;

&lt;h2 id=&#34;step-2-configure-port-forwarding-in-your-router:fb391bf85a6f0a9f03fa40ecb16bfcab&#34;&gt;Step 2: Configure port forwarding in your router&lt;/h2&gt;

&lt;p&gt;In order to forward requests from your router to the Raspberry Pi, you need create &lt;em&gt;port forwarding rules&lt;/em&gt; in your router.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create a port forwarding rule for an app on your Raspberry Pi. In the web interface of your router, find the section &lt;em&gt;Port Forwarding&lt;/em&gt; or alike. In our case, we go to &lt;strong&gt;Internet&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Permit Access&lt;/strong&gt;. As shown in the following screenshot, you should see an option to create port forwarding rules. Klick on &lt;strong&gt;New Port Forwading&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/access_service_from_internet/fritzbox_port-forwarding-menu-port-forwarding-start.png&#34; alt=&#34;fritzbox_port-forwarding-menu-port-forwarding-start.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Then, the web interface asks for some input. Before we gonna provide this, choose &lt;strong&gt;other applications&lt;/strong&gt; in the drop down box. This will expand the input fields as shown in the next screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/access_service_from_internet/fritzbox_port-forwarding-rules-input-empty.png&#34; alt=&#34;fritzbox_port-forwarding-rules-input-empty.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Now refer to the following table to provide the required input. Also have look at the next screenshot which shows an example of the result.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Input field&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Name&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Choose an arbitrary name for the port forwarding rule.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Protocol&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Use option &lt;code&gt;TCP&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;From Port x through Port y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Provide the port number the app on your Raspberry Pi listens on. We do not need a range of several port numbers here, so type in the same port number twice.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;To computer&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Type the IP address of your Raspberry Pi&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;To Port&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Type the same port number as in field &lt;code&gt;From port&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If you are not sure about the port numbers you need to define, checkout the chapter &lt;em&gt;Example: How to create port forwarding rules for Docker containers&lt;/em&gt; below. There we will give some introduction of how port forwarding works.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/access_service_from_internet/fritzbox_port-forwarding-fules-inputs-filled.png&#34; alt=&#34;fritzbox_port-forwarding-fules-inputs-filled.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Save. Next you should see a list of all rules that have been created. Make sure that the rule is &lt;strong&gt;Enabled&lt;/strong&gt; and that the parameters are correct.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/access_service_from_internet/fritzbox_port-forwarding-see-config.png&#34; alt=&#34;fritzbox_port-forwarding-see-config.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations!&lt;/strong&gt; You managed to configure everything to reach your Raspberry Pi from the internet. Next, we will see how to bring Docker into this game.&lt;/p&gt;

&lt;h2 id=&#34;step-3-docker-run-your-containers-with-published-ports:fb391bf85a6f0a9f03fa40ecb16bfcab&#34;&gt;Step 3: Docker run your containers with published ports&lt;/h2&gt;

&lt;p&gt;Before we get down to Docker, we will put some technical details about how port forwarding works upfront.&lt;/p&gt;

&lt;p&gt;Incoming requests from the internet to your router will always include a port number, e.g. &lt;code&gt;my-home.domain-of-provider.org:8080&lt;/code&gt;. This port number (here: &lt;code&gt;8080&lt;/code&gt;)  tells the router, that this request wants to be forwarded to a device in your local network that is specified as the receiver for all requests to port &lt;code&gt;8080&lt;/code&gt;. This specification has to be done manually by creating &lt;em&gt;port forwarding rules&lt;/em&gt; in your router. Doing so, you tell the router, which requests it should forward to which device in your local network.&lt;/p&gt;

&lt;p&gt;For instance you can create a port forwarding rule saying&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All incoming requests to port 8080 shall be forwarded to 192.168.0.10&lt;/em&gt;,&lt;/p&gt;

&lt;p&gt;where &lt;code&gt;192.168.0.10&lt;/code&gt; is the IP address of your Raspberry Pi.&lt;/p&gt;

&lt;p&gt;The port that is published by a Docker container on your Raspberry Pi is specified whenever you start a new Docker container with&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run --publish &amp;lt;port number&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For instance, if you execute&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run --publish 8080:8080&lt;/code&gt;,&lt;/p&gt;

&lt;p&gt;your container will be available at port &lt;code&gt;8080&lt;/code&gt;. For us, only the first port number is relevant. Just specify the port twice, like &lt;code&gt;8080:8080&lt;/code&gt; and you will be fine. Now, you can specify a port forwarding rule in your router that forwards requests to port &lt;code&gt;8080&lt;/code&gt; to the IP address of your Raspberry Pi.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note (1)! You need to create one port forwarding rule for each port you publish when creating a new Docker container.&lt;/strong&gt; Doing so, make sure that you always use one port only once. You cannot bind the same port to two different Docker containers. However, some Docker containers might require to publish several ports on your Raspberry Pi. This is true e.g. when setting up the &lt;a href=&#34;http://blog.hypriot.com/post/run-your-own-github-like-service-with-docker/&#34;&gt;Gogs Git service&lt;/a&gt;. Then, you need to create rules in your router saying that all requests to these ports shall be forwarded to the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note (2)! In case you already started a container and want to know which port a container has published, execute&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker ps&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You will see a list of all running Docker containers. In the column &lt;strong&gt;PORTS&lt;/strong&gt; you find the ports a container has published. Use the port number in front of the &lt;code&gt;-&amp;gt;&lt;/code&gt; sign as port number when creating the forwarding rules your router.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/access_service_from_internet/docker-ps_on_rpi_with-marker.png&#34; alt=&#34;docker-ps_on_rpi_with-marker.png&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;finally-test-your-setup:fb391bf85a6f0a9f03fa40ecb16bfcab&#34;&gt;Finally test your setup&lt;/h2&gt;

&lt;p&gt;To test your setup, we recommend to use a simple webserver you make available to the internet. In the terminal on your Raspberry Pi, execute as root:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d --publish 80:80 hypriot/rpi-busybox-httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, point your browser to the domain name you registered at the Dynamic DNS service. If everything has been configured properly, a small website from our team should appear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/access_service_from_internet/browser-pi-hypriot-logo.png&#34; alt=&#34;browser-pi-hypriot-logo&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;We cross our fingers so that it will work for you! Please use the comments below to give us feedback and share it on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;&amp;ndash; Mathias&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Moving Docker from Wheezy to Jessie</title>
      <link>http://blog.hypriot.com/post/moving-docker-from-wheezy-to-jessie/</link>
      <pubDate>Mon, 27 Jul 2015 20:37:38 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/moving-docker-from-wheezy-to-jessie/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;What’s even better then Wheezy? Yes, your right - that’s Jessie.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And that’s not only because we very much like what crazy stuff &lt;em&gt;&lt;a href=&#34;https://blog.jessfraz.com/&#34;&gt;Jessie&lt;/a&gt;&lt;/em&gt; is doing with Docker.
No, it’s because &lt;em&gt;Jessie&lt;/em&gt; is &lt;a href=&#34;http://arstechnica.com/information-technology/2015/05/debian-8-linuxs-most-reliable-distro-makes-its-biggest-change-since-1993/&#34;&gt;the next version of the Debian operating system&lt;/a&gt; that forms the foundation of our SD card image.&lt;/p&gt;

&lt;p&gt;Jessie updates all the included software to much more recent versions. And most notably it switches the old sys-v-init startup system to systemd.&lt;/p&gt;

&lt;h3 id=&#34;battle-tested-docker-jessie-with-some-sugar:4fe06647c823b8256063c23fed15f529&#34;&gt;Battle-Tested Docker-Jessie with some sugar&lt;/h3&gt;

&lt;p&gt;On top of that we added all the battle-tested ingredients of our previous Get-Docker-Running-in-under-5-Minutes SD card image:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a kernel optimised for Docker-awesomeness: &lt;strong&gt;Kernel 3.18.11 with support for OverlayFS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;the most recent &lt;strong&gt;Docker 1.7.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Pi 1 &amp;amp; 2&lt;/strong&gt; with the same image&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;network hotplugging&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;out of the box support for &lt;strong&gt;Wifi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Avahi&lt;/strong&gt; (aka Apple Bonjour)&lt;/li&gt;
&lt;li&gt;support for &lt;strong&gt;Open vSwitch&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We consider this new version of our SD card image still as &lt;strong&gt;beta quality&lt;/strong&gt;.
During the next two weeks we want to improve it step by step and gather feedback to make it a great out-of-the-box experience for our users.&lt;/p&gt;

&lt;h3 id=&#34;get-it-while-it-is-still-hot:4fe06647c823b8256063c23fed15f529&#34;&gt;Get it while it is still hot&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150727-151455.img.zip&#34;&gt;hypriot-rpi-20150727-151455.img.zip&lt;/a&gt; (~ 424 MB)&lt;br /&gt;
&lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150727-151455.img.zip.sha256&#34;&gt;SHA256 checksum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started-Guide&lt;/a&gt; on how to get this SD card image running on our Pi.&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Govinda&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let Docker Swarm all over your Raspberry Pi Cluster</title>
      <link>http://blog.hypriot.com/post/let-docker-swarm-all-over-your-raspberry-pi-cluster/</link>
      <pubDate>Fri, 03 Jul 2015 00:30:45 +0100</pubDate>
      
      <guid>http://blog.hypriot.com/post/let-docker-swarm-all-over-your-raspberry-pi-cluster/</guid>
      <description>

&lt;p&gt;In this blog post we show you how easy it is to install Swarm on your Raspberry Pi and how to set up a Raspberry Pi Swarm cluster with the help of Docker Machine.&lt;/p&gt;

&lt;p&gt;We have built a little &amp;ldquo;Pi Tower&amp;rdquo; with three Raspberry Pi 2 model B and combined them into a Docker Swarm cluster.&lt;/p&gt;

&lt;p&gt;As you can see in the pictures below we have mounted the three Raspberry Pi&amp;rsquo;s on top of a 5-port D-Link GBit switch. All four devices get their power from an Anker 4-port USB charger.
This makes a very solid but portable &amp;ldquo;Pi Tower&amp;rdquo; with only one power plug and one external network connector.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;gallery clearfix&#34; itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Pi Tower&lt;/div&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/docker-swarm/d-link_mounting_holes.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/docker-swarm/thumbnails/thumb_d-link_mounting_holes.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;The Making of Pi Tower&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    The Making of Pi Tower
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/docker-swarm/d-link_rpi2_cluster.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/docker-swarm/thumbnails/thumb_d-link_rpi2_cluster.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Pi Tower with D-Link Switch&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Pi Tower with D-Link Switch
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/docker-swarm/d-link_rpi2_cluster02.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/docker-swarm/thumbnails/thumb_d-link_rpi2_cluster02.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Pi Tower with D-Link Switch&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Pi Tower with D-Link Switch
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/docker-swarm/d-link_rpi2_cluster_lights.jpg&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1600x1200&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/docker-swarm/thumbnails/thumb_d-link_rpi2_cluster_lights.jpg&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Pi Tower at night&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Pi Tower at night
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Hypriot&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/photoswipe.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/default-skin/default-skin.css&#34;&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe-ui-default.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/initphotoswipe.js&#34;&gt;&lt;/script&gt;



&lt;div class=&#34;pswp&#34; tabindex=&#34;-1&#34; role=&#34;dialog&#34; aria-hidden=&#34;true&#34;&gt;

&lt;div class=&#34;pswp__bg&#34;&gt;&lt;/div&gt;

&lt;div class=&#34;pswp__scroll-wrap&#34;&gt;
    
    &lt;div class=&#34;pswp__container&#34;&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    
    &lt;div class=&#34;pswp__ui pswp__ui--hidden&#34;&gt;
    &lt;div class=&#34;pswp__top-bar&#34;&gt;
      
      &lt;div class=&#34;pswp__counter&#34;&gt;&lt;/div&gt;
      &lt;button class=&#34;pswp__button pswp__button--close&#34; title=&#34;Close (Esc)&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--share&#34; title=&#34;Share&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--fs&#34; title=&#34;Toggle fullscreen&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--zoom&#34; title=&#34;Zoom in/out&#34;&gt;&lt;/button&gt;
      
      
      &lt;div class=&#34;pswp__preloader&#34;&gt;
        &lt;div class=&#34;pswp__preloader__icn&#34;&gt;
          &lt;div class=&#34;pswp__preloader__cut&#34;&gt;
            &lt;div class=&#34;pswp__preloader__donut&#34;&gt;&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;pswp__share-modal pswp__share-modal--hidden pswp__single-tap&#34;&gt;
      &lt;div class=&#34;pswp__share-tooltip&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--left&#34; title=&#34;Previous (arrow left)&#34;&gt;
    &lt;/button&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--right&#34; title=&#34;Next (arrow right)&#34;&gt;
    &lt;/button&gt;
    &lt;div class=&#34;pswp__caption&#34;&gt;
      &lt;div class=&#34;pswp__caption__center&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;style&gt;
    .gallery {  }
    .gallery img { width: 100%; height: auto; }
    .gallery figure { display: block; float: left; margin: 0 5px 5px 0; width: 200px; }
    .gallery figcaption { display: none; }
    .gallery div.title { font-weight: bold; }
    span[itemprop=&#34;copyrightHolder&#34;] { color : #888; float: right; }
    span[itemprop=&#34;copyrightHolder&#34;]:before { content: &#34;Foto: &#34;; }
    img[itemprop=&#34;thumbnail&#34;]{ width: 200px; }
&lt;/style&gt;


&lt;script&gt;initPhotoSwipeFromDOM(&#39;.gallery&#39;);&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;For your convenience we have prepared a &lt;a href=&#34;http://www.amazon.de/gp/registry/wishlist/BCGEW9W3V8GM/ref=cm_wl_rlist_go_o&#34;&gt;small shopping list&lt;/a&gt; of all the components we used at Amazon.&lt;/p&gt;

&lt;h2 id=&#34;pre-requisites:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Pre-requisites&lt;/h2&gt;

&lt;p&gt;For this tutorial we will run all steps from a Mac. To do this we need three tools.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A flash tool to write the SD card images for all the Raspberry Pi&amp;rsquo;s.&lt;/li&gt;
&lt;li&gt;The Docker client, which is only a &lt;code&gt;brew install docker&lt;/code&gt; away.&lt;/li&gt;
&lt;li&gt;The Docker Machine binary with the hypriot driver&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;flash-all-sd-cards:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Flash all SD cards&lt;/h2&gt;

&lt;p&gt;First we want to install the SD cards with Docker preinstalled.
On a Mac or Linux machine we can use our little &lt;a href=&#34;https://github.com/hypriot/flash&#34;&gt;flash command line tool&lt;/a&gt; to prepare the three SD cards with these simple commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ flash --hostname pi1 http://downloads.hypriot.com/hypriot-rpi-20150416-201537.img.zip
$ flash --hostname pi2 http://downloads.hypriot.com/hypriot-rpi-20150416-201537.img.zip
$ flash --hostname pi3 http://downloads.hypriot.com/hypriot-rpi-20150416-201537.img.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now insert the SD cards into all Raspberry Pi&amp;rsquo;s and boot them. They will come up with different host names after a while.&lt;/p&gt;

&lt;h2 id=&#34;retrieve-ip-addresses:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Retrieve IP addresses&lt;/h2&gt;

&lt;p&gt;Our SD card image also starts the avahi-daemon to announce the hostname through mDNS, so each Pi is reachable with &lt;code&gt;pi1.local&lt;/code&gt;, &lt;code&gt;pi2.local&lt;/code&gt; and &lt;code&gt;pi3.local&lt;/code&gt;.
Docker Machine cannot resolve these hostnames at the moment, so we have to retrieve the IP addresses for the Raspberry Pi&amp;rsquo;s manually.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ping -c 1 pi1.local
$ ping -c 1 pi2.local
$ ping -c 1 pi3.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this example we assume that the three IP adresses are &lt;code&gt;192.168.1.101&lt;/code&gt;, &lt;code&gt;102&lt;/code&gt; and &lt;code&gt;103&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;insert-ssh-public-key:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Insert SSH public key&lt;/h2&gt;

&lt;p&gt;Docker Machine connects to each Raspberry Pi through SSH. You have to insert your public SSH key to avoid entering the password of the &lt;code&gt;root&lt;/code&gt; user.
To insert the SSH public key into a remote machine there is a tool called &lt;code&gt;ssh-copy-id&lt;/code&gt;. You might have to install it first.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ssh-copy-id root@192.168.1.101
$ ssh-copy-id root@192.168.1.102
$ ssh-copy-id root@192.168.1.103
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For each of the above commands you have to enter the password &lt;code&gt;hypriot&lt;/code&gt; for the user &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-docker-machines:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Create Docker Machines&lt;/h2&gt;

&lt;p&gt;For the next step we use our Docker Machine driver to connect to the Raspberry Pi Hypriot devices.
Our hypriot driver is not yet integrated into the official Docker Machine binary.
So we have to download the &lt;code&gt;docker-machine&lt;/code&gt; binary with our hypriot machine driver.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -o docker-machine http://downloads.hypriot.com/docker-machine_0.4.0-dev_darwin-amd64
$ chmod +x ./docker-machine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download the binary into the current directory and make it executable. You may move it
into another directory in your PATH to use it from other directories.&lt;/p&gt;

&lt;h3 id=&#34;create-swarm-token:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Create Swarm Token&lt;/h3&gt;

&lt;p&gt;A Docker Swarm cluster uses a unique Cluster ID which allows the individual swarm agents to find each other.
We need such a Cluster ID to build our Docker Swarm.&lt;/p&gt;

&lt;p&gt;This can be done in your shell with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export TOKEN=$(for i in $(seq 1 32); do echo -n $(echo &amp;quot;obase=16; $(($RANDOM % 16))&amp;quot; | bc); done; echo)
$ echo $TOKEN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this example we use&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export TOKEN=babb1eb00bdecadedec0debabb1eb00b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you already have a Docker swarm container up and running, you also can create a new Cluster ID
with &lt;code&gt;docker run --rm hypriot/rpi-swarm create&lt;/code&gt;.
We simply used the shell commands above to skip this chicken or egg problem.&lt;/p&gt;

&lt;h3 id=&#34;create-the-swarm-master:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Create the Swarm Master&lt;/h3&gt;

&lt;p&gt;Now we create the Docker Swarm Master on the first Raspberry Pi with our generated Cluster ID&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./docker-machine create -d hypriot --swarm --swarm-master --swarm-discovery token://$TOKEN --hypriot-ip-address 192.168.1.101 pi1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command connects to the Raspberry Pi &amp;ldquo;pi1&amp;rdquo;, secures the Docker daemon with TLS and pulls the Docker image &lt;code&gt;hypriot/rpi-swarm:latest&lt;/code&gt; from the Docker Hub.
It starts both the Swarm Master as well as a Swarm Agent in a container.&lt;/p&gt;

&lt;p&gt;To check if everything works we can connect to the newly started Swarm Master by using the following command.
It retrieves all environment variables needed for the Docker client to communicate with the Swarm.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ eval $(./docker-machine env --swarm pi1)
$ docker info
Containers: 2
Strategy: spread
Filters: affinity, health, constraint, port, dependency
Nodes: 1
 pi1: 192.168.1.202:2376
  └ Containers: 2
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.3 MiB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have successfully set up a lonely Swarm Manager. Let&amp;rsquo;s start some more Raspberry Pi&amp;rsquo;s to prevent the Swarm Manager from feeling lonely.&lt;/p&gt;

&lt;h3 id=&#34;create-the-swarm-agents:89caca6f537cb35a7331e4245fcac0e7&#34;&gt;Create the Swarm agents&lt;/h3&gt;

&lt;p&gt;For the rest of the Raspberry Pi&amp;rsquo;s we also create Docker Machine connections with the same Cluster ID.
This time we run docker-machine without the &lt;code&gt;--swarm-master&lt;/code&gt; option to just spin up a Swarm Agent container in each Pi.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./docker-machine create -d hypriot --swarm --swarm-discovery token://$TOKEN --hypriot-ip-address 192.168.1.102 pi2
$ ./docker-machine create -d hypriot --swarm --swarm-discovery token://$TOKEN --hypriot-ip-address 192.168.1.103 pi3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s check what the swarm looks like now&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker info
Containers: 4
Strategy: spread
Filters: affinity, health, constraint, port, dependency
Nodes: 3
 pi1: 192.168.1.101:2376
  └ Containers: 2
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.3 MiB
 pi2: 192.168.1.102:2376
  └ Containers: 1
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.3 MiB
 pi3: 192.168.1.103:2376
  └ Containers: 1
  └ Reserved CPUs: 0 / 4
  └ Reserved Memory: 0 B / 971.3 MiB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also can list all containers in the whole swarm as usual with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker ps
CONTAINER ID        IMAGE                      COMMAND                CREATED             STATUS              PORTS                                    NAMES
5effaa7de4a3        hypriot/rpi-swarm:latest   &amp;quot;/swarm join --addr    2 minutes ago       Up About a minute   2375/tcp                                 pi3/swarm-agent
6b73003b7246        hypriot/rpi-swarm:latest   &amp;quot;/swarm join --addr    4 minutes ago       Up 3 minutes        2375/tcp                                 pi2/swarm-agent
5e00fbf7b9f6        hypriot/rpi-swarm:latest   &amp;quot;/swarm join --addr    7 minutes ago       Up 7 minutes        2375/tcp                                 pi1/swarm-agent
02c905ec25a0        hypriot/rpi-swarm:latest   &amp;quot;/swarm manage --tls   7 minutes ago       Up 7 minutes        2375/tcp, 192.168.1.101:3376-&amp;gt;3376/tcp   pi1/swarm-agent-master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After setting up the Docker Swarm you now can use the normal Docker commands through port 3376.
Have a look at the &lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;official Docker Swarm documentation&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;Just remember to set up the environment correctly to communicate with the Swarm Master before using the Docker client by&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ eval $(docker-machine env --swarm pi1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then you can remotely manage your Raspberry Pi Swarm from your Mac. See - this was not really difficult, was it?&lt;/p&gt;

&lt;p&gt;We hope you enjoyed this little tour of Docker Swarm!&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Stefan&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Static Website Generation on Steriods with Docker</title>
      <link>http://blog.hypriot.com/post/static-website-generation-on-steriods-with-docker/</link>
      <pubDate>Tue, 30 Jun 2015 09:03:12 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/static-website-generation-on-steriods-with-docker/</guid>
      <description>

&lt;p&gt;Within the blogging community static site generators have been an exceptional hot topic in the last couple of years (at least before Docker appeared).
There are even &lt;a href=&#34;https://www.staticgen.com/&#34;&gt;whole projects&lt;/a&gt; dedicated to giving an overview of the most popular static site generators.&lt;/p&gt;

&lt;p&gt;One of the first static site generators that got really popular was &lt;a href=&#34;https://github.com/jekyll/jekyll/commits/master&#34;&gt;Jekyll&lt;/a&gt;, which was conceived by &lt;a href=&#34;http://tom.preston-werner.com/&#34;&gt;Tom Preston-Werner&lt;/a&gt; of Github fame.
Typically static site generators transform input (e.g. text in a lightweight markup language such as Markdown or reStructuredText) to static HTML with the help of templates and filters.&lt;/p&gt;

&lt;p&gt;There are several advantages to this approach - to name just a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;as the input is text it can easily be managed in a version control system like Git&lt;/li&gt;
&lt;li&gt;as the output is just static HTML it can easily deployed with a cheap webhoster or even for free with a service like &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;static HTML is much faster than dynamic HTML&lt;/li&gt;
&lt;li&gt;there is neither a server-side web-framework nor a database necessary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While Jekyll is still the most popular static site generator there are some new contenders, which are gaining traction very fast.&lt;/p&gt;

&lt;p&gt;Out of these static site generators &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; is our favorite. Hugo is written in &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt; and is focused on speed and performance.
We are using Hugo to generate this very blog&amp;hellip; :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/hugo/hugo-logo.png&#34; alt=&#34;hugo-logo&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;What we like most is that Hugo is basically just one binary. That makes it really easy to use Hugo in a Docker container.
And - surprise - that is exactly what we did. You can find the prepared image on the &lt;a href=&#34;https://registry.hub.docker.com/u/hypriot/rpi-hugo/&#34;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-hugo:208d73d31f997ec1e4befc58fff83e1c&#34;&gt;Setting up Hugo&lt;/h2&gt;

&lt;p&gt;To get started with Hugo you need a Raspberry Pi with a running Docker engine.
The best way to get there is with our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting Started Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After logging into your Rasberry Pi via SSH do a&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker pull hypriot/rpi-hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, create a directory for your awesome new blogging project at a location of your choice.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir awesome-blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change into the new directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd awesome-blog
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-a-new-site:208d73d31f997ec1e4befc58fff83e1c&#34;&gt;Create a new site&lt;/h2&gt;

&lt;p&gt;First create a new site by&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -v `pwd`:/www hypriot/rpi-hugo new site .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Afterwards you will find a basic directory layout which was created by Hugo.
Next we need to download some nifty themes for our new site.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone --recursive --depth 1 https://github.com/spf13/hugoThemes themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you execute &lt;code&gt;ls&lt;/code&gt; you should see a folder structure similar to the one in the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/hugo/hugo-files-after-new-site.png&#34; alt=&#34;hugo-files-after-new-site&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;create-a-new-article:208d73d31f997ec1e4befc58fff83e1c&#34;&gt;Create a new article&lt;/h2&gt;

&lt;p&gt;To create a new article run the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -v `pwd`:/www hypriot/rpi-hugo new post/viral-hit.md
echo &#39;# Hello World from Hypriot!&#39; &amp;gt;&amp;gt; content/post/viral-hit.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create and start a new container based on the &amp;lsquo;hypriot/rpi-hugo&amp;rsquo; image.
It will also mount the current directory into the container at &lt;code&gt;/www&lt;/code&gt; and run &lt;code&gt;hugo new post/viral-hit.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hugo new&lt;/code&gt; creates a new markdown document in the subfolder &lt;code&gt;post&lt;/code&gt;. With the &lt;code&gt;echo&lt;/code&gt; command we add a Hello-World message to our blog post.
You can further edit this document with the editor of your choice.&lt;/p&gt;

&lt;h2 id=&#34;live-preview:208d73d31f997ec1e4befc58fff83e1c&#34;&gt;Live preview&lt;/h2&gt;

&lt;p&gt;To see a live preview of your new awesome blog run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 1313:1313 -v `pwd`:/www hypriot/rpi-hugo server --bind=0.0.0.0 -w -D --theme=hyde
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now open your browser and go to &lt;code&gt;http://&amp;lt;ip of your pi&amp;gt;:1313&lt;/code&gt; to preview your new blog.
Whenever you change any of your documents, Hugo will regenerate the HTML and reload the resulting webpage in your browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/hugo/preview.png&#34; alt=&#34;preview&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;build-the-final-html-pages:208d73d31f997ec1e4befc58fff83e1c&#34;&gt;Build the final HTML pages&lt;/h2&gt;

&lt;p&gt;To get the final HTML pages for publication you just need to run Hugo without any options.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -v `pwd`:/www hypriot/rpi-hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Afterwards you can find the generated static HTML pages in a folder called &lt;code&gt;public&lt;/code&gt; in your project folder.
Now you can just open &lt;code&gt;public/index.html&lt;/code&gt; with a browser or upload the contents of the &lt;code&gt;public&lt;/code&gt; folder to a webhoster of your preference.&lt;/p&gt;

&lt;p&gt;You can learn more about Hugo and how to use it on it&amp;rsquo;s &lt;a href=&#34;http://gohugo.io/overview/introduction/&#34;&gt;documentation website&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;how-we-use-hugo:208d73d31f997ec1e4befc58fff83e1c&#34;&gt;How we use Hugo&lt;/h2&gt;

&lt;p&gt;Right at the beginning when we started blogging about Docker on ARM we were faced with several challenges.
We failed to address these challenges with our first blogging platform - Posthaven - and soon switched to Hugo.
We wrote about this false start with Posthaven in &lt;a href=&#34;http://blog.hypriot.com/post/moved-from-posthaven-to-hugo/&#34;&gt;We moved our blog from Posthaven to Hugo after only three posts. Why?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But we did not tell you everything in that blog post. We held some bits back&amp;hellip; :)&lt;br /&gt;
Hugo in Docker really starts to make a lot of sense when it is used together with some other tools in a &lt;strong&gt;team publishing workflow&lt;/strong&gt;.
Our publishing workflow is based on Git, Github, Drone, Hugo and GitHub Pages.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://drone.io/&#34;&gt;Drone&lt;/a&gt; is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;Continuous Integration&lt;/a&gt; server written in Go (surprise!) that runs exceptionally well in a Docker container.
Drone can be used to &amp;ldquo;listen&amp;rdquo; for changes in a Git-Repository - in this case the sources of our Hugo blog project. Drone can then be configured to generate the static HTML of your blog in another Hugo container and publish it to Github Pages.
But describing this setup in detail is for another day.&lt;/p&gt;

&lt;p&gt;Two days ago we introduced Gogs, today Hugo - next will be a blog post about Drone.
After that we will have all the ingredients together to describe how to integrate everything for an &lt;strong&gt;ultimate Docker and Raspberry Pi based blogging platform&lt;/strong&gt;.
What else would you wanna use for instant Blogger-(ähm Docker-) Bliss?&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Govinda &amp;amp; Andreas&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Run your own GitHub-like service with the help of Docker</title>
      <link>http://blog.hypriot.com/post/run-your-own-github-like-service-with-docker/</link>
      <pubDate>Sat, 27 Jun 2015 22:19:55 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/run-your-own-github-like-service-with-docker/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; and &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; have taken the world by storm.
No serious developer today can afford not to &lt;a href=&#34;https://www.atlassian.com/git/tutorials/&#34;&gt;know how to work with Git&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But what if you do not want to have your code in the cloud? What if you want to host your code repositories yourself?&lt;/p&gt;

&lt;p&gt;For most of us this meant to go with &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;Gitlab&lt;/a&gt;. The biggest downside in the past was that Gitlab had so many different parts that the installation could be very tedious.
With the &lt;a href=&#34;https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md&#34;&gt;Omnibus Gitlab Installer&lt;/a&gt; the installation did get a lot easier but this does not change the fact that Gitlab is compromised of so many different parts.&lt;/p&gt;

&lt;p&gt;Why does this matter?&lt;/p&gt;

&lt;p&gt;It really starts to matter when you want to put your apps/services into something like Docker.
Putting all parts of Gitlab (Postgres, Ruby, Ruby on Rails, Redis, Git, etc.) into one container is certainly not the Docker way of doing things, but puttings these parts into different containers makes it really complicated and involved to set up, too.&lt;/p&gt;

&lt;p&gt;Fortunately we did find another solution for your Git needs - one that really works well with Docker.
It is called &lt;a href=&#34;http://gogs.io/&#34;&gt;Gogs&lt;/a&gt; and is written in Go and has no additional dependencies with the exception of a SSH server.
Gogs is such a lightweight solution that it only needs about 5 MB of RAM and very few CPU resources while running.
This makes it a perfect candidate for a home-grown GitHub alternative that can easily run on a - you guessed it - Raspberry Pi.&lt;/p&gt;

&lt;p&gt;In this post, we show you how to set up &lt;em&gt;Gogs&lt;/em&gt; in just a couple of minutes. Thanks to Docker it will be fast and easy.&lt;/p&gt;

&lt;p&gt;To follow along you gonna need a Raspberry Pi with Docker.
In case you do not have Docker running on your Raspberry Pi our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started guide&lt;/a&gt; will cover everything you need to know to get up and running in a snap.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gogs.qiniudn.com/gogs_demo.gif&#34; alt=&#34;Gogs Screenshots&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;If you wanna dive more deeply into &lt;em&gt;Gogs&lt;/em&gt; there is a &lt;a href=&#34;http://gogs.io/docs/intro/&#34;&gt;official &lt;em&gt;Gogs&lt;/em&gt; documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;how-to-set-up-gogs:dc7018a7890c20895bf31528a8ab5dea&#34;&gt;How to set up Gogs&lt;/h2&gt;

&lt;p&gt;First, log into your Raspberry Pi via SSH.
Please refer to our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Getting-Started guide&lt;/a&gt; if you are not sure about how to do this.&lt;/p&gt;

&lt;p&gt;After logging in successfully pull and run &lt;em&gt;Gogs&lt;/em&gt; by executing the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d --name my-go-git-server --publish 8022:22 --publish 3000:3000 --volume `pwd`/gogs-data/:/data hypriot/rpi-gogs-raspbian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s see what each of these options means&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;ndash;name&lt;/strong&gt; gives the Docker container a name&lt;br /&gt;
  &lt;strong&gt;&amp;ndash;publish&lt;/strong&gt; (first) instructs Docker to open port &lt;code&gt;8022&lt;/code&gt;. We will use this port to access Gogs via git/ssh.&lt;br /&gt;
  &lt;strong&gt;&amp;ndash;publish&lt;/strong&gt; (second) defines &lt;code&gt;3000&lt;/code&gt; as the port at which you will be able to access the web interface of &lt;em&gt;Gogs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When the &lt;em&gt;Gogs&lt;/em&gt; container is running you can point your browser to the IP address of your Pi. Make sure you use the port you defined in the &lt;code&gt;docker run&lt;/code&gt; command.
In our example we have to type the following address into the browser:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://172.16.254.149:3000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a result you should see the setup page of &lt;em&gt;Gogs&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/frist-run-gogs.png&#34; alt=&#34;hypriot-ssh-prompt-after-login&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;In this setup page we need to adapt the default settings to the settings we defined in the &lt;code&gt;docker run&lt;/code&gt; command we executed previously. Thus, please change the input fields according to this table:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Input field&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Domain&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Replace &lt;code&gt;localhost&lt;/code&gt; with the IP address of your Raspberry Pi&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Application URL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;In the predefined string, replace only &lt;code&gt;localhost&lt;/code&gt; with the IP address of your Raspberry Pi, such that you have e.g. &lt;code&gt;http://172.16.254.149:3000/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Username&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set an your username&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Password&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set an your password with at least 8 characters&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;E-mail&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set your email adress&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;After you filled all required fields, it should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/frist-run-gogs_user-input-combined.png&#34; alt=&#34;frist-run-gogs_user-input-combined.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;To finish the setup, click on &lt;strong&gt;install&lt;/strong&gt; at the bottom of the page. Afterwards you will be forwarded to the login page of &lt;em&gt;Gogs&lt;/em&gt;.
Please login with the credentials you just specified.&lt;/p&gt;

&lt;p&gt;After logging in you should see the start page of the &lt;em&gt;Gogs&lt;/em&gt; service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nice, you successfully installed Gogs!&lt;/strong&gt; Now let&amp;rsquo;s start using it! Please continue with the next section to learn &lt;em&gt;how&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;how-to-create-a-git-repository-in-gogs:dc7018a7890c20895bf31528a8ab5dea&#34;&gt;How to create a Git repository in &lt;em&gt;Gogs&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Before we will be able to &lt;code&gt;git push&lt;/code&gt;, we need to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a Git repository in &lt;em&gt;Gogs&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;configure your public SSH key in &lt;em&gt;Gogs&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;clone the Git repository in &lt;em&gt;Gogs&lt;/em&gt; to your local workstation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s start by creating a new repository. Click on the &lt;strong&gt;green button&lt;/strong&gt; in the top right corner of the page and choose &lt;strong&gt;New Repository&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/start-with-green-button_with-marker.png&#34; alt=&#34;start-with-green-button&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;You should see a setup page for your new repository. Please fill out the two text input fields.&lt;/p&gt;

&lt;p&gt;At the bottom of the page you will find a checkbox. We recommend to enable this checkbox since it automatically will initialize this repository with a &lt;em&gt;README.md&lt;/em&gt;.
The following screenshot shows an example of how the setup page might look like after you provided all the necessary information.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/new-repo.png&#34; alt=&#34;new-repo&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Finish the setup by clicking on &lt;strong&gt;Create Repository&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Before you can actually use the new repository, you need to add your SSH key. Click on The &lt;strong&gt;settings button&lt;/strong&gt; in the top right corner of the page. Then, go to &lt;strong&gt;SSH Keys&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Add Key&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/add-private-key2_with-markers.png&#34; alt=&#34;add-private-key2&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Paste your public SSH key into this field and set an arbitrary &lt;em&gt;Key Name&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t know where to find your SSH key, execute the following command in your terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat ~/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see in the following screenshot, you should see your SSH key as result.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/ssh-key-export.png&#34; alt=&#34;ssh-key-export.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Finally, back in the &lt;em&gt;Gogs&lt;/em&gt; website, click the green button &lt;strong&gt;Add Key&lt;/strong&gt; to add your public SSH key. Afterwards you should see a message confirming that the key has been added successfully.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At this point, &lt;em&gt;Gogs&lt;/em&gt; should be set up properly to receive your first commit!&lt;/strong&gt; As a last step, we will &lt;code&gt;git clone&lt;/code&gt; the new repo to your workstation.&lt;/p&gt;

&lt;h2 id=&#34;start-using-git-with-the-new-repository:dc7018a7890c20895bf31528a8ab5dea&#34;&gt;Start using Git with the new repository&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gogs&lt;/em&gt; helps us in constructing the proper &lt;code&gt;git clone&lt;/code&gt; command.
Navigate inside your new repository in the Gogs Web-GUI and click on the &lt;strong&gt;black cloud symbol&lt;/strong&gt;.
Make sure that the &lt;strong&gt;SSH&lt;/strong&gt; button in front of the command is activated and copy the string in the text field via the &lt;strong&gt;black copy button&lt;/strong&gt; on the right edge.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hypriot.com/images/gogs_own_Git_service/in-repo-get-ssh-link-for-git-remote_with-markers.png&#34; alt=&#34;in-repo-get-ssh-link-for-git-remote&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Now open a terminal at your workstation and navigate to the location where you want to create the folder for the repository.&lt;/p&gt;

&lt;p&gt;Paste the command you just copied from Gogs Web-GUI. Before executing add &lt;code&gt;git clone ssh://&lt;/code&gt; in front of the command and put port &lt;code&gt;8022&lt;/code&gt; in front of your user name.
In our case &lt;code&gt;8022&lt;/code&gt; is the port Gogs listens on for SSH.&lt;/p&gt;

&lt;p&gt;In the end the command should look similar to this one:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone ssh://git@172.16.254.149:8022/my-name/demo-hypriot.git

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this command has been executed confirm the fingerprint prompt and navigate into the new directory that has been created by this command.&lt;/p&gt;

&lt;p&gt;Within the repository folder execute a &lt;code&gt;git pull&lt;/code&gt;. If the command returns &lt;code&gt;Already up-to-date&lt;/code&gt; the repository is properly set up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations!! You now have your own Git service running on your Raspberry Pi!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Gogs will only be available within your local network.
To make your Git service available outside of your home you need to do use a Dynamic DNS service like &lt;a href=&#34;http://www.noip.com/&#34;&gt;no-ip&lt;/a&gt; and configure some port forwarding in your router.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We hope setting up your own Gogs has been a painless experience for you.&lt;br /&gt;
As always use the comments below to give us feedback and share the blog post on Twitter or Facebook.&lt;/p&gt;

&lt;p&gt;Mathias, Andreas &amp;amp; Govinda&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hypriot-Demo and challenge at DockerCon 2015</title>
      <link>http://blog.hypriot.com/post/dockercon2015/</link>
      <pubDate>Wed, 24 Jun 2015 01:30:34 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/post/dockercon2015/</guid>
      <description>

&lt;p&gt;Hypriot had a short demo session (16:45 - 17:15 PDT) on the second day of the DockerCon 2015 in San Francisco,CA (USA).
The goal of the demo was to show that Docker is a really lightweight &amp;ldquo;virtualization&amp;rdquo; solution that can be easily run on small IoT devices.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;gallery clearfix&#34; itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Dieter Reuter from the Hypriot team at DockerCon 2015&lt;/div&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/dieter_at_dockercon/dieter_hypriot_dockercon_2015_1.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1426x804&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/dieter_at_dockercon/thumbnails/thumb_dieter_hypriot_dockercon_2015_1.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;It&amp;#39;s fun because the demo actually works fine :-)&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    It&amp;#39;s fun because the demo actually works fine :-)
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Docker Inc.&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/dieter_at_dockercon/dieter_hypriot_dockercon_2015_2.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1430x802&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/dieter_at_dockercon/thumbnails/thumb_dieter_hypriot_dockercon_2015_2.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;7 minutes have passed and 250 container have been started...&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    7 minutes have passed and 250 container have been started...
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Docker Inc.&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;




&lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://blog.hypriot.com/images/dieter_at_dockercon/dieter_hypriot_dockercon_2015_3.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1428x806&#34;&gt;
      &lt;img src=&#34;http://blog.hypriot.com/images/dieter_at_dockercon/thumbnails/thumb_dieter_hypriot_dockercon_2015_3.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Get on our blog and start with the #hypriot_docker_challenge!&#34; /&gt;
  &lt;/a&gt;


  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Get on our blog and start with the #hypriot_docker_challenge!
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;Docker Inc.&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/photoswipe.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;http://blog.hypriot.com/css/default-skin/default-skin.css&#34;&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/photoswipe-ui-default.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://blog.hypriot.com/js/initphotoswipe.js&#34;&gt;&lt;/script&gt;



&lt;div class=&#34;pswp&#34; tabindex=&#34;-1&#34; role=&#34;dialog&#34; aria-hidden=&#34;true&#34;&gt;

&lt;div class=&#34;pswp__bg&#34;&gt;&lt;/div&gt;

&lt;div class=&#34;pswp__scroll-wrap&#34;&gt;
    
    &lt;div class=&#34;pswp__container&#34;&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    
    &lt;div class=&#34;pswp__ui pswp__ui--hidden&#34;&gt;
    &lt;div class=&#34;pswp__top-bar&#34;&gt;
      
      &lt;div class=&#34;pswp__counter&#34;&gt;&lt;/div&gt;
      &lt;button class=&#34;pswp__button pswp__button--close&#34; title=&#34;Close (Esc)&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--share&#34; title=&#34;Share&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--fs&#34; title=&#34;Toggle fullscreen&#34;&gt;&lt;/button&gt;
      &lt;button class=&#34;pswp__button pswp__button--zoom&#34; title=&#34;Zoom in/out&#34;&gt;&lt;/button&gt;
      
      
      &lt;div class=&#34;pswp__preloader&#34;&gt;
        &lt;div class=&#34;pswp__preloader__icn&#34;&gt;
          &lt;div class=&#34;pswp__preloader__cut&#34;&gt;
            &lt;div class=&#34;pswp__preloader__donut&#34;&gt;&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;pswp__share-modal pswp__share-modal--hidden pswp__single-tap&#34;&gt;
      &lt;div class=&#34;pswp__share-tooltip&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--left&#34; title=&#34;Previous (arrow left)&#34;&gt;
    &lt;/button&gt;
    &lt;button class=&#34;pswp__button pswp__button--arrow--right&#34; title=&#34;Next (arrow right)&#34;&gt;
    &lt;/button&gt;
    &lt;div class=&#34;pswp__caption&#34;&gt;
      &lt;div class=&#34;pswp__caption__center&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;style&gt;
    .gallery {  }
    .gallery img { width: 100%; height: auto; }
    .gallery figure { display: block; float: left; margin: 0 5px 5px 0; width: 200px; }
    .gallery figcaption { display: none; }
    .gallery div.title { font-weight: bold; }
    span[itemprop=&#34;copyrightHolder&#34;] { color : #888; float: right; }
    span[itemprop=&#34;copyrightHolder&#34;]:before { content: &#34;Foto: &#34;; }
    img[itemprop=&#34;thumbnail&#34;]{ width: 200px; }
&lt;/style&gt;


&lt;script&gt;initPhotoSwipeFromDOM(&#39;.gallery&#39;);&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;https://player.vimeo.com/video/131966874&#34; width=&#34;600&#34; height=&#34;450&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt; &lt;p&gt;&lt;a href=&#34;https://vimeo.com/131966874&#34;&gt;DockerCon2015 - Scale down to the minimum&lt;/a&gt; from &lt;a href=&#34;https://vimeo.com/user38425431&#34;&gt;hypriot&lt;/a&gt; on &lt;a href=&#34;https://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;As preparation for this demo we only had to make some small &lt;a href=&#34;https://github.com/docker/docker/compare/master...hypriot:optional_userland_proxy&#34;&gt;tweaks&lt;/a&gt; to Docker and its environment.
These changes allowed us to start up hundreds of containers on a Raspberry Pi in just a couple of minutes. How awesome is that?
If that is possible on a small device imagine how Docker runs on a big server&amp;hellip; :)&lt;/p&gt;

&lt;h3 id=&#34;the-hypriot-dockercon-challenge:08dbaaf64a7259b7390848cf1e42575f&#34;&gt;The Hypriot-DockerCon-Challenge&lt;/h3&gt;

&lt;p&gt;Even with this jaw-dropping result we think there is room for improvement.
That is why &lt;strong&gt;we challenge you&lt;/strong&gt; to help us to improve the performance even more and remove remaining roadblocks!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prize:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The person who successfully manage to get the highest number of these &lt;a href=&#34;https://registry.hub.docker.com/u/hypriot/rpi-busybox-httpd/&#34;&gt;Docker containers&lt;/a&gt; to run concurrently on a Raspberry Pi 2 will be awarded a &lt;a href=&#34;http://europe.dockercon.com&#34;&gt;DockerCon Europe&lt;/a&gt; ticket and a speaking / demo slot during the conference.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rules:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use a single Raspberry Pi 2 with a HypriotOS release (a Raspi 1 would work too, but you’ll have a big disadvantage with 512MByte only)&lt;/li&gt;
&lt;li&gt;Use Docker Engine to start the containers (see technical hint #3 below)&lt;/li&gt;
&lt;li&gt;Use the webserver container “hypriot/rpi-busybox-httpd” as a starting point – you can use whatever webserver you like, but you have to serve the static website with the same index.html + .jpg&lt;/li&gt;
&lt;li&gt;Challenge ends on Monday, October 19th, 2015 at 17:00 PDT – winner will be announced on Tuesday, October 20th&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Technical Hints:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reduce the stack size used for starting Docker subprocesses (see /etc/init.d/docker)&lt;/li&gt;
&lt;li&gt;Optimize the httpd container in order to use less memory&lt;/li&gt;
&lt;li&gt;Optimize the Docker daemon itself (Participants must submit any changes made to docker engine with appropriate tests back to the docker project or must be independently reproducible with the stock docker engine release.) Optimizations must be general optimizations, useful outside of the scope of this specific benchmark.&lt;/li&gt;
&lt;li&gt;Ask Hypriot for help, they’ll offer new hints and tips publicly through comments on the blog and &lt;a href=&#34;https://twitter.com/HypriotTweets&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To get you started for this challenge we prepared a couple of links for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.hypriot.com/getting-started&#34;&gt;Getting started with our Docker Hypriot SD-card image on Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hypriot/rpi-busybox-httpd&#34;&gt;Raspberry Pi Docker Image for HTTPd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hypriot/rpi-busybox-httpd/blob/master/start-webservers.sh&#34;&gt;Start-Script for running lots of containers on the Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope we did wet your appetite. Happy hacking and have fun!&lt;/p&gt;

&lt;p&gt;As always use the comments below to give us feedback and share it on Twitter or Facebook.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to get Docker running on your Raspberry Pi using Mac OS X</title>
      <link>http://blog.hypriot.com/getting-started-with-docker-and-mac-on-the-raspberry-pi/</link>
      <pubDate>Fri, 15 May 2015 20:16:11 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/getting-started-with-docker-and-mac-on-the-raspberry-pi/</guid>
      <description>

&lt;p&gt;This guide shows you how to get Docker running on your Raspberry Pi using a &lt;strong&gt;Mac OS X workstation&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you have not read the getting started guide about Docker on the Raspberry Pi yet you might wanna check it out first: &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device&#34;&gt;Getting started with Docker on your ARM Device&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We tried to make this guide as concise as possible. Make sure that you know the basics about the command line and you should be ready to go.
If you don&amp;rsquo;t you can learn the basics in &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/an-introduction-to-the-linux-terminal&#34;&gt;An Introduction to the Linux Terminal&lt;/a&gt; and come back afterwards.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;hardware&lt;/strong&gt; you gonna need to follow along is a Raspberry Pi 1 or 2 and one SD card.
If you are going to use a Raspberry 2 you will have to use a microSD card - otherwise a normal SD card is sufficient.
We recommend a size of at least 4 GB.&lt;/p&gt;

&lt;p&gt;The SD card contains all the software which we are going to use on our Raspberry Pi.
With software we basically mean two things: first an operating system for your Raspberry Pi and second the software you as user would like to use - e.g. a browser or a word processing program.
In our case the software we wanna use is Docker.&lt;/p&gt;

&lt;p&gt;We - from Hypriot - created a preconfigured &lt;a href=&#34;http://blog.hypriot.com/downloads/&#34;&gt;SD card image&lt;/a&gt; which contains everything you need to run Docker on your Raspberry Pi.
To use the image you first have to download and transfer it to your SD card. Transferring an image to an SD card is often referred to as &lt;em&gt;flashing&lt;/em&gt;.
Afterwards you just have to insert the flashed SD card into your Raspberry Pi and start it up.&lt;/p&gt;

&lt;h3 id=&#34;download-the-hypriot-docker-sd-card-image:ca4b4a19668a2ec6a58c5af490c910c5&#34;&gt;Download the Hypriot Docker SD card image&lt;/h3&gt;

&lt;p&gt;Download our current SD card image using your browser by clicking &lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150416-201537.img.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After the download is completed open a terminal window. To do this press &lt;strong&gt;CMD&lt;/strong&gt; + &lt;strong&gt;Whitespace&lt;/strong&gt; and type &lt;em&gt;terminal&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now we will extract the downloaded zip file. Go to your &lt;em&gt;Download&lt;/em&gt; folder first by typing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/Downloads
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now extract the zip file with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unzip hypriot-rpi-20150416-201537.img.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the file is unzipped you will have a new file with an &lt;strong&gt;.img&lt;/strong&gt; extension.
In the next step we will flash this file onto your SD card.&lt;/p&gt;

&lt;h3 id=&#34;flash-the-downloaded-image-to-your-sd-card:ca4b4a19668a2ec6a58c5af490c910c5&#34;&gt;Flash the downloaded image to your SD card&lt;/h3&gt;

&lt;p&gt;First put your SD card into the computer. Then in the terminal type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;diskutil list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see a list of all your disks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/mac-screenies/diskutil-list.png&#34; alt=&#34;disktuil-list&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Now identify the SD card. Look at the fourth column which shows the size of the devices of your workstation.
One item in the list should have a size that is very close to the size of your SD card.
From there get the identifier which is shown in the first column.
Here the identifier is &lt;code&gt;/dev/disk5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now unmount the SD card. Make sure to replace &lt;code&gt;/dev/disk5&lt;/code&gt; with the identifier of your sd card.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;diskutil unmountdisk /dev/disk5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a result you should see&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/mac-screenies/unmount.png&#34; alt=&#34;Screenshot unmounted&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Now we are ready to flash the SD card. We are going to use the &lt;code&gt;dd&lt;/code&gt; command for this.&lt;/p&gt;

&lt;p&gt;Before you execute the command below, make sure to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;replace the parameter after &lt;code&gt;if=&lt;/code&gt; with the path to the downloaded image&lt;/li&gt;
&lt;li&gt;replace the parameter after &lt;code&gt;of=&lt;/code&gt; with the identifier of your SD card. Make sure you put a &lt;code&gt;r&lt;/code&gt; in front of &lt;code&gt;disk&lt;/code&gt; as you can see in the example&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo dd if=hypriot-rpi-20150416-201537.img of=/dev/rdisk5 bs=1m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While this command is executed you won&amp;rsquo;t get any information about its progress.
Depending on your hardware and the performance of your SD card it can take up to five minutes to flash the image.
When the &lt;code&gt;dd&lt;/code&gt; is finished, you should get an output like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/mac-screenies/dd-success.png&#34; alt=&#34;after-dd-success&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Finally unmount the SD card again in the same way as before.&lt;/p&gt;

&lt;h3 id=&#34;start-your-raspberry-pi-with-the-sd-card:ca4b4a19668a2ec6a58c5af490c910c5&#34;&gt;Start your Raspberry Pi with the SD card&lt;/h3&gt;

&lt;p&gt;Boot your Raspberry Pi by&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;connecting the Raspberry Pi to your local network via an ethernet cable&lt;/li&gt;
&lt;li&gt;putting the SD card into the designated slot&lt;/li&gt;
&lt;li&gt;plugging in the power adapter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After finishing the last step your Raspberry Pi will boot and the LEDs should start blinking.
The very first boot will take one to three minutes as the file system will be resized.&lt;/p&gt;

&lt;h3 id=&#34;ensure-everything-works:ca4b4a19668a2ec6a58c5af490c910c5&#34;&gt;Ensure everything works&lt;/h3&gt;

&lt;p&gt;To check if Docker is actually running we need to log into the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;To do this we need to find out the IP address of your Raspberry Pi first.
If you are not sure what the IP-Address of your PI is, there are different ways of finding it out.
One way is to use the &lt;code&gt;nmap&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;First identify the IP address of your own workstation. Type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ipconfig getifaddr en1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it does not report back an IP address, you are probably connected via cable to your network. Try &lt;code&gt;en0&lt;/code&gt; instead of &lt;code&gt;en1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you can see in the following screenshot our IP address is &lt;code&gt;192.168.0.101&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/mac-screenies/own-ip-address.png&#34; alt=&#34;own-ip-address&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Then replace the IP address in front of the &lt;code&gt;/24&lt;/code&gt; with yours and type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nmap -sP 192.168.0.100/24 | grep black-pearl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of the &lt;code&gt;nmap&lt;/code&gt; command should show you the IP address of your Raspberry Pi.
If you get a blank line without an IP address your Raspberry Pi is probably not connected to the network.
Or there is a problem with the SD card which prevents the Raspberry Pi from booting.&lt;/p&gt;

&lt;p&gt;After you found out the IP address establish a connection to the Raspberry Pi with the ssh command.
Replace the IP address after the &lt;code&gt;@&lt;/code&gt; with the one of your Raspberry Pi.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh root@192.168.178.10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you are asked for the password type &lt;code&gt;hypriot&lt;/code&gt; and hit &lt;em&gt;Enter&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The first time you establish the connection you will be asked if you are sure that you want to connect to the Raspberry Pi - answer with &lt;code&gt;yes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If everything went fine you should now see the &lt;em&gt;HypriotOS&lt;/em&gt; command line prompt waiting for your input.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/mac-screenies/hypriot-ssh-prompt-after-login.png&#34; alt=&#34;hypriot-ssh-prompt-after-login&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Finally check if the Docker Service is running by typing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker info
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of the &lt;code&gt;docker info&lt;/code&gt; command should look similar to:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/mac-screenies/docker-info.png&#34; alt=&#34;docker-info&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations! You have succeeded in getting Docker running on your Raspberry Pi!&lt;/strong&gt; :)&lt;/p&gt;

&lt;p&gt;You are now ready to continue your exploration of Docker with our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device#going-wild-with-docker-what-can-you-actually-do-with-it:397c66ef19f9f061b6711d2e296cb276&#34;&gt;Getting Started Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to get Docker running on your Raspberry Pi using Windows</title>
      <link>http://blog.hypriot.com/getting-started-with-docker-and-windows-on-the-raspberry-pi/</link>
      <pubDate>Fri, 15 May 2015 20:16:11 +0200</pubDate>
      
      <guid>http://blog.hypriot.com/getting-started-with-docker-and-windows-on-the-raspberry-pi/</guid>
      <description>

&lt;p&gt;This guide shows you how to get Docker running on your Raspberry Pi using a &lt;strong&gt;Windows workstation&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you have not read the getting started guide about Docker on the Raspberry Pi yet you might wanna check it out first: &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device&#34;&gt;Getting started on your ARM device&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;strong&gt;hardware&lt;/strong&gt; you gonna need to follow along is a Raspberry Pi 1 or 2 and one SD card.
If you are going to use a Raspberry 2 you will have to use a microSD card - otherwise a normal SD card is sufficient.
We recommend a size of at least 4 GB.&lt;/p&gt;

&lt;p&gt;The SD card contains all the software which we are going to use on our Raspberry Pi.
With software we basically mean two things: first an operating system for your Raspberry Pi and second the software you as user would like to use - e.g. a browser or a word processing program.
In our case the software we wanna use is Docker.&lt;/p&gt;

&lt;p&gt;We - from Hypriot - created a preconfigured &lt;a href=&#34;http://blog.hypriot.com/downloads/&#34;&gt;SD card image&lt;/a&gt; which contains everything you need to run Docker on your Raspberry Pi.
To use the image you first have to download and transfer it to your SD card. Transferring an image to an SD card is often referred to as &lt;em&gt;flashing&lt;/em&gt;.
Afterwards you just have to insert the flashed SD card into your Raspberry Pi and start it up.&lt;/p&gt;

&lt;p&gt;For this tutorial you will need to install four applications which we are going to use later. Please follow the download links and install them. Note the installation remarks.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Application&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.7-zip.de&#34;&gt;7-Zip&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;For extracting the compressed SD card image. &lt;/br&gt; &lt;em&gt;Make sure you choose the download file that fits your workstations&amp;rsquo;s architecture (x32 vs. x64)!&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://sourceforge.net/projects/win32diskimager/&#34;&gt;Win32 Disk Imager&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;For flashing the SD card image to the SD card. &lt;/br&gt; &lt;em&gt;During installation you will find a checkbox called &amp;ldquo;Start Pcap-Service at startup&amp;rdquo;. We recommend to disable it.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe&#34;&gt;Putty&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;For establishing a connection to the Raspberry Pi &lt;/br&gt; &lt;em&gt;Just download it. No installation needed.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://sourceforge.net/projects/nmap.mirror/?source=typ_redirect&#34;&gt;Zenmap&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;For identifying the IP address of your Raspberry Pi&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;download-the-hypriot-docker-sd-card-image:f9c6c9c0ab05c0ca238dff8f082f6e17&#34;&gt;Download the Hypriot Docker SD card image&lt;/h3&gt;

&lt;p&gt;Download our current SD card image using your browser by clicking &lt;a href=&#34;http://downloads.hypriot.com/hypriot-rpi-20150416-201537.img.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next go to your &lt;strong&gt;Download&lt;/strong&gt; folder and extract the downloaded zip file by right-clicking on the file and then clicking on &lt;strong&gt;7-zip&lt;/strong&gt; -&amp;gt; &lt;strong&gt;extract here&amp;hellip;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After 7-zip is finished with extracting you will have a file with a &lt;strong&gt;.img&lt;/strong&gt; extension.
In the next step we will flash this file onto your SD card.&lt;/p&gt;

&lt;h3 id=&#34;flash-the-downloaded-image-to-your-sd-card:f9c6c9c0ab05c0ca238dff8f082f6e17&#34;&gt;Flash the downloaded image to your SD card&lt;/h3&gt;

&lt;p&gt;To start the flashing process right-click on the &lt;em&gt;Win32 Disk Imager&lt;/em&gt; application which we installed earlier and click on &lt;em&gt;Run as administrator&lt;/em&gt;. You will see a window asking for permissions. Grant them.&lt;/p&gt;

&lt;p&gt;Now, with the &lt;em&gt;Win32 Disk Imager&lt;/em&gt;&amp;rsquo;s window opened, click on the blue folder icon and choose the Hypriot SD card image in your &lt;em&gt;Download&lt;/em&gt; folder.&lt;/p&gt;

&lt;p&gt;Next to the blue folder button, you will find a dropdown menu in which you can select your SD card.
To double check the device letter open your Windows Explorer and locate the SD card drive.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/windows-screenies/image-writer-opened.png&#34; alt=&#34;image-writer&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Finally click on &lt;strong&gt;write&lt;/strong&gt; which will flash the SD card image to the SD card.&lt;/p&gt;

&lt;p&gt;Upon completion close &lt;em&gt;Win32 Disk Imager&lt;/em&gt; and eject the SD card before removing it from its slot.
In order to eject the SD card use the &lt;em&gt;secure eject&lt;/em&gt; function in the menu next to your system clock.
This is usually in the very bottom right corner of your screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/windows-screenies/eject-sd-card.png&#34; alt=&#34;eject-sd&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;start-your-raspberry-pi-with-the-sd-card:f9c6c9c0ab05c0ca238dff8f082f6e17&#34;&gt;Start your Raspberry Pi with the SD card&lt;/h3&gt;

&lt;p&gt;Boot your Raspberry Pi by&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;connecting the Raspberry Pi to your local network via an ethernet cable&lt;/li&gt;
&lt;li&gt;putting the SD card into the designated slot&lt;/li&gt;
&lt;li&gt;plugging in the power adapter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After finishing the last step your Raspberry Pi will boot and the LEDs should start blinking.
The very first boot will take one to three minutes as the file system will be resized.&lt;/p&gt;

&lt;h3 id=&#34;ensure-everything-works:f9c6c9c0ab05c0ca238dff8f082f6e17&#34;&gt;Ensure everything works&lt;/h3&gt;

&lt;p&gt;To check if Docker is actually running we need to log into the Raspberry Pi via &lt;em&gt;PuTTY&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To do this we need to find out the IP address of your Raspberry Pi first.
This can be done with &lt;em&gt;Zenmap&lt;/em&gt; which we installed earlier.&lt;/p&gt;

&lt;p&gt;After starting &lt;em&gt;Zenmap&lt;/em&gt; look for the field &lt;em&gt;Command&lt;/em&gt;.
Type the following command into this field but replace the IP address in front of &lt;code&gt;/24&lt;/code&gt; with your own and hit &lt;em&gt;Enter&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nmap -sP 192.168.0.100/24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a result you should see this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/windows-screenies/zenmap-scan-result.PNG&#34; alt=&#34;zenmap-scan-result&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Zenmap&lt;/em&gt; list all active hosts within your local network.
In order to find the Raspberry Pi click the button &lt;em&gt;filter hosts&lt;/em&gt; at the bottom of the &lt;em&gt;Zenmap&lt;/em&gt; and type in &lt;em&gt;black&lt;/em&gt;.
Now the first line of the list should show the IP address of your Raspberry Pi.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/windows-screenies/zenmap-with-filter-with-marker.png&#34; alt=&#34;zenmap-with-filter-with-marker&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Since we now know where to find the Raspberry Pi within your network it is time to start &lt;em&gt;PuTTY&lt;/em&gt; to establish a SSH connection to your Raspberry Pi.&lt;/p&gt;

&lt;p&gt;After starting &lt;em&gt;PuTTY&lt;/em&gt; type in the IP address we determined into the field &lt;em&gt;Host Name&lt;/em&gt;. With a click on the button &lt;em&gt;Open&lt;/em&gt; the connection will be established.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/windows-screenies/putty-window-settings.png&#34; alt=&#34;Screenshot-putty-login&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;In the new window which just opened type &lt;code&gt;root&lt;/code&gt; as login name and hit &lt;em&gt;Enter&lt;/em&gt;. Next you will be asked for a password. Type &lt;code&gt;hypriot&lt;/code&gt; and hit &lt;em&gt;Enter&lt;/em&gt; again.&lt;/p&gt;

&lt;p&gt;If everything went fine you should now see the &lt;em&gt;HypriotOS&lt;/em&gt; command line prompt waiting for your input. It should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/windows-screenies/putty-window-login.png&#34; alt=&#34;putty-window-login&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Finally to check if the Docker service is running type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker info
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of the &lt;code&gt;docker info&lt;/code&gt; command should look similar to:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.eu-central-1.amazonaws.com/assets.hypriot.com/blog_post_getting-started/windows-screenies/putty-window-docker-info.png&#34; alt=&#34;docker-info&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations! You have succeeded in getting Docker running on your Raspberry Pi!&lt;/strong&gt; :)&lt;/p&gt;

&lt;p&gt;You are now ready to continue your exploration of Docker with our &lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device#going-wild-with-docker-what-can-you-actually-do-with-it:397c66ef19f9f061b6711d2e296cb276&#34;&gt;Getting Started Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>